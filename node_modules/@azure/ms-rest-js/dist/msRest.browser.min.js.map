{"version":3,"sources":["../lib/httpHeaders.ts","../lib/util/base64.browser.ts","../node_modules/uuid/lib/bytesToUuid.js","../node_modules/uuid/lib/rng-browser.js","../node_modules/uuid/v4.js","../lib/util/constants.ts","../lib/util/utils.ts","../lib/serializer.ts","../lib/webResource.ts","../node_modules/tslib/tslib.es6.js","../lib/restError.ts","../lib/httpPipelineLogLevel.ts","../lib/xhrHttpClient.ts","../lib/operationParameter.ts","../lib/operationSpec.ts","../lib/util/xml.browser.ts","../lib/policies/requestPolicy.ts","../lib/policies/deserializationPolicy.ts","../lib/policies/exponentialRetryPolicy.ts","../lib/policies/generateClientRequestIdPolicy.ts","../lib/policies/msRestUserAgentPolicy.browser.ts","../lib/policies/userAgentPolicy.ts","../lib/url.ts","../lib/policies/redirectPolicy.ts","../lib/policies/rpRegistrationPolicy.ts","../lib/policies/signingPolicy.ts","../lib/policies/systemErrorRetryPolicy.ts","../lib/queryCollectionFormat.ts","../lib/policies/agentPolicy.browser.ts","../lib/policies/proxyPolicy.browser.ts","../lib/policies/throttlingRetryPolicy.ts","../lib/serviceClient.ts","../lib/policies/logPolicy.ts","../lib/credentials/tokenCredentials.ts","../lib/credentials/basicAuthenticationCredentials.ts","../lib/credentials/apiKeyCredentials.ts","../lib/credentials/topicCredentials.ts","../lib/credentials/domainCredentials.ts"],"names":["getHeaderKey","headerName","toLowerCase","isHttpHeadersLike","object","rawHeaders","clone","get","set","contains","remove","headersArray","headerValues","headerNames","toJson","HttpHeaders","this","_headersMap","prototype","headerValue","name","value","toString","header","undefined","result","headerKey","headers","push","i","length","JSON","stringify","encodeByteArray","str","String","fromCharCode","btoa","decodeString","byteString","atob","arr","Uint8Array","charCodeAt","getRandomValues","crypto","bind","window","msCrypto","rnds8","module","exports","rnds","Array","r","Math","random","byteToHex","substr","bytesToUuid_1","buf","offset","bth","join","v4_1","options","rng","ii","bytesToUuid","Constants","msRestVersion","HTTP","HTTPS","HTTP_PROXY","HTTPS_PROXY","HttpConstants","HttpVerbs","PUT","GET","DELETE","POST","MERGE","HEAD","PATCH","StatusCodes","TooManyRequests","HeaderConstants","AUTHORIZATION","AUTHORIZATION_SCHEME","RETRY_AFTER","USER_AGENT","isNode","process","version","versions","node","stripResponse","response","strippedResponse","body","bodyAsText","status","stripRequest","request","strippedRequest","isValidUuid","uuid","RegExp","test","generateUuid","uuidv4","delay","t","Promise","resolve","setTimeout","validateISODuration","isDuration","replaceAll","searchValue","replaceValue","split","Serializer","modelMappers","isXML","validateConstraints","mapper","objectName","failValidation","constraintName","constraintValue","Error","constraints","_a","ExclusiveMaximum","ExclusiveMinimum","InclusiveMaximum","InclusiveMinimum","MaxItems","MaxLength","MinItems","MinLength","MultipleOf","Pattern","UniqueItems","pattern","match","some","item","ar","indexOf","serialize","payload","mapperType","type","serializedName","isConstant","defaultValue","required","nullable","typeName","valueOf","utils.isValidUuid","objectType","ArrayBuffer","isView","Blob","serializeBasicTypes","allowedValues","serializeEnumType","Date","isNaN","parse","toISOString","substring","toUTCString","d","floor","getTime","dateToUnixTime","utils.isDuration","serializeDateTypes","base64.encodeByteArray","serializeByteArrayType","buffer","ch","len","trimEnd","replace","bufferToBase64Url","serializeBase64UrlType","serializer","isArray","elementType","element","tempArray","serializeSequenceType","valueType","tempDictionary","_i","Object","keys","key","serializeDictionaryType","getPolymorphicDiscriminatorRecursively","getPolymorphicMapper","modelProps","resolveModelProperties","_b","propertyMapper","readOnly","propName","parentObject","xmlIsWrapped","xmlName","xmlElementName","paths","splitSerializeName","pop","_c","paths_1","pathName","propertyObjectName","toSerialize","polymorphicDiscriminator","clientName","serializedValue","xmlIsAttribute","$","additionalPropertiesMapper","additionalProperties","propNames","clientPropName","every","pn","serializeCompositeType","deserialize","responseBody","instance","handledPropertyNames","headerCollectionPrefix","dictionary","startsWith","unwrappedProperty","propertyInstance","res","_d","paths_2","isAdditionalProperty","responsePropName","_e","_f","includes","isSpecialXmlProperty","deserializeCompositeType","parseFloat","n","unixTimeToDate","base64.decodeString","base64UrlToByteArray","deserializeSequenceType","deserializeDictionaryType","prop","classes","partialclass","subwords_1","charAt","modelProperties","className","modelMapper","propertyName","polymorphicPropertyName","discriminatorName","discriminatorValue","uberParent","indexDiscriminator","polymorphicMapper","discriminators","getPolymorphicDiscriminatorSafely","MapperType","o","o_1","strEnum","WebResource","url","method","query","streamResponseBody","withCredentials","abortSignal","timeout","onUploadProgress","onDownloadProgress","proxySettings","keepAlive","agentSettings","formData","validateRequestProperties","prepare","pathTemplate","validMethods","toUpperCase","pathTemplate_1","pathParameters_1","pathParameters","baseUrl","url_1","endsWith","slice","segments","forEach","pathParamName","pathParam","encodeURIComponent","skipUrlEncoding","queryParameters","queryParams","queryParamName","queryParam","disableClientRequestId","bodyIsStream","serializationMapper","mappers","disableJsonStringifyOnBody","operationSpec","shouldDeserialize","operationResponseGetter","extendStatics","b","setPrototypeOf","__proto__","p","hasOwnProperty","__extends","__","constructor","create","__assign","assign","s","arguments","call","apply","__awaiter","thisArg","_arguments","P","generator","reject","fulfilled","step","next","e","rejected","done","then","__generator","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","HttpPipelineLogLevel","RestError","_super","message","code","statusCode","_this","REQUEST_SEND_ERROR","REQUEST_ABORTED_ERROR","PARSE_ERROR","XhrHttpClient","sendRequest","xhr","XMLHttpRequest","listener_1","abort","addEventListener","readyState","DONE","removeEventListener","addProgressListener","upload","requestForm_1","FormData","appendFormValue","append","formKey","formValue","j","contentType","open","setRequestHeader","responseType","send","HEADERS_RECEIVED","blobBody","rejectOnTerminalEvent","parseHeaders","responseText","listener","rawEvent","loadedBytes","loaded","responseHeaders","headerLines_1","getAllResponseHeaders","trim","line","index","getPathStringFromParameter","parameter","getPathStringFromParameterPath","parameterPath","isStreamOperation","responses","operationResponse","bodyMapper","Stream","parser","DOMParser","parseXML","dom","parseFromString","errorNS","parserErrors","getElementsByTagNameNS","innerHTML","throwIfError","obj","domToObject","childNodeCount","childNodes","firstChildNode","onlyChildTextValue","nodeType","Node","TEXT_NODE","nodeValue","elementWithAttributes","attributes","isElement","hasAttributes","asElementWithAttributes","attr","nodeName","child","childObject","err","getElementsByTagName","namespaceURI","ignored","doc","document","implementation","createDocument","XMLSerializer","stringifyXML","opts","buildNode","elementName","elem","createElement","textContent","obj_1","arrayElem","buildAttributes","setNamedItem","_g","_h","appendChild","rootName","serializeToString","attrs","createAttribute","BaseRequestPolicy","_nextPolicy","_options","shouldLog","logLevel","log","RequestPolicyOptions","_logger","OFF","minimumLogLevel","deserializationPolicy","deserializationContentTypes","nextPolicy","DeserializationPolicy","defaultJsonContentTypes","defaultXmlContentTypes","jsonContentTypes","json","xmlContentTypes","xml","deserializeResponseBody","errorHandler","msg","errCode","text_1","contentComponents","map","component","parsedBody","catch","parsedResponse","shouldDeserializeResponse","expectedStatusCodes","hasNoExpectedStatusCodes","responseSpec","getOperationResponse","valueToDeserialize","Sequence","error","restError","utils.stripRequest","utils.stripResponse","httpMethod","headersMapper","parsedHeaders","defaultResponseSpec","default","initialErrorMessage","parsedErrorResponse","defaultResponseBodyMapper","internalError","defaultError","exponentialRetryPolicy","retryCount","retryInterval","minRetryInterval","maxRetryInterval","ExponentialRetryPolicy","isNumber","retry","policy","retryData","requestError","innerError","incrementDelta","pow","min","updateRetryData","isAborted","aborted","shouldRetry","utils.delay","generateClientRequestIdPolicy","requestIdHeaderName","GenerateClientRequestIdPolicy","_requestIdHeaderName","utils.generateUuid","getDefaultUserAgentKey","getDefaultUserAgentHeaderName","getDefaultUserAgentValue","navigator","telemetryInfo","keySeparator","valueSeparator","runtimeInfo","platformSpecificData","oscpu","platform","concat","info","userAgentPolicy","userAgentData","UserAgentPolicy","addUserAgentHeader","URLQuery","_rawQuery","any","parameterName","parameterValue","newValue","parameterStrings","parameterValue_1","parameterValueElement","text","currentState","currentCharacter","URLBuilder","setScheme","scheme","_scheme","getScheme","setHost","host","_host","getHost","setPort","port","_port","getPort","setPath","path","_path","appendPath","currentPath","getPath","setQuery","_query","setQueryParameter","queryParameterName","queryParameterValue","getQueryParameterValue","getQuery","startState","tokenizer","URLTokenizer","token","current","tokenPath","URLToken","_text","state","_textLength","_currentState","_currentIndex","_currentToken","hasCurrentCharacter","readWhile","character","characterCode","isAlphaNumericCharacter","readWhileLetterOrDigit","schemeOrHost","readUntilCharacter","getCurrentCharacter","peekCharacters","nextSchemeOrHost","nextCharacter","nextHost","nextPort","nextPath","readRemaining","nextQuery","charactersToPeek","endIndex","condition","terminatingCharacters","redirectPolicy","maximumRetries","RedirectPolicy","maxRetries","handleRedirect","currentRetries","locationHeader","builder","RPRegistrationPolicy","_retryTimeout","rpName","matchRes","checkRPNotRegisteredError","urlPrefix","extractSubscriptionUrl","provider","originalRequest","postUrl","getUrl","reqOptions","getRequestEssentials","getRegistrationStatus","registrationState","registerRP","registrationStatus","registerIfNeeded","reuseUrlToo","signingPolicy","authenticationProvider","SigningPolicy","signRequest","nextRequest","systemErrorRetryPolicy","SystemErrorRetryPolicy","QueryCollectionFormat","DEFAULT_CLIENT_RETRY_INTERVAL","DEFAULT_CLIENT_RETRY_COUNT","DEFAULT_CLIENT_MAX_RETRY_INTERVAL","DEFAULT_CLIENT_MIN_RETRY_INTERVAL","boundedRandDelta","currentCount","agentNotSupportedInBrowser","agentPolicy","_agentSettings","AgentPolicy","_request","proxyNotSupportedInBrowser","getDefaultProxySettings","_proxyUrl","proxyPolicy","_proxySettings","ProxyPolicy","throttlingRetryPolicy","ThrottlingRetryPolicy","_handleResponse","_defaultResponseHandler","httpRequest","httpResponse","retryAfterHeader","delayInMs","parseRetryAfterHeader","retryAfterInSeconds","Number","parseDateRetryAfterHeader","now","diff","ServiceClient","credentials","requestPolicyFactories","_withCredentials","_httpClient","httpClient","DefaultHttpClient","_requestPolicyOptions","httpPipelineLogger","factories","generateClientRequestIdHeader","clientRequestIdHeaderName","userAgentHeaderName","getValueOrFunctionResult","userAgentHeaderValue","userAgent","retryTimeout","rpRegistrationPolicy","rpRegistrationRetryTimeout","noRetryPolicy","createDefaultRequestPolicyFactories","newRequestPolicyFactories","_requestPolicyFactories","httpPipeline","sendOperationRequest","operationArguments","callback","baseUri","requestUrl","urlParameters","urlParameter","urlParameterValue","getOperationArgumentValueFromParameter","skipEncoding","queryParameter","collectionFormat","Multi","Ssv","Tsv","requestContentType","headerParameters","headerParameter","customHeaders","customHeaderName","serviceClient","requestBody","requestBodyParameterPathString","isStream","utils.prepareXMLRootList","formDataParameters","formDataParameter","formDataParameterValue","formDataParameterPropertyName","serializeRequestBody","flattenResponse","cb","_response","defaultValueCreator","getOperationArgumentValueFromParameterPath","parameterMapper","propertySearchResult","getPropertyFromParameterPath","propertyFound","useDefaultValue","propertyValue","parameterPathString","propertyPath","propertyPathString","parent","parameterPathPart","addOperationResponse","defineProperty","readableStreamBody","modelProperties_1","isPageableResponse","k","arrayResponse","il","a","jl","__spreadArrays","LogPolicy","logger","console","logResponse","TokenCredentials","authorizationScheme","webResource","BasicAuthenticationCredentials","userName","password","encodedCredentials","ApiKeyCredentials","inHeader","inQuery","TopicCredentials","topicKey","aeg-sas-key","DomainCredentials","domainKey","targetCtor","sourceCtors","getOwnPropertyNames","uri","promiseFactories","kickstart","promiseFactory","promise","data","nextTick","serializeObject","array","property"],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\n/**\n * A collection of HttpHeaders that can be sent with a HTTP request.\n */\nfunction getHeaderKey(headerName: string) {\n  return headerName.toLowerCase();\n}\n\n/**\n * An individual header within a HttpHeaders collection.\n */\nexport interface HttpHeader {\n  /**\n   * The name of the header.\n   */\n  name: string;\n\n  /**\n   * The value of the header.\n   */\n  value: string;\n}\n\n/**\n * A HttpHeaders collection represented as a simple JSON object.\n */\nexport type RawHttpHeaders = { [headerName: string]: string };\n\n/**\n * A collection of HTTP header key/value pairs.\n */\nexport interface HttpHeadersLike {\n  /**\n   * Set a header in this collection with the provided name and value. The name is\n   * case-insensitive.\n   * @param headerName The name of the header to set. This value is case-insensitive.\n   * @param headerValue The value of the header to set.\n   */\n  set(headerName: string, headerValue: string | number): void;\n  /**\n   * Get the header value for the provided header name, or undefined if no header exists in this\n   * collection with the provided name.\n   * @param headerName The name of the header.\n   */\n  get(headerName: string): string | undefined;\n  /**\n   * Get whether or not this header collection contains a header entry for the provided header name.\n   */\n  contains(headerName: string): boolean;\n  /**\n   * Remove the header with the provided headerName. Return whether or not the header existed and\n   * was removed.\n   * @param headerName The name of the header to remove.\n   */\n  remove(headerName: string): boolean;\n  /**\n   * Get the headers that are contained this collection as an object.\n   */\n  rawHeaders(): RawHttpHeaders;\n  /**\n   * Get the headers that are contained in this collection as an array.\n   */\n  headersArray(): HttpHeader[];\n  /**\n   * Get the header names that are contained in this collection.\n   */\n  headerNames(): string[];\n  /**\n   * Get the header values that are contained in this collection.\n   */\n  headerValues(): string[];\n  /**\n   * Create a deep clone/copy of this HttpHeaders collection.\n   */\n  clone(): HttpHeadersLike;\n  /**\n   * Get the JSON object representation of this HTTP header collection.\n   * The result is the same as `rawHeaders()`.\n   */\n  toJson(): RawHttpHeaders;\n}\n\nexport function isHttpHeadersLike(object?: any): object is HttpHeadersLike {\n  if (!object || typeof object !== \"object\") {\n    return false;\n  }\n\n  if (\n    typeof object.rawHeaders === \"function\" &&\n    typeof object.clone === \"function\" &&\n    typeof object.get === \"function\" &&\n    typeof object.set === \"function\" &&\n    typeof object.contains === \"function\" &&\n    typeof object.remove === \"function\" &&\n    typeof object.headersArray === \"function\" &&\n    typeof object.headerValues === \"function\" &&\n    typeof object.headerNames === \"function\" &&\n    typeof object.toJson === \"function\"\n  ) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * A collection of HTTP header key/value pairs.\n */\nexport class HttpHeaders {\n  private readonly _headersMap: { [headerKey: string]: HttpHeader };\n\n  constructor(rawHeaders?: RawHttpHeaders) {\n    this._headersMap = {};\n    if (rawHeaders) {\n      for (const headerName in rawHeaders) {\n        this.set(headerName, rawHeaders[headerName]);\n      }\n    }\n  }\n\n  /**\n   * Set a header in this collection with the provided name and value. The name is\n   * case-insensitive.\n   * @param headerName The name of the header to set. This value is case-insensitive.\n   * @param headerValue The value of the header to set.\n   */\n  public set(headerName: string, headerValue: string | number): void {\n    this._headersMap[getHeaderKey(headerName)] = { name: headerName, value: headerValue.toString() };\n  }\n\n  /**\n   * Get the header value for the provided header name, or undefined if no header exists in this\n   * collection with the provided name.\n   * @param headerName The name of the header.\n   */\n  public get(headerName: string): string | undefined {\n    const header: HttpHeader = this._headersMap[getHeaderKey(headerName)];\n    return !header ? undefined : header.value;\n  }\n\n  /**\n   * Get whether or not this header collection contains a header entry for the provided header name.\n   */\n  public contains(headerName: string): boolean {\n    return !!this._headersMap[getHeaderKey(headerName)];\n  }\n\n  /**\n   * Remove the header with the provided headerName. Return whether or not the header existed and\n   * was removed.\n   * @param headerName The name of the header to remove.\n   */\n  public remove(headerName: string): boolean {\n    const result: boolean = this.contains(headerName);\n    delete this._headersMap[getHeaderKey(headerName)];\n    return result;\n  }\n\n  /**\n   * Get the headers that are contained this collection as an object.\n   */\n  public rawHeaders(): RawHttpHeaders {\n    const result: RawHttpHeaders = {};\n    for (const headerKey in this._headersMap) {\n      const header: HttpHeader = this._headersMap[headerKey];\n      result[header.name.toLowerCase()] = header.value;\n    }\n    return result;\n  }\n\n  /**\n   * Get the headers that are contained in this collection as an array.\n   */\n  public headersArray(): HttpHeader[] {\n    const headers: HttpHeader[] = [];\n    for (const headerKey in this._headersMap) {\n      headers.push(this._headersMap[headerKey]);\n    }\n    return headers;\n  }\n\n  /**\n   * Get the header names that are contained in this collection.\n   */\n  public headerNames(): string[] {\n    const headerNames: string[] = [];\n    const headers: HttpHeader[] = this.headersArray();\n    for (let i = 0; i < headers.length; ++i) {\n      headerNames.push(headers[i].name);\n    }\n    return headerNames;\n  }\n\n  /**\n   * Get the header names that are contained in this collection.\n   */\n  public headerValues(): string[] {\n    const headerValues: string[] = [];\n    const headers: HttpHeader[] = this.headersArray();\n    for (let i = 0; i < headers.length; ++i) {\n      headerValues.push(headers[i].value);\n    }\n    return headerValues;\n  }\n\n  /**\n   * Get the JSON object representation of this HTTP header collection.\n   */\n  public toJson(): RawHttpHeaders {\n    return this.rawHeaders();\n  }\n\n  /**\n   * Get the string representation of this HTTP header collection.\n   */\n  public toString(): string {\n    return JSON.stringify(this.toJson());\n  }\n\n  /**\n   * Create a deep clone/copy of this HttpHeaders collection.\n   */\n  public clone(): HttpHeaders {\n    return new HttpHeaders(this.rawHeaders());\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\n/**\n * Encodes a string in base64 format.\n * @param value the string to encode\n */\nexport function encodeString(value: string): string {\n  return btoa(value);\n}\n\n/**\n * Encodes a byte array in base64 format.\n * @param value the Uint8Aray to encode\n */\nexport function encodeByteArray(value: Uint8Array): string {\n  let str = \"\";\n  for (let i = 0; i < value.length; i++) {\n    str += String.fromCharCode(value[i]);\n  }\n  return btoa(str);\n}\n\n/**\n * Decodes a base64 string into a byte array.\n * @param value the base64 string to decode\n */\nexport function decodeString(value: string): Uint8Array {\n  const byteString = atob(value);\n  const arr = new Uint8Array(byteString.length);\n  for (let i = 0; i < byteString.length; i++) {\n    arr[i] = byteString.charCodeAt(i);\n  }\n  return arr;\n}\n","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]]\n  ]).join('');\n}\n\nmodule.exports = bytesToUuid;\n","// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto\n// implementation. Also, find the complete implementation of crypto on IE11.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));\n\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nexport const Constants = {\n  /**\n   * The ms-rest version\n   * @const\n   * @type {string}\n   */\n  msRestVersion: \"2.1.0\",\n\n  /**\n   * Specifies HTTP.\n   *\n   * @const\n   * @type {string}\n   */\n  HTTP: \"http:\",\n\n  /**\n   * Specifies HTTPS.\n   *\n   * @const\n   * @type {string}\n   */\n  HTTPS: \"https:\",\n\n  /**\n   * Specifies HTTP Proxy.\n   *\n   * @const\n   * @type {string}\n   */\n  HTTP_PROXY: \"HTTP_PROXY\",\n\n  /**\n   * Specifies HTTPS Proxy.\n   *\n   * @const\n   * @type {string}\n   */\n  HTTPS_PROXY: \"HTTPS_PROXY\",\n\n  HttpConstants: {\n    /**\n     * Http Verbs\n     *\n     * @const\n     * @enum {string}\n     */\n    HttpVerbs: {\n      PUT: \"PUT\",\n      GET: \"GET\",\n      DELETE: \"DELETE\",\n      POST: \"POST\",\n      MERGE: \"MERGE\",\n      HEAD: \"HEAD\",\n      PATCH: \"PATCH\"\n    },\n\n    StatusCodes: {\n      TooManyRequests: 429\n    }\n  },\n\n  /**\n   * Defines constants for use with HTTP headers.\n   */\n  HeaderConstants: {\n    /**\n     * The Authorization header.\n     *\n     * @const\n     * @type {string}\n     */\n    AUTHORIZATION: \"authorization\",\n\n    AUTHORIZATION_SCHEME: \"Bearer\",\n\n    /**\n     * The Retry-After response-header field can be used with a 503 (Service\n     * Unavailable) or 349 (Too Many Requests) responses to indicate how long\n     * the service is expected to be unavailable to the requesting client.\n     *\n     * @const\n     * @type {string}\n     */\n    RETRY_AFTER: \"Retry-After\",\n\n    /**\n     * The UserAgent header.\n     *\n     * @const\n     * @type {string}\n     */\n    USER_AGENT: \"User-Agent\"\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport uuidv4 from \"uuid/v4\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { RestError } from \"../restError\";\nimport { WebResourceLike } from \"../webResource\";\nimport { Constants } from \"./constants\";\n\n/**\n * A constant that indicates whether the environment is node.js or browser based.\n */\nexport const isNode = (typeof process !== \"undefined\") && !!process.version && !!process.versions && !!process.versions.node;\n\n/**\n * Checks if a parsed URL is HTTPS\n *\n * @param {object} urlToCheck The url to check\n * @return {boolean} True if the URL is HTTPS; false otherwise.\n */\nexport function urlIsHTTPS(urlToCheck: { protocol: string }): boolean {\n  return urlToCheck.protocol.toLowerCase() === Constants.HTTPS;\n}\n\n/**\n * Encodes an URI.\n *\n * @param {string} uri The URI to be encoded.\n * @return {string} The encoded URI.\n */\nexport function encodeUri(uri: string): string {\n  return encodeURIComponent(uri)\n    .replace(/!/g, \"%21\")\n    .replace(/\"/g, \"%27\")\n    .replace(/\\(/g, \"%28\")\n    .replace(/\\)/g, \"%29\")\n    .replace(/\\*/g, \"%2A\");\n}\n\n/**\n * Returns a stripped version of the Http Response which only contains body,\n * headers and the status.\n *\n * @param {HttpOperationResponse} response The Http Response\n *\n * @return {object} The stripped version of Http Response.\n */\nexport function stripResponse(response: HttpOperationResponse): any {\n  const strippedResponse: any = {};\n  strippedResponse.body = response.bodyAsText;\n  strippedResponse.headers = response.headers;\n  strippedResponse.status = response.status;\n  return strippedResponse;\n}\n\n/**\n * Returns a stripped version of the Http Request that does not contain the\n * Authorization header.\n *\n * @param {WebResource} request The Http Request object\n *\n * @return {WebResource} The stripped version of Http Request.\n */\nexport function stripRequest(request: WebResourceLike): WebResourceLike {\n  const strippedRequest = request.clone();\n  if (strippedRequest.headers) {\n    strippedRequest.headers.remove(\"authorization\");\n  }\n  return strippedRequest;\n}\n\n/**\n * Validates the given uuid as a string\n *\n * @param {string} uuid The uuid as a string that needs to be validated\n *\n * @return {boolean} True if the uuid is valid; false otherwise.\n */\nexport function isValidUuid(uuid: string): boolean {\n  const validUuidRegex = new RegExp(\"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$\", \"ig\");\n  return validUuidRegex.test(uuid);\n}\n\n/**\n * Provides an array of values of an object. For example\n * for a given object { \"a\": \"foo\", \"b\": \"bar\" }, the method returns [\"foo\", \"bar\"].\n *\n * @param {object} obj An object whose properties need to be enumerated so that it\"s values can be provided as an array\n *\n * @return {any[]} An array of values of the given object.\n */\nexport function objectValues(obj: { [key: string]: any; }): any[] {\n  const result: any[] = [];\n  if (obj && obj instanceof Object) {\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        result.push((<any>obj)[key]);\n      }\n    }\n  } else {\n    throw new Error(`The provided object ${JSON.stringify(obj, undefined, 2)} is not a valid object that can be ` +\n      `enumerated to provide its values as an array.`);\n  }\n  return result;\n}\n\n/**\n * Generated UUID\n *\n * @return {string} RFC4122 v4 UUID.\n */\nexport function generateUuid(): string {\n  return uuidv4();\n}\n\n/**\n * Executes an array of promises sequentially. Inspiration of this method is here:\n * https://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html. An awesome blog on promises!\n *\n * @param {Array} promiseFactories An array of promise factories(A function that return a promise)\n *\n * @param {any} [kickstart] Input to the first promise that is used to kickstart the promise chain.\n * If not provided then the promise chain starts with undefined.\n *\n * @return A chain of resolved or rejected promises\n */\nexport function executePromisesSequentially(promiseFactories: Array<any>, kickstart: any) {\n  let result = Promise.resolve(kickstart);\n  promiseFactories.forEach((promiseFactory) => {\n    result = result.then(promiseFactory);\n  });\n  return result;\n}\n\n/**\n * Merges source object into the target object\n * @param {object} source The object that needs to be merged\n *\n * @param {object} target The object to be merged into\n *\n * @returns {object} Returns the merged target object.\n */\nexport function mergeObjects(source: { [key: string]: any; }, target: { [key: string]: any; }) {\n  Object.keys(source).forEach((key) => {\n    target[key] = source[key];\n  });\n  return target;\n}\n\n/**\n * A wrapper for setTimeout that resolves a promise after t milliseconds.\n * @param {number} t The number of milliseconds to be delayed.\n * @param {T} value The value to be resolved with after a timeout of t milliseconds.\n * @returns {Promise<T>} Resolved promise\n */\nexport function delay<T>(t: number, value?: T): Promise<T> {\n  return new Promise((resolve) => setTimeout(() => resolve(value), t));\n}\n\n/**\n * Service callback that is returned for REST requests initiated by the service client.\n */\nexport interface ServiceCallback<TResult> {\n  /**\n   * A method that will be invoked as a callback to a service function.\n   * @param {Error | RestError | null} err The error occurred if any, while executing the request; otherwise null.\n   * @param {TResult} [result] The deserialized response body if an error did not occur.\n   * @param {WebResourceLike} [request] The raw/actual request sent to the server if an error did not occur.\n   * @param {HttpOperationResponse} [response] The raw/actual response from the server if an error did not occur.\n   */\n  (err: Error | RestError | null, result?: TResult, request?: WebResourceLike, response?: HttpOperationResponse): void;\n}\n\n/**\n * Converts a Promise to a callback.\n * @param {Promise<any>} promise The Promise to be converted to a callback\n * @returns {Function} A function that takes the callback (cb: Function): void\n * @deprecated generated code should instead depend on responseToBody\n */\nexport function promiseToCallback(promise: Promise<any>): Function {\n  if (typeof promise.then !== \"function\") {\n    throw new Error(\"The provided input is not a Promise.\");\n  }\n  return (cb: Function): void => {\n    promise.then((data: any) => {\n      cb(undefined, data);\n    }, (err: Error) => {\n      cb(err);\n    });\n  };\n}\n\n/**\n * Converts a Promise to a service callback.\n * @param {Promise<HttpOperationResponse>} promise - The Promise of HttpOperationResponse to be converted to a service callback\n * @returns {Function} A function that takes the service callback (cb: ServiceCallback<T>): void\n */\nexport function promiseToServiceCallback<T>(promise: Promise<HttpOperationResponse>): Function {\n  if (typeof promise.then !== \"function\") {\n    throw new Error(\"The provided input is not a Promise.\");\n  }\n  return (cb: ServiceCallback<T>): void => {\n    promise.then((data: HttpOperationResponse) => {\n      process.nextTick(cb, undefined, data.parsedBody as T, data.request, data);\n    }, (err: Error) => {\n      process.nextTick(cb, err);\n    });\n  };\n}\n\nexport function prepareXMLRootList(obj: any, elementName: string) {\n  if (!Array.isArray(obj)) {\n    obj = [obj];\n  }\n  return { [elementName]: obj };\n}\n\n/**\n * Applies the properties on the prototype of sourceCtors to the prototype of targetCtor\n * @param {object} targetCtor The target object on which the properties need to be applied.\n * @param {Array<object>} sourceCtors An array of source objects from which the properties need to be taken.\n */\nexport function applyMixins(targetCtor: any, sourceCtors: any[]): void {\n  sourceCtors.forEach(sourceCtors => {\n    Object.getOwnPropertyNames(sourceCtors.prototype).forEach(name => {\n      targetCtor.prototype[name] = sourceCtors.prototype[name];\n    });\n  });\n}\n\nconst validateISODuration = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n\n/**\n * Indicates whether the given string is in ISO 8601 format.\n * @param {string} value The value to be validated for ISO 8601 duration format.\n * @return {boolean} `true` if valid, `false` otherwise.\n */\nexport function isDuration(value: string): boolean {\n  return validateISODuration.test(value);\n}\n\n/**\n * Replace all of the instances of searchValue in value with the provided replaceValue.\n * @param {string | undefined} value The value to search and replace in.\n * @param {string} searchValue The value to search for in the value argument.\n * @param {string} replaceValue The value to replace searchValue with in the value argument.\n * @returns {string | undefined} The value where each instance of searchValue was replaced with replacedValue.\n */\nexport function replaceAll(value: string | undefined, searchValue: string, replaceValue: string): string | undefined {\n  return !value || !searchValue ? value : value.split(searchValue).join(replaceValue || \"\");\n}\n\n/**\n * Determines whether the given enity is a basic/primitive type\n * (string, number, boolean, null, undefined).\n * @param value Any entity\n * @return boolean - true is it is primitive type, false otherwise.\n */\nexport function isPrimitiveType(value: any): boolean {\n  return (typeof value !== \"object\" && typeof value !== \"function\") || value === null;\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport * as base64 from \"./util/base64\";\nimport * as utils from \"./util/utils\";\n\nexport class Serializer {\n  constructor(public readonly modelMappers: { [key: string]: any } = {}, public readonly isXML?: boolean) { }\n\n  validateConstraints(mapper: Mapper, value: any, objectName: string): void {\n    const failValidation = (constraintName: keyof MapperConstraints, constraintValue: any) => {\n      throw new Error(`\"${objectName}\" with value \"${value}\" should satisfy the constraint \"${constraintName}\": ${constraintValue}.`);\n    };\n    if (mapper.constraints && (value != undefined)) {\n      const {\n        ExclusiveMaximum,\n        ExclusiveMinimum,\n        InclusiveMaximum,\n        InclusiveMinimum,\n        MaxItems,\n        MaxLength,\n        MinItems,\n        MinLength,\n        MultipleOf,\n        Pattern,\n        UniqueItems\n      } = mapper.constraints;\n      if (ExclusiveMaximum != undefined && value >= ExclusiveMaximum) {\n        failValidation(\"ExclusiveMaximum\", ExclusiveMaximum);\n      }\n      if (ExclusiveMinimum != undefined && value <= ExclusiveMinimum) {\n        failValidation(\"ExclusiveMinimum\", ExclusiveMinimum);\n      }\n      if (InclusiveMaximum != undefined && value > InclusiveMaximum) {\n        failValidation(\"InclusiveMaximum\", InclusiveMaximum);\n      }\n      if (InclusiveMinimum != undefined && value < InclusiveMinimum) {\n        failValidation(\"InclusiveMinimum\", InclusiveMinimum);\n      }\n      if (MaxItems != undefined && value.length > MaxItems) {\n        failValidation(\"MaxItems\", MaxItems);\n      }\n      if (MaxLength != undefined && value.length > MaxLength) {\n        failValidation(\"MaxLength\", MaxLength);\n      }\n      if (MinItems != undefined && value.length < MinItems) {\n        failValidation(\"MinItems\", MinItems);\n      }\n      if (MinLength != undefined && value.length < MinLength) {\n        failValidation(\"MinLength\", MinLength);\n      }\n      if (MultipleOf != undefined && value % MultipleOf !== 0) {\n        failValidation(\"MultipleOf\", MultipleOf);\n      }\n      if (Pattern) {\n        const pattern: RegExp = typeof Pattern === \"string\" ? new RegExp(Pattern) : Pattern;\n        if ((typeof value !== \"string\") || (value.match(pattern) === null)) {\n          failValidation(\"Pattern\", Pattern);\n        }\n      }\n      if (UniqueItems && value.some((item: any, i: number, ar: Array<any>) => ar.indexOf(item) !== i)) {\n        failValidation(\"UniqueItems\", UniqueItems);\n      }\n    }\n  }\n\n  /**\n   * Serialize the given object based on its metadata defined in the mapper\n   *\n   * @param {Mapper} mapper The mapper which defines the metadata of the serializable object\n   *\n   * @param {object|string|Array|number|boolean|Date|stream} object A valid Javascript object to be serialized\n   *\n   * @param {string} objectName Name of the serialized object\n   *\n   * @returns {object|string|Array|number|boolean|Date|stream} A valid serialized Javascript object\n   */\n  serialize(mapper: Mapper, object: any, objectName?: string): any {\n    let payload: any = {};\n    const mapperType = mapper.type.name as string;\n    if (!objectName) {\n      objectName = mapper.serializedName!;\n    }\n    if (mapperType.match(/^Sequence$/ig) !== null) {\n      payload = [];\n    }\n\n    if (mapper.isConstant) {\n      object = mapper.defaultValue;\n    }\n\n    // This table of allowed values should help explain\n    // the mapper.required and mapper.nullable properties.\n    // X means \"neither undefined or null are allowed\".\n    //           || required\n    //           || true      | false\n    //  nullable || ==========================\n    //      true || null      | undefined/null\n    //     false || X         | undefined\n    // undefined || X         | undefined/null\n\n    const { required, nullable } = mapper;\n\n    if (required && nullable && object === undefined) {\n      throw new Error(`${objectName} cannot be undefined.`);\n    }\n    if (required && !nullable && object == undefined) {\n      throw new Error(`${objectName} cannot be null or undefined.`);\n    }\n    if (!required && nullable === false && object === null) {\n      throw new Error(`${objectName} cannot be null.`);\n    }\n\n    if (object == undefined) {\n      payload = object;\n    } else {\n      // Validate Constraints if any\n      this.validateConstraints(mapper, object, objectName);\n      if (mapperType.match(/^any$/ig) !== null) {\n        payload = object;\n      } else if (mapperType.match(/^(Number|String|Boolean|Object|Stream|Uuid)$/ig) !== null) {\n        payload = serializeBasicTypes(mapperType, objectName, object);\n      } else if (mapperType.match(/^Enum$/ig) !== null) {\n        const enumMapper: EnumMapper = mapper as EnumMapper;\n        payload = serializeEnumType(objectName, enumMapper.type.allowedValues, object);\n      } else if (mapperType.match(/^(Date|DateTime|TimeSpan|DateTimeRfc1123|UnixTime)$/ig) !== null) {\n        payload = serializeDateTypes(mapperType, object, objectName);\n      } else if (mapperType.match(/^ByteArray$/ig) !== null) {\n        payload = serializeByteArrayType(objectName, object);\n      } else if (mapperType.match(/^Base64Url$/ig) !== null) {\n        payload = serializeBase64UrlType(objectName, object);\n      } else if (mapperType.match(/^Sequence$/ig) !== null) {\n        payload = serializeSequenceType(this, mapper as SequenceMapper, object, objectName);\n      } else if (mapperType.match(/^Dictionary$/ig) !== null) {\n        payload = serializeDictionaryType(this, mapper as DictionaryMapper, object, objectName);\n      } else if (mapperType.match(/^Composite$/ig) !== null) {\n        payload = serializeCompositeType(this, mapper as CompositeMapper, object, objectName);\n      }\n    }\n    return payload;\n  }\n\n  /**\n   * Deserialize the given object based on its metadata defined in the mapper\n   *\n   * @param {object} mapper The mapper which defines the metadata of the serializable object\n   *\n   * @param {object|string|Array|number|boolean|Date|stream} responseBody A valid Javascript entity to be deserialized\n   *\n   * @param {string} objectName Name of the deserialized object\n   *\n   * @returns {object|string|Array|number|boolean|Date|stream} A valid deserialized Javascript object\n   */\n  deserialize(mapper: Mapper, responseBody: any, objectName: string): any {\n    if (responseBody == undefined) {\n      if (this.isXML && mapper.type.name === \"Sequence\" && !mapper.xmlIsWrapped) {\n        // Edge case for empty XML non-wrapped lists. xml2js can't distinguish\n        // between the list being empty versus being missing,\n        // so let's do the more user-friendly thing and return an empty list.\n        responseBody = [];\n      }\n      // specifically check for undefined as default value can be a falsey value `0, \"\", false, null`\n      if (mapper.defaultValue !== undefined) {\n        responseBody = mapper.defaultValue;\n      }\n      return responseBody;\n    }\n\n    let payload: any;\n    const mapperType = mapper.type.name;\n    if (!objectName) {\n      objectName = mapper.serializedName!;\n    }\n\n    if (mapperType.match(/^Composite$/ig) !== null) {\n      payload = deserializeCompositeType(this, mapper as CompositeMapper, responseBody, objectName);\n    } else {\n      if (this.isXML) {\n        /**\n         * If the mapper specifies this as a non-composite type value but the responseBody contains\n         * both header (\"$\") and body (\"_\") properties, then just reduce the responseBody value to\n         * the body (\"_\") property.\n         */\n        if (responseBody[\"$\"] != undefined && responseBody[\"_\"] != undefined) {\n          responseBody = responseBody[\"_\"];\n        }\n      }\n\n      if (mapperType.match(/^Number$/ig) !== null) {\n        payload = parseFloat(responseBody);\n        if (isNaN(payload)) {\n          payload = responseBody;\n        }\n      } else if (mapperType.match(/^Boolean$/ig) !== null) {\n        if (responseBody === \"true\") {\n          payload = true;\n        } else if (responseBody === \"false\") {\n          payload = false;\n        } else {\n          payload = responseBody;\n        }\n      } else if (mapperType.match(/^(String|Enum|Object|Stream|Uuid|TimeSpan|any)$/ig) !== null) {\n        payload = responseBody;\n      } else if (mapperType.match(/^(Date|DateTime|DateTimeRfc1123)$/ig) !== null) {\n        payload = new Date(responseBody);\n      } else if (mapperType.match(/^UnixTime$/ig) !== null) {\n        payload = unixTimeToDate(responseBody);\n      } else if (mapperType.match(/^ByteArray$/ig) !== null) {\n        payload = base64.decodeString(responseBody);\n      } else if (mapperType.match(/^Base64Url$/ig) !== null) {\n        payload = base64UrlToByteArray(responseBody);\n      } else if (mapperType.match(/^Sequence$/ig) !== null) {\n        payload = deserializeSequenceType(this, mapper as SequenceMapper, responseBody, objectName);\n      } else if (mapperType.match(/^Dictionary$/ig) !== null) {\n        payload = deserializeDictionaryType(this, mapper as DictionaryMapper, responseBody, objectName);\n      }\n    }\n\n    if (mapper.isConstant) {\n      payload = mapper.defaultValue;\n    }\n\n    return payload;\n  }\n}\n\nfunction trimEnd(str: string, ch: string) {\n  let len = str.length;\n  while ((len - 1) >= 0 && str[len - 1] === ch) {\n    --len;\n  }\n  return str.substr(0, len);\n}\n\nfunction bufferToBase64Url(buffer: any): string | undefined {\n  if (!buffer) {\n    return undefined;\n  }\n  if (!(buffer instanceof Uint8Array)) {\n    throw new Error(`Please provide an input of type Uint8Array for converting to Base64Url.`);\n  }\n  // Uint8Array to Base64.\n  const str = base64.encodeByteArray(buffer);\n  // Base64 to Base64Url.\n  return trimEnd(str, \"=\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\n\nfunction base64UrlToByteArray(str: string): Uint8Array | undefined {\n  if (!str) {\n    return undefined;\n  }\n  if (str && typeof str.valueOf() !== \"string\") {\n    throw new Error(\"Please provide an input of type string for converting to Uint8Array\");\n  }\n  // Base64Url to Base64.\n  str = str.replace(/\\-/g, \"+\").replace(/\\_/g, \"/\");\n  // Base64 to Uint8Array.\n  return base64.decodeString(str);\n}\n\nfunction splitSerializeName(prop: string | undefined): string[] {\n  const classes: string[] = [];\n  let partialclass = \"\";\n  if (prop) {\n    const subwords = prop.split(\".\");\n\n    for (const item of subwords) {\n      if (item.charAt(item.length - 1) === \"\\\\\") {\n        partialclass += item.substr(0, item.length - 1) + \".\";\n      } else {\n        partialclass += item;\n        classes.push(partialclass);\n        partialclass = \"\";\n      }\n    }\n  }\n\n  return classes;\n}\n\nfunction dateToUnixTime(d: string | Date): number | undefined {\n  if (!d) {\n    return undefined;\n  }\n\n  if (typeof d.valueOf() === \"string\") {\n    d = new Date(d as string);\n  }\n  return Math.floor((d as Date).getTime() / 1000);\n}\n\nfunction unixTimeToDate(n: number): Date | undefined {\n  if (!n) {\n    return undefined;\n  }\n  return new Date(n * 1000);\n}\n\nfunction serializeBasicTypes(typeName: string, objectName: string, value: any): any {\n  if (value !== null && value !== undefined) {\n    if (typeName.match(/^Number$/ig) !== null) {\n      if (typeof value !== \"number\") {\n        throw new Error(`${objectName} with value ${value} must be of type number.`);\n      }\n    } else if (typeName.match(/^String$/ig) !== null) {\n      if (typeof value.valueOf() !== \"string\") {\n        throw new Error(`${objectName} with value \"${value}\" must be of type string.`);\n      }\n    } else if (typeName.match(/^Uuid$/ig) !== null) {\n      if (!(typeof value.valueOf() === \"string\" && utils.isValidUuid(value))) {\n        throw new Error(`${objectName} with value \"${value}\" must be of type string and a valid uuid.`);\n      }\n    } else if (typeName.match(/^Boolean$/ig) !== null) {\n      if (typeof value !== \"boolean\") {\n        throw new Error(`${objectName} with value ${value} must be of type boolean.`);\n      }\n    } else if (typeName.match(/^Stream$/ig) !== null) {\n      const objectType = typeof value;\n      if (objectType !== \"string\" &&\n        objectType !== \"function\" &&\n        !(value instanceof ArrayBuffer) &&\n        !ArrayBuffer.isView(value) &&\n        !(typeof Blob === \"function\" && value instanceof Blob)) {\n        throw new Error(`${objectName} must be a string, Blob, ArrayBuffer, ArrayBufferView, or a function returning NodeJS.ReadableStream.`);\n      }\n    }\n  }\n  return value;\n}\n\nfunction serializeEnumType(objectName: string, allowedValues: Array<any>, value: any): any {\n  if (!allowedValues) {\n    throw new Error(`Please provide a set of allowedValues to validate ${objectName} as an Enum Type.`);\n  }\n  const isPresent = allowedValues.some((item) => {\n    if (typeof item.valueOf() === \"string\") {\n      return item.toLowerCase() === value.toLowerCase();\n    }\n    return item === value;\n  });\n  if (!isPresent) {\n    throw new Error(`${value} is not a valid value for ${objectName}. The valid values are: ${JSON.stringify(allowedValues)}.`);\n  }\n  return value;\n}\n\nfunction serializeByteArrayType(objectName: string, value: any): any {\n  if (value != undefined) {\n    if (!(value instanceof Uint8Array)) {\n      throw new Error(`${objectName} must be of type Uint8Array.`);\n    }\n    value = base64.encodeByteArray(value);\n  }\n  return value;\n}\n\nfunction serializeBase64UrlType(objectName: string, value: any): any {\n  if (value != undefined) {\n    if (!(value instanceof Uint8Array)) {\n      throw new Error(`${objectName} must be of type Uint8Array.`);\n    }\n    value = bufferToBase64Url(value);\n  }\n  return value;\n}\n\nfunction serializeDateTypes(typeName: string, value: any, objectName: string) {\n  if (value != undefined) {\n    if (typeName.match(/^Date$/ig) !== null) {\n      if (!(value instanceof Date ||\n        (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n      }\n      value = (value instanceof Date) ? value.toISOString().substring(0, 10) : new Date(value).toISOString().substring(0, 10);\n    } else if (typeName.match(/^DateTime$/ig) !== null) {\n      if (!(value instanceof Date ||\n        (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n      }\n      value = (value instanceof Date) ? value.toISOString() : new Date(value).toISOString();\n    } else if (typeName.match(/^DateTimeRfc1123$/ig) !== null) {\n      if (!(value instanceof Date ||\n        (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123 format.`);\n      }\n      value = (value instanceof Date) ? value.toUTCString() : new Date(value).toUTCString();\n    } else if (typeName.match(/^UnixTime$/ig) !== null) {\n      if (!(value instanceof Date ||\n        (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123/ISO8601 format ` +\n          `for it to be serialized in UnixTime/Epoch format.`);\n      }\n      value = dateToUnixTime(value);\n    } else if (typeName.match(/^TimeSpan$/ig) !== null) {\n      if (!utils.isDuration(value)) {\n        throw new Error(`${objectName} must be a string in ISO 8601 format. Instead was \"${value}\".`);\n      }\n      value = value;\n    }\n  }\n  return value;\n}\n\nfunction serializeSequenceType(serializer: Serializer, mapper: SequenceMapper, object: any, objectName: string) {\n  if (!Array.isArray(object)) {\n    throw new Error(`${objectName} must be of type Array.`);\n  }\n  const elementType = mapper.type.element;\n  if (!elementType || typeof elementType !== \"object\") {\n    throw new Error(`element\" metadata for an Array must be defined in the ` +\n      `mapper and it must of type \"object\" in ${objectName}.`);\n  }\n  const tempArray = [];\n  for (let i = 0; i < object.length; i++) {\n    tempArray[i] = serializer.serialize(elementType, object[i], objectName);\n  }\n  return tempArray;\n}\n\nfunction serializeDictionaryType(serializer: Serializer, mapper: DictionaryMapper, object: any, objectName: string) {\n  if (typeof object !== \"object\") {\n    throw new Error(`${objectName} must be of type object.`);\n  }\n  const valueType = mapper.type.value;\n  if (!valueType || typeof valueType !== \"object\") {\n    throw new Error(`\"value\" metadata for a Dictionary must be defined in the ` +\n      `mapper and it must of type \"object\" in ${objectName}.`);\n  }\n  const tempDictionary: { [key: string]: any } = {};\n  for (const key of Object.keys(object)) {\n    tempDictionary[key] = serializer.serialize(valueType, object[key], objectName + \".\" + key);\n  }\n  return tempDictionary;\n}\n\n/**\n * Resolves a composite mapper's modelProperties.\n * @param serializer the serializer containing the entire set of mappers\n * @param mapper the composite mapper to resolve\n */\nfunction resolveModelProperties(serializer: Serializer, mapper: CompositeMapper, objectName: string): { [propertyName: string]: Mapper } {\n  let modelProps = mapper.type.modelProperties;\n  if (!modelProps) {\n    const className = mapper.type.className;\n    if (!className) {\n      throw new Error(`Class name for model \"${objectName}\" is not provided in the mapper \"${JSON.stringify(mapper, undefined, 2)}\".`);\n    }\n\n    const modelMapper = serializer.modelMappers[className];\n    if (!modelMapper) {\n      throw new Error(`mapper() cannot be null or undefined for model \"${className}\".`);\n    }\n    modelProps = modelMapper.type.modelProperties;\n    if (!modelProps) {\n      throw new Error(`modelProperties cannot be null or undefined in the ` +\n        `mapper \"${JSON.stringify(modelMapper)}\" of type \"${className}\" for object \"${objectName}\".`);\n    }\n  }\n\n  return modelProps;\n}\n\nfunction serializeCompositeType(serializer: Serializer, mapper: CompositeMapper, object: any, objectName: string) {\n  if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n    mapper = getPolymorphicMapper(serializer, mapper, object, \"clientName\");\n  }\n\n  if (object != undefined) {\n    const payload: any = {};\n    const modelProps = resolveModelProperties(serializer, mapper, objectName);\n    for (const key of Object.keys(modelProps)) {\n      const propertyMapper = modelProps[key];\n      if (propertyMapper.readOnly) {\n        continue;\n      }\n\n      let propName: string | undefined;\n      let parentObject: any = payload;\n      if (serializer.isXML) {\n        if (propertyMapper.xmlIsWrapped) {\n          propName = propertyMapper.xmlName;\n        } else {\n          propName = propertyMapper.xmlElementName || propertyMapper.xmlName;\n        }\n      } else {\n        const paths = splitSerializeName(propertyMapper.serializedName!);\n        propName = paths.pop();\n\n        for (const pathName of paths) {\n          const childObject = parentObject[pathName];\n          if ((childObject == undefined) && (object[key] != undefined)) {\n            parentObject[pathName] = {};\n          }\n          parentObject = parentObject[pathName];\n        }\n      }\n\n      if (parentObject != undefined) {\n        const propertyObjectName = propertyMapper.serializedName !== \"\"\n          ? objectName + \".\" + propertyMapper.serializedName\n          : objectName;\n\n        let toSerialize = object[key];\n        const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n        if (polymorphicDiscriminator && polymorphicDiscriminator.clientName === key && toSerialize == undefined) {\n          toSerialize = mapper.serializedName;\n        }\n\n        const serializedValue = serializer.serialize(propertyMapper, toSerialize, propertyObjectName);\n        if (serializedValue !== undefined && propName != undefined) {\n          if (propertyMapper.xmlIsAttribute) {\n            // $ is the key attributes are kept under in xml2js.\n            // This keeps things simple while preventing name collision\n            // with names in user documents.\n            parentObject.$ = parentObject.$ || {};\n            parentObject.$[propName] = serializedValue;\n          } else if (propertyMapper.xmlIsWrapped) {\n            parentObject[propName] = { [propertyMapper.xmlElementName!]: serializedValue };\n          } else {\n            parentObject[propName] = serializedValue;\n          }\n        }\n      }\n    }\n\n    const additionalPropertiesMapper = mapper.type.additionalProperties;\n    if (additionalPropertiesMapper) {\n      const propNames = Object.keys(modelProps);\n      for (const clientPropName in object) {\n        const isAdditionalProperty = propNames.every(pn => pn !== clientPropName);\n        if (isAdditionalProperty) {\n          payload[clientPropName] = serializer.serialize(additionalPropertiesMapper, object[clientPropName], objectName + '[\"' + clientPropName + '\"]');\n        }\n      }\n    }\n\n    return payload;\n  }\n  return object;\n}\n\nfunction isSpecialXmlProperty(propertyName: string): boolean {\n  return [\"$\", \"_\"].includes(propertyName);\n}\n\nfunction deserializeCompositeType(serializer: Serializer, mapper: CompositeMapper, responseBody: any, objectName: string): any {\n  if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n    mapper = getPolymorphicMapper(serializer, mapper, responseBody, \"serializedName\");\n  }\n\n  const modelProps = resolveModelProperties(serializer, mapper, objectName);\n  let instance: { [key: string]: any } = {};\n  const handledPropertyNames: string[] = [];\n\n  for (const key of Object.keys(modelProps)) {\n    const propertyMapper = modelProps[key];\n    const paths = splitSerializeName(modelProps[key].serializedName!);\n    handledPropertyNames.push(paths[0]);\n    const { serializedName, xmlName, xmlElementName } = propertyMapper;\n    let propertyObjectName = objectName;\n    if (serializedName !== \"\" && serializedName !== undefined) {\n      propertyObjectName = objectName + \".\" + serializedName;\n    }\n\n    const headerCollectionPrefix = (propertyMapper as DictionaryMapper).headerCollectionPrefix;\n    if (headerCollectionPrefix) {\n      const dictionary: any = {};\n      for (const headerKey of Object.keys(responseBody)) {\n        if (headerKey.startsWith(headerCollectionPrefix)) {\n          dictionary[headerKey.substring(headerCollectionPrefix.length)] = serializer.deserialize((propertyMapper as DictionaryMapper).type.value, responseBody[headerKey], propertyObjectName);\n        }\n\n        handledPropertyNames.push(headerKey);\n      }\n      instance[key] = dictionary;\n    } else if (serializer.isXML) {\n      if (propertyMapper.xmlIsAttribute && responseBody.$) {\n        instance[key] = serializer.deserialize(propertyMapper, responseBody.$[xmlName!], propertyObjectName);\n      } else {\n        const propertyName = xmlElementName || xmlName || serializedName;\n        let unwrappedProperty = responseBody[propertyName!];\n        if (propertyMapper.xmlIsWrapped) {\n          unwrappedProperty = responseBody[xmlName!];\n          unwrappedProperty = unwrappedProperty && unwrappedProperty[xmlElementName!];\n\n          const isEmptyWrappedList = unwrappedProperty === undefined;\n          if (isEmptyWrappedList) {\n            unwrappedProperty = [];\n          }\n        }\n        instance[key] = serializer.deserialize(propertyMapper, unwrappedProperty, propertyObjectName);\n      }\n    } else {\n      // deserialize the property if it is present in the provided responseBody instance\n      let propertyInstance;\n      let res = responseBody;\n      // traversing the object step by step.\n      for (const item of paths) {\n        if (!res) break;\n        res = res[item];\n      }\n      propertyInstance = res;\n      const polymorphicDiscriminator = mapper.type.polymorphicDiscriminator;\n      // checking that the model property name (key)(ex: \"fishtype\") and the\n      // clientName of the polymorphicDiscriminator {metadata} (ex: \"fishtype\")\n      // instead of the serializedName of the polymorphicDiscriminator (ex: \"fish.type\")\n      // is a better approach. The generator is not consistent with escaping '\\.' in the\n      // serializedName of the property (ex: \"fish\\.type\") that is marked as polymorphic discriminator\n      // and the serializedName of the metadata polymorphicDiscriminator (ex: \"fish.type\"). However,\n      // the clientName transformation of the polymorphicDiscriminator (ex: \"fishtype\") and\n      // the transformation of model property name (ex: \"fishtype\") is done consistently.\n      // Hence, it is a safer bet to rely on the clientName of the polymorphicDiscriminator.\n      if (polymorphicDiscriminator && key === polymorphicDiscriminator.clientName && propertyInstance == undefined) {\n        propertyInstance = mapper.serializedName;\n      }\n\n      let serializedValue;\n      // paging\n      if (Array.isArray(responseBody[key]) && modelProps[key].serializedName === \"\") {\n        propertyInstance = responseBody[key];\n        instance = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName);\n      } else if (propertyInstance !== undefined || propertyMapper.defaultValue !== undefined) {\n        serializedValue = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName);\n        instance[key] = serializedValue;\n      }\n    }\n  }\n\n  const additionalPropertiesMapper = mapper.type.additionalProperties;\n  if (additionalPropertiesMapper) {\n    const isAdditionalProperty = (responsePropName: string) => {\n      for (const clientPropName in modelProps) {\n        const paths = splitSerializeName(modelProps[clientPropName].serializedName);\n        if (paths[0] === responsePropName) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    for (const responsePropName in responseBody) {\n      if (isAdditionalProperty(responsePropName)) {\n        instance[responsePropName] = serializer.deserialize(additionalPropertiesMapper, responseBody[responsePropName], objectName + '[\"' + responsePropName + '\"]');\n      }\n    }\n  } else if (responseBody) {\n    for (const key of Object.keys(responseBody)) {\n      if (instance[key] === undefined && !handledPropertyNames.includes(key) && !isSpecialXmlProperty(key)) {\n        instance[key] = responseBody[key];\n      }\n    }\n  }\n\n  return instance;\n}\n\nfunction deserializeDictionaryType(serializer: Serializer, mapper: DictionaryMapper, responseBody: any, objectName: string): any {\n  /*jshint validthis: true */\n  const value = mapper.type.value;\n  if (!value || typeof value !== \"object\") {\n    throw new Error(`\"value\" metadata for a Dictionary must be defined in the ` +\n      `mapper and it must of type \"object\" in ${objectName}`);\n  }\n  if (responseBody) {\n    const tempDictionary: { [key: string]: any } = {};\n    for (const key of Object.keys(responseBody)) {\n      tempDictionary[key] = serializer.deserialize(value, responseBody[key], objectName);\n    }\n    return tempDictionary;\n  }\n  return responseBody;\n}\n\nfunction deserializeSequenceType(serializer: Serializer, mapper: SequenceMapper, responseBody: any, objectName: string): any {\n  /*jshint validthis: true */\n  const element = mapper.type.element;\n  if (!element || typeof element !== \"object\") {\n    throw new Error(`element\" metadata for an Array must be defined in the ` +\n      `mapper and it must of type \"object\" in ${objectName}`);\n  }\n  if (responseBody) {\n    if (!Array.isArray(responseBody)) {\n      // xml2js will interpret a single element array as just the element, so force it to be an array\n      responseBody = [responseBody];\n    }\n\n    const tempArray = [];\n    for (let i = 0; i < responseBody.length; i++) {\n      tempArray[i] = serializer.deserialize(element, responseBody[i], `${objectName}[${i}]`);\n    }\n    return tempArray;\n  }\n  return responseBody;\n}\n\nfunction getPolymorphicMapper(serializer: Serializer, mapper: CompositeMapper, object: any, polymorphicPropertyName: \"clientName\" | \"serializedName\"): CompositeMapper {\n  const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n  if (polymorphicDiscriminator) {\n    const discriminatorName = polymorphicDiscriminator[polymorphicPropertyName];\n    if (discriminatorName != undefined) {\n      const discriminatorValue = object[discriminatorName];\n      if (discriminatorValue != undefined) {\n        const typeName = mapper.type.uberParent || mapper.type.className;\n        const indexDiscriminator = discriminatorValue === typeName\n          ? discriminatorValue\n          : typeName + \".\" + discriminatorValue;\n        const polymorphicMapper = serializer.modelMappers.discriminators[indexDiscriminator];\n        if (polymorphicMapper) {\n          mapper = polymorphicMapper;\n        }\n      }\n    }\n  }\n  return mapper;\n}\n\nfunction getPolymorphicDiscriminatorRecursively(serializer: Serializer, mapper: CompositeMapper): PolymorphicDiscriminator | undefined {\n  return mapper.type.polymorphicDiscriminator\n    || getPolymorphicDiscriminatorSafely(serializer, mapper.type.uberParent)\n    || getPolymorphicDiscriminatorSafely(serializer, mapper.type.className);\n}\n\nfunction getPolymorphicDiscriminatorSafely(serializer: Serializer, typeName?: string) {\n  return (typeName && serializer.modelMappers[typeName] && serializer.modelMappers[typeName].type.polymorphicDiscriminator);\n}\n\nexport interface MapperConstraints {\n  InclusiveMaximum?: number;\n  ExclusiveMaximum?: number;\n  InclusiveMinimum?: number;\n  ExclusiveMinimum?: number;\n  MaxLength?: number;\n  MinLength?: number;\n  Pattern?: RegExp;\n  MaxItems?: number;\n  MinItems?: number;\n  UniqueItems?: true;\n  MultipleOf?: number;\n}\n\nexport type MapperType = SimpleMapperType | CompositeMapperType | SequenceMapperType | DictionaryMapperType | EnumMapperType;\n\nexport interface SimpleMapperType {\n  name: \"Base64Url\"\n  | \"Boolean\"\n  | \"ByteArray\"\n  | \"Date\"\n  | \"DateTime\"\n  | \"DateTimeRfc1123\"\n  | \"Object\"\n  | \"Stream\"\n  | \"String\"\n  | \"TimeSpan\"\n  | \"UnixTime\"\n  | \"Uuid\"\n  | \"Number\"\n  | \"any\";\n}\n\nexport interface CompositeMapperType {\n  name: \"Composite\";\n\n  // Only one of the two below properties should be present.\n  // Use className to reference another type definition,\n  // and use modelProperties/additionalProperties when the reference to the other type has been resolved.\n  className?: string;\n\n  modelProperties?: { [propertyName: string]: Mapper };\n  additionalProperties?: Mapper;\n\n  uberParent?: string;\n  polymorphicDiscriminator?: PolymorphicDiscriminator;\n}\n\nexport interface SequenceMapperType {\n  name: \"Sequence\";\n  element: Mapper;\n}\n\nexport interface DictionaryMapperType {\n  name: \"Dictionary\";\n  value: Mapper;\n}\n\nexport interface EnumMapperType {\n  name: \"Enum\";\n  allowedValues: any[];\n}\n\nexport interface BaseMapper {\n  xmlName?: string;\n  xmlIsAttribute?: boolean;\n  xmlElementName?: string;\n  xmlIsWrapped?: boolean;\n  readOnly?: boolean;\n  isConstant?: boolean;\n  required?: boolean;\n  nullable?: boolean;\n  serializedName?: string;\n  type: MapperType;\n  defaultValue?: any;\n  constraints?: MapperConstraints;\n}\n\nexport type Mapper = BaseMapper | CompositeMapper | SequenceMapper | DictionaryMapper | EnumMapper;\n\nexport interface PolymorphicDiscriminator {\n  serializedName: string;\n  clientName: string;\n  [key: string]: string;\n}\n\nexport interface CompositeMapper extends BaseMapper {\n  type: CompositeMapperType;\n}\n\nexport interface SequenceMapper extends BaseMapper {\n  type: SequenceMapperType;\n}\n\nexport interface DictionaryMapper extends BaseMapper {\n  type: DictionaryMapperType;\n  headerCollectionPrefix?: string;\n}\n\nexport interface EnumMapper extends BaseMapper {\n  type: EnumMapperType;\n}\n\nexport interface UrlParameterValue {\n  value: string;\n  skipUrlEncoding: boolean;\n}\n\n// TODO: why is this here?\nexport function serializeObject(toSerialize: any): any {\n  if (toSerialize == undefined) return undefined;\n  if (toSerialize instanceof Uint8Array) {\n    toSerialize = base64.encodeByteArray(toSerialize);\n    return toSerialize;\n  }\n  else if (toSerialize instanceof Date) {\n    return toSerialize.toISOString();\n  }\n  else if (Array.isArray(toSerialize)) {\n    const array = [];\n    for (let i = 0; i < toSerialize.length; i++) {\n      array.push(serializeObject(toSerialize[i]));\n    }\n    return array;\n  } else if (typeof toSerialize === \"object\") {\n    const dictionary: { [key: string]: any } = {};\n    for (const property in toSerialize) {\n      dictionary[property] = serializeObject(toSerialize[property]);\n    }\n    return dictionary;\n  }\n  return toSerialize;\n}\n\n/**\n * Utility function to create a K:V from a list of strings\n */\nfunction strEnum<T extends string>(o: Array<T>): { [K in T]: K } {\n  const result: any = {};\n  for (const key of o) {\n    result[key] = key;\n  }\n  return result;\n}\n\nexport const MapperType = strEnum([\n  \"Base64Url\",\n  \"Boolean\",\n  \"ByteArray\",\n  \"Composite\",\n  \"Date\",\n  \"DateTime\",\n  \"DateTimeRfc1123\",\n  \"Dictionary\",\n  \"Enum\",\n  \"Number\",\n  \"Object\",\n  \"Sequence\",\n  \"String\",\n  \"Stream\",\n  \"TimeSpan\",\n  \"UnixTime\"\n]);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { HttpHeaders, HttpHeadersLike, isHttpHeadersLike } from \"./httpHeaders\";\nimport { OperationSpec } from \"./operationSpec\";\nimport { Mapper, Serializer } from \"./serializer\";\nimport { generateUuid } from \"./util/utils\";\nimport { HttpOperationResponse } from \"./httpOperationResponse\";\nimport { OperationResponse } from \"./operationResponse\";\nimport { AgentSettings, ProxySettings } from \"./serviceClient\";\n\nexport type HttpMethods = \"GET\" | \"PUT\" | \"POST\" | \"DELETE\" | \"PATCH\" | \"HEAD\" | \"OPTIONS\" | \"TRACE\";\nexport type HttpRequestBody = Blob | string | ArrayBuffer | ArrayBufferView | (() => NodeJS.ReadableStream);\n\n/**\n * Fired in response to upload or download progress.\n */\nexport type TransferProgressEvent = {\n  /**\n   * The number of bytes loaded so far.\n   */\n  loadedBytes: number\n};\n\n/**\n * Allows the request to be aborted upon firing of the \"abort\" event.\n * Compatible with the browser built-in AbortSignal and common polyfills.\n */\nexport interface AbortSignalLike {\n  readonly aborted: boolean;\n  dispatchEvent: (event: Event) => boolean;\n  onabort: ((this: AbortSignalLike, ev: Event) => any) | null;\n  addEventListener: (type: \"abort\", listener: (this: AbortSignalLike, ev: Event) => any, options?: any) => void;\n  removeEventListener: (type: \"abort\", listener: (this: AbortSignalLike, ev: Event) => any, options?: any) => void;\n}\n\n/**\n * An abstraction over a REST call.\n */\nexport interface WebResourceLike {\n  /**\n   * The URL being accessed by the request.\n   */\n  url: string;\n  /**\n   * The HTTP method to use when making the request.\n   */\n  method: HttpMethods;\n  /**\n   * The HTTP body contents of the request.\n   */\n  body?: any;\n  /**\n   * The HTTP headers to use when making the request.\n   */\n  headers: HttpHeadersLike;\n  /**\n   * Whether or not the body of the HttpOperationResponse should be treated as a stream.\n   */\n  streamResponseBody?: boolean;\n  /**\n   * Whether or not the HttpOperationResponse should be deserialized. If this is undefined, then the\n   * HttpOperationResponse should be deserialized.\n   */\n  shouldDeserialize?: boolean | ((response: HttpOperationResponse) => boolean);\n  /**\n   * A function that returns the proper OperationResponse for the given OperationSpec and\n   * HttpOperationResponse combination. If this is undefined, then a simple status code lookup will\n   * be used.\n   */\n  operationResponseGetter?: (\n    operationSpec: OperationSpec,\n    response: HttpOperationResponse\n  ) => undefined | OperationResponse;\n  formData?: any;\n  /**\n   * A query string represented as an object.\n   */\n  query?: { [key: string]: any };\n  /**\n   * Used to parse the response.\n   */\n  operationSpec?: OperationSpec;\n  /**\n   * If credentials (cookies) should be sent along during an XHR.\n   */\n  withCredentials: boolean;\n  /**\n   * The number of milliseconds a request can take before automatically being terminated.\n   * If the request is terminated, an `AbortError` is thrown.\n   */\n  timeout: number;\n  /**\n   * Proxy configuration.\n   */\n  proxySettings?: ProxySettings;\n  /**\n   * HTTP(S) agent configuration.\n   */\n  agentSettings?: AgentSettings;\n  /**\n   * If the connection should be reused.\n   */\n  keepAlive?: boolean;\n\n  /**\n   * Used to abort the request later.\n   */\n  abortSignal?: AbortSignalLike;\n\n  /**\n   * Callback which fires upon upload progress.\n   */\n  onUploadProgress?: (progress: TransferProgressEvent) => void;\n\n  /** Callback which fires upon download progress. */\n  onDownloadProgress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Validates that the required properties such as method, url, headers[\"Content-Type\"],\n   * headers[\"accept-language\"] are defined. It will throw an error if one of the above\n   * mentioned properties are not defined.\n   */\n  validateRequestProperties(): void;\n\n  /**\n   * Sets options on the request.\n   */\n  prepare(options: RequestPrepareOptions): WebResourceLike;\n  /**\n   * Clone this request object.\n   */\n  clone(): WebResourceLike;\n}\n\nexport function isWebResourceLike(object: any): object is WebResourceLike {\n  if (typeof object !== \"object\") {\n    return false;\n  }\n  if (\n    typeof object.url === \"string\" &&\n    typeof object.method === \"string\" &&\n    typeof object.headers === \"object\" &&\n    isHttpHeadersLike(object.headers) &&\n    typeof object.validateRequestProperties === \"function\" &&\n    typeof object.prepare === \"function\" &&\n    typeof object.clone === \"function\"\n  ) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Creates a new WebResource object.\n *\n * This class provides an abstraction over a REST call by being library / implementation agnostic and wrapping the necessary\n * properties to initiate a request.\n *\n * @constructor\n */\nexport class WebResource {\n  url: string;\n  method: HttpMethods;\n  body?: any;\n  headers: HttpHeadersLike;\n  /**\n   * Whether or not the body of the HttpOperationResponse should be treated as a stream.\n   */\n  streamResponseBody?: boolean;\n  /**\n   * Whether or not the HttpOperationResponse should be deserialized. If this is undefined, then the\n   * HttpOperationResponse should be deserialized.\n   */\n  shouldDeserialize?: boolean | ((response: HttpOperationResponse) => boolean);\n  /**\n   * A function that returns the proper OperationResponse for the given OperationSpec and\n   * HttpOperationResponse combination. If this is undefined, then a simple status code lookup will\n   * be used.\n   */\n  operationResponseGetter?: (operationSpec: OperationSpec, response: HttpOperationResponse) => (undefined | OperationResponse);\n  formData?: any;\n  query?: { [key: string]: any; };\n  operationSpec?: OperationSpec;\n  withCredentials: boolean;\n  timeout: number;\n  proxySettings?: ProxySettings;\n  keepAlive?: boolean;\n  agentSettings?: AgentSettings;\n\n  abortSignal?: AbortSignalLike;\n\n  /** Callback which fires upon upload progress. */\n  onUploadProgress?: (progress: TransferProgressEvent) => void;\n\n  /** Callback which fires upon download progress. */\n  onDownloadProgress?: (progress: TransferProgressEvent) => void;\n\n  constructor(\n    url?: string,\n    method?: HttpMethods,\n    body?: any,\n    query?: { [key: string]: any; },\n    headers?: { [key: string]: any; } | HttpHeadersLike,\n    streamResponseBody?: boolean,\n    withCredentials?: boolean,\n    abortSignal?: AbortSignalLike,\n    timeout?: number,\n    onUploadProgress?: (progress: TransferProgressEvent) => void,\n    onDownloadProgress?: (progress: TransferProgressEvent) => void,\n    proxySettings?: ProxySettings,\n    keepAlive?: boolean,\n    agentSettings?: AgentSettings) {\n\n    this.streamResponseBody = streamResponseBody;\n    this.url = url || \"\";\n    this.method = method || \"GET\";\n    this.headers = (isHttpHeadersLike(headers) ? headers : new HttpHeaders(headers));\n    this.body = body;\n    this.query = query;\n    this.formData = undefined;\n    this.withCredentials = withCredentials || false;\n    this.abortSignal = abortSignal;\n    this.timeout = timeout || 0;\n    this.onUploadProgress = onUploadProgress;\n    this.onDownloadProgress = onDownloadProgress;\n    this.proxySettings = proxySettings;\n    this.keepAlive = keepAlive;\n    this.agentSettings = agentSettings;\n  }\n\n  /**\n   * Validates that the required properties such as method, url, headers[\"Content-Type\"],\n   * headers[\"accept-language\"] are defined. It will throw an error if one of the above\n   * mentioned properties are not defined.\n   */\n  validateRequestProperties(): void {\n    if (!this.method) {\n      throw new Error(\"WebResource.method is required.\");\n    }\n    if (!this.url) {\n      throw new Error(\"WebResource.url is required.\");\n    }\n  }\n\n  /**\n   * Prepares the request.\n   * @param {RequestPrepareOptions} options Options to provide for preparing the request.\n   * @returns {WebResource} Returns the prepared WebResource (HTTP Request) object that needs to be given to the request pipeline.\n   */\n  prepare(options: RequestPrepareOptions): WebResource {\n    if (!options) {\n      throw new Error(\"options object is required\");\n    }\n\n    if (options.method == undefined || typeof options.method.valueOf() !== \"string\") {\n      throw new Error(\"options.method must be a string.\");\n    }\n\n    if (options.url && options.pathTemplate) {\n      throw new Error(\"options.url and options.pathTemplate are mutually exclusive. Please provide exactly one of them.\");\n    }\n\n\n    if ((options.pathTemplate == undefined || typeof options.pathTemplate.valueOf() !== \"string\") && (options.url == undefined || typeof options.url.valueOf() !== \"string\")) {\n      throw new Error(\"Please provide exactly one of options.pathTemplate or options.url.\");\n    }\n\n    // set the url if it is provided.\n    if (options.url) {\n      if (typeof options.url !== \"string\") {\n        throw new Error(\"options.url must be of type \\\"string\\\".\");\n      }\n      this.url = options.url;\n    }\n\n    // set the method\n    if (options.method) {\n      const validMethods = [\"GET\", \"PUT\", \"HEAD\", \"DELETE\", \"OPTIONS\", \"POST\", \"PATCH\", \"TRACE\"];\n      if (validMethods.indexOf(options.method.toUpperCase()) === -1) {\n        throw new Error(\"The provided method \\\"\" + options.method + \"\\\" is invalid. Supported HTTP methods are: \" + JSON.stringify(validMethods));\n      }\n    }\n    this.method = (options.method.toUpperCase() as HttpMethods);\n\n    // construct the url if path template is provided\n    if (options.pathTemplate) {\n      const { pathTemplate, pathParameters } = options;\n      if (typeof pathTemplate !== \"string\") {\n        throw new Error(\"options.pathTemplate must be of type \\\"string\\\".\");\n      }\n      if (!options.baseUrl) {\n        options.baseUrl = \"https://management.azure.com\";\n      }\n      const baseUrl = options.baseUrl;\n      let url = baseUrl + (baseUrl.endsWith(\"/\") ? \"\" : \"/\") + (pathTemplate.startsWith(\"/\") ? pathTemplate.slice(1) : pathTemplate);\n      const segments = url.match(/({\\w*\\s*\\w*})/ig);\n      if (segments && segments.length) {\n        if (!pathParameters) {\n          throw new Error(`pathTemplate: ${pathTemplate} has been provided. Hence, options.pathParameters must also be provided.`);\n        }\n        segments.forEach(function (item) {\n          const pathParamName = item.slice(1, -1);\n          const pathParam = (pathParameters as { [key: string]: any })[pathParamName];\n          if (pathParam === null || pathParam === undefined || !(typeof pathParam === \"string\" || typeof pathParam === \"object\")) {\n            throw new Error(`pathTemplate: ${pathTemplate} contains the path parameter ${pathParamName}` +\n              ` however, it is not present in ${pathParameters} - ${JSON.stringify(pathParameters, undefined, 2)}.` +\n              `The value of the path parameter can either be a \"string\" of the form { ${pathParamName}: \"some sample value\" } or ` +\n              `it can be an \"object\" of the form { \"${pathParamName}\": { value: \"some sample value\", skipUrlEncoding: true } }.`);\n          }\n\n          if (typeof pathParam.valueOf() === \"string\") {\n            url = url.replace(item, encodeURIComponent(pathParam));\n          }\n\n          if (typeof pathParam.valueOf() === \"object\") {\n            if (!pathParam.value) {\n              throw new Error(`options.pathParameters[${pathParamName}] is of type \"object\" but it does not contain a \"value\" property.`);\n            }\n            if (pathParam.skipUrlEncoding) {\n              url = url.replace(item, pathParam.value);\n            } else {\n              url = url.replace(item, encodeURIComponent(pathParam.value));\n            }\n          }\n        });\n      }\n      this.url = url;\n    }\n\n    // append query parameters to the url if they are provided. They can be provided with pathTemplate or url option.\n    if (options.queryParameters) {\n      const queryParameters = options.queryParameters;\n      if (typeof queryParameters !== \"object\") {\n        throw new Error(`options.queryParameters must be of type object. It should be a JSON object ` +\n          `of \"query-parameter-name\" as the key and the \"query-parameter-value\" as the value. ` +\n          `The \"query-parameter-value\" may be fo type \"string\" or an \"object\" of the form { value: \"query-parameter-value\", skipUrlEncoding: true }.`);\n      }\n      // append question mark if it is not present in the url\n      if (this.url && this.url.indexOf(\"?\") === -1) {\n        this.url += \"?\";\n      }\n      // construct queryString\n      const queryParams = [];\n      // We need to populate this.query as a dictionary if the request is being used for Sway's validateRequest().\n      this.query = {};\n      for (const queryParamName in queryParameters) {\n        const queryParam: any = queryParameters[queryParamName];\n        if (queryParam) {\n          if (typeof queryParam === \"string\") {\n            queryParams.push(queryParamName + \"=\" + encodeURIComponent(queryParam));\n            this.query[queryParamName] = encodeURIComponent(queryParam);\n          }\n          else if (typeof queryParam === \"object\") {\n            if (!queryParam.value) {\n              throw new Error(`options.queryParameters[${queryParamName}] is of type \"object\" but it does not contain a \"value\" property.`);\n            }\n            if (queryParam.skipUrlEncoding) {\n              queryParams.push(queryParamName + \"=\" + queryParam.value);\n              this.query[queryParamName] = queryParam.value;\n            } else {\n              queryParams.push(queryParamName + \"=\" + encodeURIComponent(queryParam.value));\n              this.query[queryParamName] = encodeURIComponent(queryParam.value);\n            }\n          }\n        }\n      }// end-of-for\n      // append the queryString\n      this.url += queryParams.join(\"&\");\n    }\n\n    // add headers to the request if they are provided\n    if (options.headers) {\n      const headers = options.headers;\n      for (const headerName of Object.keys(options.headers)) {\n        this.headers.set(headerName, headers[headerName]);\n      }\n    }\n    // ensure accept-language is set correctly\n    if (!this.headers.get(\"accept-language\")) {\n      this.headers.set(\"accept-language\", \"en-US\");\n    }\n    // ensure the request-id is set correctly\n    if (!this.headers.get(\"x-ms-client-request-id\") && !options.disableClientRequestId) {\n      this.headers.set(\"x-ms-client-request-id\", generateUuid());\n    }\n\n    // default\n    if (!this.headers.get(\"Content-Type\")) {\n      this.headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n    }\n\n    // set the request body. request.js automatically sets the Content-Length request header, so we need not set it explicilty\n    this.body = options.body;\n    if (options.body != undefined) {\n      // body as a stream special case. set the body as-is and check for some special request headers specific to sending a stream.\n      if (options.bodyIsStream) {\n        if (!this.headers.get(\"Transfer-Encoding\")) {\n          this.headers.set(\"Transfer-Encoding\", \"chunked\");\n        }\n        if (this.headers.get(\"Content-Type\") !== \"application/octet-stream\") {\n          this.headers.set(\"Content-Type\", \"application/octet-stream\");\n        }\n      } else {\n        if (options.serializationMapper) {\n          this.body = new Serializer(options.mappers).serialize(options.serializationMapper, options.body, \"requestBody\");\n        }\n        if (!options.disableJsonStringifyOnBody) {\n          this.body = JSON.stringify(options.body);\n        }\n      }\n    }\n\n    this.abortSignal = options.abortSignal;\n    this.onDownloadProgress = options.onDownloadProgress;\n    this.onUploadProgress = options.onUploadProgress;\n\n    return this;\n  }\n\n  /**\n   * Clone this WebResource HTTP request object.\n   * @returns {WebResource} The clone of this WebResource HTTP request object.\n   */\n  clone(): WebResource {\n    const result = new WebResource(\n      this.url,\n      this.method,\n      this.body,\n      this.query,\n      this.headers && this.headers.clone(),\n      this.streamResponseBody,\n      this.withCredentials,\n      this.abortSignal,\n      this.timeout,\n      this.onUploadProgress,\n      this.onDownloadProgress,\n      this.proxySettings,\n      this.keepAlive,\n      this.agentSettings);\n\n    if (this.formData) {\n      result.formData = this.formData;\n    }\n\n    if (this.operationSpec) {\n      result.operationSpec = this.operationSpec;\n    }\n\n    if (this.shouldDeserialize) {\n      result.shouldDeserialize = this.shouldDeserialize;\n    }\n\n    if (this.operationResponseGetter) {\n      result.operationResponseGetter = this.operationResponseGetter;\n    }\n\n    return result;\n  }\n}\n\nexport interface RequestPrepareOptions {\n  /**\n   * The HTTP request method. Valid values are \"GET\", \"PUT\", \"HEAD\", \"DELETE\", \"OPTIONS\", \"POST\",\n   * or \"PATCH\".\n   */\n  method: HttpMethods;\n  /**\n   * The request url. It may or may not have query parameters in it. Either provide the \"url\" or\n   * provide the \"pathTemplate\" in the options object. Both the options are mutually exclusive.\n   */\n  url?: string;\n  /**\n   * A dictionary of query parameters to be appended to the url, where\n   * the \"key\" is the \"query-parameter-name\" and the \"value\" is the \"query-parameter-value\".\n   * The \"query-parameter-value\" can be of type \"string\" or it can be of type \"object\".\n   * The \"object\" format should be used when you want to skip url encoding. While using the object format,\n   * the object must have a property named value which provides the \"query-parameter-value\".\n   * Example:\n   *    - query-parameter-value in \"object\" format: { \"query-parameter-name\": { value: \"query-parameter-value\", skipUrlEncoding: true } }\n   *    - query-parameter-value in \"string\" format: { \"query-parameter-name\": \"query-parameter-value\"}.\n   * Note: \"If options.url already has some query parameters, then the value provided in options.queryParameters will be appended to the url.\n   */\n  queryParameters?: { [key: string]: any | ParameterValue };\n  /**\n   * The path template of the request url. Either provide the \"url\" or provide the \"pathTemplate\" in\n   * the options object. Both the options are mutually exclusive.\n   * Example: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}\"\n   */\n  pathTemplate?: string;\n  /**\n   * The base url of the request. Default value is: \"https://management.azure.com\". This is\n   * applicable only with pathTemplate. If you are providing options.url then it is expected that\n   * you provide the complete url.\n   */\n  baseUrl?: string;\n  /**\n   * A dictionary of path parameters that need to be replaced with actual values in the pathTemplate.\n   * Here the key is the \"path-parameter-name\" and the value is the \"path-parameter-value\".\n   * The \"path-parameter-value\" can be of type \"string\"  or it can be of type \"object\".\n   * The \"object\" format should be used when you want to skip url encoding. While using the object format,\n   * the object must have a property named value which provides the \"path-parameter-value\".\n   * Example:\n   *    - path-parameter-value in \"object\" format: { \"path-parameter-name\": { value: \"path-parameter-value\", skipUrlEncoding: true } }\n   *    - path-parameter-value in \"string\" format: { \"path-parameter-name\": \"path-parameter-value\" }.\n   */\n  pathParameters?: { [key: string]: any | ParameterValue };\n  formData?: { [key: string]: any };\n  /**\n   * A dictionary of request headers that need to be applied to the request.\n   * Here the key is the \"header-name\" and the value is the \"header-value\". The header-value MUST be of type string.\n   *  - ContentType must be provided with the key name as \"Content-Type\". Default value \"application/json; charset=utf-8\".\n   *  - \"Transfer-Encoding\" is set to \"chunked\" by default if \"options.bodyIsStream\" is set to true.\n   *  - \"Content-Type\" is set to \"application/octet-stream\" by default if \"options.bodyIsStream\" is set to true.\n   *  - \"accept-language\" by default is set to \"en-US\"\n   *  - \"x-ms-client-request-id\" by default is set to a new Guid. To not generate a guid for the request, please set options.disableClientRequestId to true\n   */\n  headers?: { [key: string]: any };\n  /**\n   * When set to true, instructs the client to not set \"x-ms-client-request-id\" header to a new Guid().\n   */\n  disableClientRequestId?: boolean;\n  /**\n   * The request body. It can be of any type. This value will be serialized if it is not a stream.\n   */\n  body?: any;\n  /**\n   * Provides information on how to serialize the request body.\n   */\n  serializationMapper?: Mapper;\n  /**\n   * A dictionary of mappers that may be used while [de]serialization.\n   */\n  mappers?: { [x: string]: any };\n  /**\n   * Provides information on how to deserialize the response body.\n   */\n  deserializationMapper?: object;\n  /**\n   * Indicates whether this method should JSON.stringify() the request body. Default value: false.\n   */\n  disableJsonStringifyOnBody?: boolean;\n  /**\n   * Indicates whether the request body is a stream (useful for file upload scenarios).\n   */\n  bodyIsStream?: boolean;\n  abortSignal?: AbortSignalLike;\n  onUploadProgress?: (progress: TransferProgressEvent) => void;\n  onDownloadProgress?: (progress: TransferProgressEvent) => void;\n}\n\n/**\n * The Parameter value provided for path or query parameters in RequestPrepareOptions\n */\nexport interface ParameterValue {\n  value: any;\n  skipUrlEncoding: boolean;\n  [key: string]: any;\n}\n\n/**\n * Describes the base structure of the options object that will be used in every operation.\n */\nexport interface RequestOptionsBase {\n  /**\n   * @property {object} [customHeaders] User defined custom request headers that\n   * will be applied before the request is sent.\n   */\n  customHeaders?: { [key: string]: string };\n\n  /**\n   * The signal which can be used to abort requests.\n   */\n  abortSignal?: AbortSignalLike;\n\n  /**\n   * The number of milliseconds a request can take before automatically being terminated.\n   */\n  timeout?: number;\n\n  /**\n   * Callback which fires upon upload progress.\n   */\n  onUploadProgress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Callback which fires upon download progress.\n   */\n  onDownloadProgress?: (progress: TransferProgressEvent) => void;\n\n  [key: string]: any;\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { HttpOperationResponse } from \"./httpOperationResponse\";\nimport { WebResourceLike } from \"./webResource\";\n\nexport class RestError extends Error {\n  static readonly REQUEST_SEND_ERROR: string = \"REQUEST_SEND_ERROR\";\n  static readonly REQUEST_ABORTED_ERROR: string = \"REQUEST_ABORTED_ERROR\";\n  static readonly PARSE_ERROR: string = \"PARSE_ERROR\";\n\n  code?: string;\n  statusCode?: number;\n  request?: WebResourceLike;\n  response?: HttpOperationResponse;\n  body?: any;\n  constructor(message: string, code?: string, statusCode?: number, request?: WebResourceLike, response?: HttpOperationResponse, body?: any) {\n    super(message);\n    this.code = code;\n    this.statusCode = statusCode;\n    this.request = request;\n    this.response = response;\n    this.body = body;\n\n    Object.setPrototypeOf(this, RestError.prototype);\n  }\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\n/**\n * The different levels of logs that can be used with the HttpPipelineLogger.\n */\nexport enum HttpPipelineLogLevel {\n  /**\n   * A log level that indicates that no logs will be logged.\n   */\n  OFF,\n\n  /**\n   * An error log.\n   */\n  ERROR,\n\n  /**\n   * A warning log.\n   */\n  WARNING,\n\n  /**\n   * An information log.\n   */\n  INFO\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { HttpClient } from \"./httpClient\";\nimport { HttpHeaders } from \"./httpHeaders\";\nimport { WebResourceLike, TransferProgressEvent } from \"./webResource\";\nimport { HttpOperationResponse } from \"./httpOperationResponse\";\nimport { RestError } from \"./restError\";\n\n/**\n * A HttpClient implementation that uses XMLHttpRequest to send HTTP requests.\n */\nexport class XhrHttpClient implements HttpClient {\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    const xhr = new XMLHttpRequest();\n\n    if (request.agentSettings) {\n      throw new Error(\"HTTP agent settings not supported in browser environment\");\n    }\n\n    if (request.proxySettings) {\n      throw new Error(\"HTTP proxy is not supported in browser environment\");\n    }\n\n    const abortSignal = request.abortSignal;\n    if (abortSignal) {\n      const listener = () => {\n        xhr.abort();\n      };\n      abortSignal.addEventListener(\"abort\", listener);\n      xhr.addEventListener(\"readystatechange\", () => {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n          abortSignal.removeEventListener(\"abort\", listener);\n        }\n      });\n    }\n\n    addProgressListener(xhr.upload, request.onUploadProgress);\n    addProgressListener(xhr, request.onDownloadProgress);\n\n    if (request.formData) {\n      const formData = request.formData;\n      const requestForm = new FormData();\n      const appendFormValue = (key: string, value: any) => {\n        if (value && value.hasOwnProperty(\"value\") && value.hasOwnProperty(\"options\")) {\n          requestForm.append(key, value.value, value.options);\n        } else {\n          requestForm.append(key, value);\n        }\n      };\n      for (const formKey of Object.keys(formData)) {\n        const formValue = formData[formKey];\n        if (Array.isArray(formValue)) {\n          for (let j = 0; j < formValue.length; j++) {\n            appendFormValue(formKey, formValue[j]);\n          }\n        } else {\n          appendFormValue(formKey, formValue);\n        }\n      }\n\n      request.body = requestForm;\n      request.formData = undefined;\n      const contentType = request.headers.get(\"Content-Type\");\n      if (contentType && contentType.indexOf(\"multipart/form-data\") !== -1) {\n        // browser will automatically apply a suitable content-type header\n        request.headers.remove(\"Content-Type\");\n      }\n    }\n\n    xhr.open(request.method, request.url);\n    xhr.timeout = request.timeout;\n    xhr.withCredentials = request.withCredentials;\n    for (const header of request.headers.headersArray()) {\n      xhr.setRequestHeader(header.name, header.value);\n    }\n    xhr.responseType = request.streamResponseBody ? \"blob\" : \"text\";\n\n    // tslint:disable-next-line:no-null-keyword\n    xhr.send(request.body === undefined ? null : request.body);\n\n    if (request.streamResponseBody) {\n      return new Promise((resolve, reject) => {\n        xhr.addEventListener(\"readystatechange\", () => {\n          // Resolve as soon as headers are loaded\n          if (xhr.readyState === XMLHttpRequest.HEADERS_RECEIVED) {\n            const blobBody = new Promise<Blob>((resolve, reject) => {\n              xhr.addEventListener(\"load\", () => {\n                resolve(xhr.response);\n              });\n              rejectOnTerminalEvent(request, xhr, reject);\n            });\n            resolve({\n              request,\n              status: xhr.status,\n              headers: parseHeaders(xhr),\n              blobBody\n            });\n          }\n        });\n        rejectOnTerminalEvent(request, xhr, reject);\n      });\n    } else {\n      return new Promise(function (resolve, reject) {\n        xhr.addEventListener(\"load\", () => resolve({\n          request,\n          status: xhr.status,\n          headers: parseHeaders(xhr),\n          bodyAsText: xhr.responseText\n        }));\n        rejectOnTerminalEvent(request, xhr, reject);\n      });\n    }\n  }\n}\n\nfunction addProgressListener(xhr: XMLHttpRequestEventTarget, listener?: (progress: TransferProgressEvent) => void) {\n  if (listener) {\n    xhr.addEventListener(\"progress\", rawEvent => listener({\n      loadedBytes: rawEvent.loaded\n    }));\n  }\n}\n\n// exported locally for testing\nexport function parseHeaders(xhr: XMLHttpRequest) {\n  const responseHeaders = new HttpHeaders();\n  const headerLines = xhr.getAllResponseHeaders().trim().split(/[\\r\\n]+/);\n  for (const line of headerLines) {\n    const index = line.indexOf(\":\");\n    const headerName = line.slice(0, index);\n    const headerValue = line.slice(index + 2);\n    responseHeaders.set(headerName, headerValue);\n  }\n  return responseHeaders;\n}\n\nfunction rejectOnTerminalEvent(request: WebResourceLike, xhr: XMLHttpRequest, reject: (err: any) => void) {\n  xhr.addEventListener(\"error\", () => reject(new RestError(`Failed to send request to ${request.url}`, RestError.REQUEST_SEND_ERROR, undefined, request)));\n  xhr.addEventListener(\"abort\", () => reject(new RestError(\"The request was aborted\", RestError.REQUEST_ABORTED_ERROR, undefined, request)));\n  xhr.addEventListener(\"timeout\", () => reject(new RestError(`timeout of ${xhr.timeout}ms exceeded`, RestError.REQUEST_SEND_ERROR, undefined, request)));\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { QueryCollectionFormat } from \"./queryCollectionFormat\";\nimport { Mapper } from \"./serializer\";\n\nexport type ParameterPath = string | string[] | { [propertyName: string]: ParameterPath };\n\n/**\n * A common interface that all Operation parameter's extend.\n */\nexport interface OperationParameter {\n  /**\n   * The path to this parameter's value in OperationArguments or the object that contains paths for\n   * each property's value in OperationArguments.\n   */\n  parameterPath: ParameterPath;\n\n  /**\n   * The mapper that defines how to validate and serialize this parameter's value.\n   */\n  mapper: Mapper;\n}\n\n/**\n * A parameter for an operation that will be substituted into the operation's request URL.\n */\nexport interface OperationURLParameter extends OperationParameter {\n  /**\n   * Whether or not to skip encoding the URL parameter's value before adding it to the URL.\n   */\n  skipEncoding?: boolean;\n}\n\n/**\n * A parameter for an operation that will be added as a query parameter to the operation's HTTP\n * request.\n */\nexport interface OperationQueryParameter extends OperationParameter {\n  /**\n   * Whether or not to skip encoding the query parameter's value before adding it to the URL.\n   */\n  skipEncoding?: boolean;\n\n  /**\n   * If this query parameter's value is a collection, what type of format should the value be\n   * converted to.\n   */\n  collectionFormat?: QueryCollectionFormat;\n}\n\n/**\n * Get the path to this parameter's value as a dotted string (a.b.c).\n * @param parameter The parameter to get the path string for.\n * @returns The path to this parameter's value as a dotted string.\n */\nexport function getPathStringFromParameter(parameter: OperationParameter): string {\n  return getPathStringFromParameterPath(parameter.parameterPath, parameter.mapper);\n}\n\nexport function getPathStringFromParameterPath(parameterPath: ParameterPath, mapper: Mapper): string {\n  let result: string;\n  if (typeof parameterPath === \"string\") {\n    result = parameterPath;\n  } else if (Array.isArray(parameterPath)) {\n    result = parameterPath.join(\".\");\n  } else {\n    result = mapper.serializedName!;\n  }\n  return result;\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { OperationParameter, OperationQueryParameter, OperationURLParameter } from \"./operationParameter\";\nimport { OperationResponse } from \"./operationResponse\";\nimport { MapperType, Serializer } from \"./serializer\";\nimport { HttpMethods } from \"./webResource\";\n\n/**\n * A specification that defines an operation.\n */\nexport interface OperationSpec {\n  /**\n   * The serializer to use in this operation.\n   */\n  readonly serializer: Serializer;\n\n  /**\n   * The HTTP method that should be used by requests for this operation.\n   */\n  readonly httpMethod: HttpMethods;\n\n  /**\n   * The URL that was provided in the service's specification. This will still have all of the URL\n   * template variables in it. If this is not provided when the OperationSpec is created, then it\n   * will be populated by a \"baseUri\" property on the ServiceClient.\n   */\n  readonly baseUrl?: string;\n\n  /**\n   * The fixed path for this operation's URL. This will still have all of the URL template variables\n   * in it.\n   */\n  readonly path?: string;\n\n  /**\n   * The content type of the request body. This value will be used as the \"Content-Type\" header if\n   * it is provided.\n   */\n  readonly contentType?: string;\n\n  /**\n   * The parameter that will be used to construct the HTTP request's body.\n   */\n  readonly requestBody?: OperationParameter;\n\n  /**\n   * Whether or not this operation uses XML request and response bodies.\n   */\n  readonly isXML?: boolean;\n\n  /**\n   * The parameters to the operation method that will be substituted into the constructed URL.\n   */\n  readonly urlParameters?: ReadonlyArray<OperationURLParameter>;\n\n  /**\n   * The parameters to the operation method that will be added to the constructed URL's query.\n   */\n  readonly queryParameters?: ReadonlyArray<OperationQueryParameter>;\n\n  /**\n   * The parameters to the operation method that will be converted to headers on the operation's\n   * HTTP request.\n   */\n  readonly headerParameters?: ReadonlyArray<OperationParameter>;\n\n  /**\n   * The parameters to the operation method that will be used to create a formdata body for the\n   * operation's HTTP request.\n   */\n  readonly formDataParameters?: ReadonlyArray<OperationParameter>;\n\n  /**\n   * The different types of responses that this operation can return based on what status code is\n   * returned.\n   */\n  readonly responses: { [responseCode: string]: OperationResponse };\n}\n\nexport function isStreamOperation(operationSpec: OperationSpec): boolean {\n  let result = false;\n  for (const statusCode in operationSpec.responses) {\n    const operationResponse: OperationResponse = operationSpec.responses[statusCode];\n    if (operationResponse.bodyMapper && operationResponse.bodyMapper.type.name === MapperType.Stream) {\n      result = true;\n      break;\n    }\n  }\n  return result;\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nconst parser = new DOMParser();\nexport function parseXML(str: string): Promise<any> {\n  try {\n    const dom = parser.parseFromString(str, \"application/xml\");\n    throwIfError(dom);\n\n    const obj = domToObject(dom.childNodes[0]);\n    return Promise.resolve(obj);\n  } catch (err) {\n    return Promise.reject(err);\n  }\n}\n\nlet errorNS = \"\";\ntry {\n  errorNS = parser.parseFromString(\"INVALID\", \"text/xml\").getElementsByTagName(\"parsererror\")[0].namespaceURI!;\n} catch (ignored) {\n  // Most browsers will return a document containing <parsererror>, but IE will throw.\n}\n\nfunction throwIfError(dom: Document) {\n  if (errorNS) {\n    const parserErrors = dom.getElementsByTagNameNS(errorNS, \"parsererror\");\n    if (parserErrors.length) {\n      throw new Error(parserErrors.item(0)!.innerHTML);\n    }\n  }\n}\n\nfunction isElement(node: Node): node is Element {\n  return !!(node as Element).attributes;\n}\n\n/**\n * Get the Element-typed version of the provided Node if the provided node is an element with\n * attributes. If it isn't, then undefined is returned.\n */\nfunction asElementWithAttributes(node: Node): Element | undefined {\n  return isElement(node) && node.hasAttributes() ? node : undefined;\n}\n\nfunction domToObject(node: Node): any {\n  let result: any = {};\n\n  const childNodeCount: number = node.childNodes.length;\n\n  const firstChildNode: Node = node.childNodes[0];\n  const onlyChildTextValue: string | undefined = (firstChildNode && childNodeCount === 1 && firstChildNode.nodeType === Node.TEXT_NODE && firstChildNode.nodeValue) || undefined;\n\n  const elementWithAttributes: Element | undefined = asElementWithAttributes(node);\n  if (elementWithAttributes) {\n    result[\"$\"] = {};\n\n    for (let i = 0; i < elementWithAttributes.attributes.length; i++) {\n      const attr = elementWithAttributes.attributes[i];\n      result[\"$\"][attr.nodeName] = attr.nodeValue;\n    }\n\n    if (onlyChildTextValue) {\n      result[\"_\"] = onlyChildTextValue;\n    }\n  } else if (childNodeCount === 0) {\n    result = \"\";\n  } else if (onlyChildTextValue) {\n    result = onlyChildTextValue;\n  }\n\n  if (!onlyChildTextValue) {\n    for (let i = 0; i < childNodeCount; i++) {\n      const child = node.childNodes[i];\n      // Ignore leading/trailing whitespace nodes\n      if (child.nodeType !== Node.TEXT_NODE) {\n        const childObject: any = domToObject(child);\n        if (!result[child.nodeName]) {\n          result[child.nodeName] = childObject;\n        } else if (Array.isArray(result[child.nodeName])) {\n          result[child.nodeName].push(childObject);\n        } else {\n          result[child.nodeName] = [result[child.nodeName], childObject];\n        }\n      }\n    }\n  }\n\n  return result;\n}\n\n// tslint:disable-next-line:no-null-keyword\nconst doc = document.implementation.createDocument(null, null, null);\nconst serializer = new XMLSerializer();\n\nexport function stringifyXML(obj: any, opts?: { rootName?: string }) {\n  const rootName = opts && opts.rootName || \"root\";\n  const dom = buildNode(obj, rootName)[0];\n  return '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>' + serializer.serializeToString(dom);\n}\n\nfunction buildAttributes(attrs: { [key: string]: { toString(): string; } }): Attr[] {\n  const result = [];\n  for (const key of Object.keys(attrs)) {\n    const attr = doc.createAttribute(key);\n    attr.value = attrs[key].toString();\n    result.push(attr);\n  }\n  return result;\n}\n\nfunction buildNode(obj: any, elementName: string): Node[] {\n  if (typeof obj === \"string\" || typeof obj === \"number\" || typeof obj === \"boolean\") {\n    const elem = doc.createElement(elementName);\n    elem.textContent = obj.toString();\n    return [elem];\n  }\n  else if (Array.isArray(obj)) {\n    const result = [];\n    for (const arrayElem of obj) {\n      for (const child of buildNode(arrayElem, elementName)) {\n        result.push(child);\n      }\n    }\n    return result;\n  } else if (typeof obj === \"object\") {\n    const elem = doc.createElement(elementName);\n    for (const key of Object.keys(obj)) {\n      if (key === \"$\") {\n        for (const attr of buildAttributes(obj[key])) {\n          elem.attributes.setNamedItem(attr);\n        }\n      } else {\n        for (const child of buildNode(obj[key], key)) {\n          elem.appendChild(child);\n        }\n      }\n    }\n    return [elem];\n  }\n  else {\n    throw new Error(`Illegal value passed to buildObject: ${obj}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { HttpPipelineLogger } from \"../httpPipelineLogger\";\nimport { HttpPipelineLogLevel } from \"../httpPipelineLogLevel\";\nimport { WebResourceLike } from \"../webResource\";\n\n/**\n * Creates a new RequestPolicy per-request that uses the provided nextPolicy.\n */\nexport type RequestPolicyFactory = {\n  create(nextPolicy: RequestPolicy, options: RequestPolicyOptionsLike): RequestPolicy\n};\n\nexport interface RequestPolicy {\n  sendRequest(httpRequest: WebResourceLike): Promise<HttpOperationResponse>;\n}\n\nexport abstract class BaseRequestPolicy implements RequestPolicy {\n  protected constructor(readonly _nextPolicy: RequestPolicy, readonly _options: RequestPolicyOptionsLike) {\n  }\n\n  public abstract sendRequest(webResource: WebResourceLike): Promise<HttpOperationResponse>;\n\n  /**\n   * Get whether or not a log with the provided log level should be logged.\n   * @param logLevel The log level of the log that will be logged.\n   * @returns Whether or not a log with the provided log level should be logged.\n   */\n  public shouldLog(logLevel: HttpPipelineLogLevel): boolean {\n    return this._options.shouldLog(logLevel);\n  }\n\n  /**\n   * Attempt to log the provided message to the provided logger. If no logger was provided or if\n   * the log level does not meat the logger's threshold, then nothing will be logged.\n   * @param logLevel The log level of this log.\n   * @param message The message of this log.\n   */\n  public log(logLevel: HttpPipelineLogLevel, message: string): void {\n    this._options.log(logLevel, message);\n  }\n}\n\n/**\n * Optional properties that can be used when creating a RequestPolicy.\n */\nexport interface RequestPolicyOptionsLike {\n  /**\n   * Get whether or not a log with the provided log level should be logged.\n   * @param logLevel The log level of the log that will be logged.\n   * @returns Whether or not a log with the provided log level should be logged.\n   */\n  shouldLog(logLevel: HttpPipelineLogLevel): boolean;\n\n  /**\n   * Attempt to log the provided message to the provided logger. If no logger was provided or if\n   * the log level does not meet the logger's threshold, then nothing will be logged.\n   * @param logLevel The log level of this log.\n   * @param message The message of this log.\n   */\n  log(logLevel: HttpPipelineLogLevel, message: string): void;\n}\n\n/**\n * Optional properties that can be used when creating a RequestPolicy.\n */\nexport class RequestPolicyOptions implements RequestPolicyOptionsLike {\n  constructor(private _logger?: HttpPipelineLogger) {\n  }\n\n  /**\n   * Get whether or not a log with the provided log level should be logged.\n   * @param logLevel The log level of the log that will be logged.\n   * @returns Whether or not a log with the provided log level should be logged.\n   */\n  public shouldLog(logLevel: HttpPipelineLogLevel): boolean {\n    return !!this._logger &&\n      logLevel !== HttpPipelineLogLevel.OFF &&\n      logLevel <= this._logger.minimumLogLevel;\n  }\n\n  /**\n   * Attempt to log the provided message to the provided logger. If no logger was provided or if\n   * the log level does not meat the logger's threshold, then nothing will be logged.\n   * @param logLevel The log level of this log.\n   * @param message The message of this log.\n   */\n  public log(logLevel: HttpPipelineLogLevel, message: string): void {\n    if (this._logger && this.shouldLog(logLevel)) {\n      this._logger.log(logLevel, message);\n    }\n  }\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { OperationResponse } from \"../operationResponse\";\nimport { OperationSpec, isStreamOperation } from \"../operationSpec\";\nimport { RestError } from \"../restError\";\nimport { Mapper, MapperType } from \"../serializer\";\nimport * as utils from \"../util/utils\";\nimport { parseXML } from \"../util/xml\";\nimport { WebResourceLike } from \"../webResource\";\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyFactory, RequestPolicyOptionsLike } from \"./requestPolicy\";\n\n/**\n * The content-types that will indicate that an operation response should be deserialized in a\n * particular way.\n */\nexport interface DeserializationContentTypes {\n  /**\n   * The content-types that indicate that an operation response should be deserialized as JSON.\n   * Defaults to [ \"application/json\", \"text/json\" ].\n   */\n  json?: string[];\n\n  /**\n   * The content-types that indicate that an operation response should be deserialized as XML.\n   * Defaults to [ \"application/xml\", \"application/atom+xml\" ].\n   */\n  xml?: string[];\n}\n\n/**\n * Create a new serialization RequestPolicyCreator that will serialized HTTP request bodies as they\n * pass through the HTTP pipeline.\n */\nexport function deserializationPolicy(deserializationContentTypes?: DeserializationContentTypes): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptionsLike) => {\n      return new DeserializationPolicy(nextPolicy, deserializationContentTypes, options);\n    }\n  };\n}\n\nexport const defaultJsonContentTypes = [\"application/json\", \"text/json\"];\nexport const defaultXmlContentTypes = [\"application/xml\", \"application/atom+xml\"];\n\n/**\n * A RequestPolicy that will deserialize HTTP response bodies and headers as they pass through the\n * HTTP pipeline.\n */\nexport class DeserializationPolicy extends BaseRequestPolicy {\n  public readonly jsonContentTypes: string[];\n  public readonly xmlContentTypes: string[];\n\n  constructor(nextPolicy: RequestPolicy, deserializationContentTypes: DeserializationContentTypes | undefined, options: RequestPolicyOptionsLike) {\n    super(nextPolicy, options);\n\n    this.jsonContentTypes = deserializationContentTypes && deserializationContentTypes.json || defaultJsonContentTypes;\n    this.xmlContentTypes = deserializationContentTypes && deserializationContentTypes.xml || defaultXmlContentTypes;\n  }\n\n  public async sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(request).then((response: HttpOperationResponse) => deserializeResponseBody(this.jsonContentTypes, this.xmlContentTypes, response));\n  }\n}\n\nfunction getOperationResponse(parsedResponse: HttpOperationResponse): undefined | OperationResponse {\n  let result: OperationResponse | undefined;\n  const request: WebResourceLike = parsedResponse.request;\n  const operationSpec: OperationSpec | undefined = request.operationSpec;\n  if (operationSpec) {\n    const operationResponseGetter: undefined | ((operationSpec: OperationSpec, response: HttpOperationResponse) => (undefined | OperationResponse)) = request.operationResponseGetter;\n    if (!operationResponseGetter) {\n      result = operationSpec.responses[parsedResponse.status];\n    } else {\n      result = operationResponseGetter(operationSpec, parsedResponse);\n    }\n  }\n  return result;\n}\n\nfunction shouldDeserializeResponse(parsedResponse: HttpOperationResponse): boolean {\n  const shouldDeserialize: undefined | boolean | ((response: HttpOperationResponse) => boolean) = parsedResponse.request.shouldDeserialize;\n  let result: boolean;\n  if (shouldDeserialize === undefined) {\n    result = true;\n  } else if (typeof shouldDeserialize === \"boolean\") {\n    result = shouldDeserialize;\n  } else {\n    result = shouldDeserialize(parsedResponse);\n  }\n  return result;\n}\n\nexport function deserializeResponseBody(jsonContentTypes: string[], xmlContentTypes: string[], response: HttpOperationResponse): Promise<HttpOperationResponse> {\n  return parse(jsonContentTypes, xmlContentTypes, response).then(parsedResponse => {\n    const shouldDeserialize: boolean = shouldDeserializeResponse(parsedResponse);\n    if (shouldDeserialize) {\n      const operationSpec: OperationSpec | undefined = parsedResponse.request.operationSpec;\n      if (operationSpec && operationSpec.responses) {\n        const statusCode: number = parsedResponse.status;\n\n        const expectedStatusCodes: string[] = Object.keys(operationSpec.responses);\n\n        const hasNoExpectedStatusCodes: boolean = (expectedStatusCodes.length === 0 || (expectedStatusCodes.length === 1 && expectedStatusCodes[0] === \"default\"));\n\n        const responseSpec: OperationResponse | undefined = getOperationResponse(parsedResponse);\n\n        const isExpectedStatusCode: boolean = hasNoExpectedStatusCodes ? (200 <= statusCode && statusCode < 300) : !!responseSpec;\n        if (!isExpectedStatusCode) {\n          const defaultResponseSpec: OperationResponse = operationSpec.responses.default;\n          if (defaultResponseSpec) {\n            const initialErrorMessage: string = isStreamOperation(operationSpec)\n              ? `Unexpected status code: ${statusCode}`\n              : parsedResponse.bodyAsText as string;\n\n            const error = new RestError(initialErrorMessage);\n            error.statusCode = statusCode;\n            error.request = utils.stripRequest(parsedResponse.request);\n            error.response = utils.stripResponse(parsedResponse);\n\n            let parsedErrorResponse: { [key: string]: any } = parsedResponse.parsedBody;\n            try {\n              if (parsedErrorResponse) {\n                const defaultResponseBodyMapper: Mapper | undefined = defaultResponseSpec.bodyMapper;\n                if (defaultResponseBodyMapper && defaultResponseBodyMapper.serializedName === \"CloudError\") {\n                  if (parsedErrorResponse.error) {\n                    parsedErrorResponse = parsedErrorResponse.error;\n                  }\n                  if (parsedErrorResponse.code) {\n                    error.code = parsedErrorResponse.code;\n                  }\n                  if (parsedErrorResponse.message) {\n                    error.message = parsedErrorResponse.message;\n                  }\n                } else {\n                  let internalError: any = parsedErrorResponse;\n                  if (parsedErrorResponse.error) {\n                    internalError = parsedErrorResponse.error;\n                  }\n\n                  error.code = internalError.code;\n                  if (internalError.message) {\n                    error.message = internalError.message;\n                  }\n                }\n\n                if (defaultResponseBodyMapper) {\n                  let valueToDeserialize: any = parsedErrorResponse;\n                  if (operationSpec.isXML && defaultResponseBodyMapper.type.name === MapperType.Sequence) {\n                    valueToDeserialize = typeof parsedErrorResponse === \"object\"\n                      ? parsedErrorResponse[defaultResponseBodyMapper.xmlElementName!]\n                      : [];\n                  }\n                  error.body = operationSpec.serializer.deserialize(defaultResponseBodyMapper, valueToDeserialize, \"error.body\");\n                }\n              }\n            } catch (defaultError) {\n              error.message = `Error \\\"${defaultError.message}\\\" occurred in deserializing the responseBody - \\\"${parsedResponse.bodyAsText}\\\" for the default response.`;\n            }\n            return Promise.reject(error);\n          }\n        } else if (responseSpec) {\n          if (responseSpec.bodyMapper) {\n            let valueToDeserialize: any = parsedResponse.parsedBody;\n            if (operationSpec.isXML && responseSpec.bodyMapper.type.name === MapperType.Sequence) {\n              valueToDeserialize = typeof valueToDeserialize === \"object\" ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName!] : [];\n            }\n            try {\n              parsedResponse.parsedBody = operationSpec.serializer.deserialize(responseSpec.bodyMapper, valueToDeserialize, \"operationRes.parsedBody\");\n            } catch (error) {\n              const restError = new RestError(`Error ${error} occurred in deserializing the responseBody - ${parsedResponse.bodyAsText}`);\n              restError.request = utils.stripRequest(parsedResponse.request);\n              restError.response = utils.stripResponse(parsedResponse);\n              return Promise.reject(restError);\n            }\n          } else if (operationSpec.httpMethod === \"HEAD\") {\n            // head methods never have a body, but we return a boolean to indicate presence/absence of the resource\n            parsedResponse.parsedBody = response.status >= 200 && response.status < 300;\n          }\n\n          if (responseSpec.headersMapper) {\n            parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(responseSpec.headersMapper, parsedResponse.headers.rawHeaders(), \"operationRes.parsedHeaders\");\n          }\n        }\n      }\n    }\n    return Promise.resolve(parsedResponse);\n  });\n}\n\nfunction parse(jsonContentTypes: string[], xmlContentTypes: string[], operationResponse: HttpOperationResponse): Promise<HttpOperationResponse> {\n  const errorHandler = (err: Error & { code: string }) => {\n    const msg = `Error \"${err}\" occurred while parsing the response body - ${operationResponse.bodyAsText}.`;\n    const errCode = err.code || RestError.PARSE_ERROR;\n    const e = new RestError(msg, errCode, operationResponse.status, operationResponse.request, operationResponse, operationResponse.bodyAsText);\n    return Promise.reject(e);\n  };\n\n  if (!operationResponse.request.streamResponseBody && operationResponse.bodyAsText) {\n    const text = operationResponse.bodyAsText;\n    const contentType: string = operationResponse.headers.get(\"Content-Type\") || \"\";\n    const contentComponents: string[] = !contentType ? [] : contentType.split(\";\").map(component => component.toLowerCase());\n    if (contentComponents.length === 0 || contentComponents.some(component => jsonContentTypes.indexOf(component) !== -1)) {\n      return new Promise<HttpOperationResponse>(resolve => {\n        operationResponse.parsedBody = JSON.parse(text);\n        resolve(operationResponse);\n      }).catch(errorHandler);\n    } else if (contentComponents.some(component => xmlContentTypes.indexOf(component) !== -1)) {\n      return parseXML(text)\n        .then(body => {\n          operationResponse.parsedBody = body;\n          return operationResponse;\n        })\n        .catch(errorHandler);\n    }\n  }\n\n  return Promise.resolve(operationResponse);\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport * as utils from \"../util/utils\";\nimport { WebResourceLike } from \"../webResource\";\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyFactory, RequestPolicyOptionsLike } from \"./requestPolicy\";\nimport { RestError } from \"../restError\";\n\nexport interface RetryData {\n  retryCount: number;\n  retryInterval: number;\n  error?: RetryError;\n}\n\nexport interface RetryError extends Error {\n  message: string;\n  code?: string;\n  innerError?: RetryError;\n}\n\nexport function exponentialRetryPolicy(retryCount?: number, retryInterval?: number, minRetryInterval?: number, maxRetryInterval?: number): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptionsLike) => {\n      return new ExponentialRetryPolicy(nextPolicy, options, retryCount, retryInterval, minRetryInterval, maxRetryInterval);\n    }\n  };\n}\n\nconst DEFAULT_CLIENT_RETRY_INTERVAL = 1000 * 30;\nconst DEFAULT_CLIENT_RETRY_COUNT = 3;\nconst DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 90;\nconst DEFAULT_CLIENT_MIN_RETRY_INTERVAL = 1000 * 3;\n\n/**\n * @class\n * Instantiates a new \"ExponentialRetryPolicyFilter\" instance.\n */\nexport class ExponentialRetryPolicy extends BaseRequestPolicy {\n  /**\n   * The client retry count.\n   */\n  retryCount: number;\n  /**\n   * The client retry interval in milliseconds.\n   */\n  retryInterval: number;\n  /**\n   * The minimum retry interval in milliseconds.\n   */\n  minRetryInterval: number;\n  /**\n   * The maximum retry interval in milliseconds.\n   */\n  maxRetryInterval: number;\n\n  /**\n   * @constructor\n   * @param {RequestPolicy} nextPolicy The next RequestPolicy in the pipeline chain.\n   * @param {RequestPolicyOptionsLike} options The options for this RequestPolicy.\n   * @param {number} [retryCount]        The client retry count.\n   * @param {number} [retryInterval]     The client retry interval, in milliseconds.\n   * @param {number} [minRetryInterval]  The minimum retry interval, in milliseconds.\n   * @param {number} [maxRetryInterval]  The maximum retry interval, in milliseconds.\n   */\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptionsLike, retryCount?: number, retryInterval?: number, minRetryInterval?: number, maxRetryInterval?: number) {\n    super(nextPolicy, options);\n    function isNumber(n: any): n is number { return typeof n === \"number\"; }\n    this.retryCount = isNumber(retryCount) ? retryCount : DEFAULT_CLIENT_RETRY_COUNT;\n    this.retryInterval = isNumber(retryInterval) ? retryInterval : DEFAULT_CLIENT_RETRY_INTERVAL;\n    this.minRetryInterval = isNumber(minRetryInterval) ? minRetryInterval : DEFAULT_CLIENT_MIN_RETRY_INTERVAL;\n    this.maxRetryInterval = isNumber(maxRetryInterval) ? maxRetryInterval : DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(request.clone())\n      .then(response => retry(this, request, response))\n      .catch(error => retry(this, request, error.response, undefined, error));\n  }\n}\n\n/**\n * Determines if the operation should be retried and how long to wait until the next retry.\n *\n * @param {ExponentialRetryPolicy} policy The ExponentialRetryPolicy that this function is being called against.\n * @param {number} statusCode The HTTP status code.\n * @param {RetryData} retryData  The retry data.\n * @return {boolean} True if the operation qualifies for a retry; false otherwise.\n */\nfunction shouldRetry(policy: ExponentialRetryPolicy, statusCode: number | undefined, retryData: RetryData): boolean {\n  if (statusCode == undefined || (statusCode < 500 && statusCode !== 408) || statusCode === 501 || statusCode === 505) {\n    return false;\n  }\n\n  let currentCount: number;\n  if (!retryData) {\n    throw new Error(\"retryData for the ExponentialRetryPolicyFilter cannot be null.\");\n  } else {\n    currentCount = (retryData && retryData.retryCount);\n  }\n\n  return (currentCount < policy.retryCount);\n}\n\n/**\n * Updates the retry data for the next attempt.\n *\n * @param {ExponentialRetryPolicy} policy The ExponentialRetryPolicy that this function is being called against.\n * @param {RetryData} retryData  The retry data.\n * @param {RetryError} [err] The operation\"s error, if any.\n */\nfunction updateRetryData(policy: ExponentialRetryPolicy, retryData?: RetryData, err?: RetryError): RetryData {\n  if (!retryData) {\n    retryData = {\n      retryCount: 0,\n      retryInterval: 0\n    };\n  }\n\n  if (err) {\n    if (retryData.error) {\n      err.innerError = retryData.error;\n    }\n\n    retryData.error = err;\n  }\n\n  // Adjust retry count\n  retryData.retryCount++;\n\n  // Adjust retry interval\n  let incrementDelta = Math.pow(2, retryData.retryCount) - 1;\n  const boundedRandDelta = policy.retryInterval * 0.8 +\n    Math.floor(Math.random() * (policy.retryInterval * 1.2 - policy.retryInterval * 0.8));\n  incrementDelta *= boundedRandDelta;\n\n  retryData.retryInterval = Math.min(policy.minRetryInterval + incrementDelta, policy.maxRetryInterval);\n\n  return retryData;\n}\n\nfunction retry(policy: ExponentialRetryPolicy, request: WebResourceLike, response?: HttpOperationResponse, retryData?: RetryData, requestError?: RetryError): Promise<HttpOperationResponse> {\n  retryData = updateRetryData(policy, retryData, requestError);\n  const isAborted: boolean | undefined = request.abortSignal && request.abortSignal.aborted;\n  if (!isAborted && shouldRetry(policy, response && response.status, retryData)) {\n    return utils.delay(retryData.retryInterval)\n      .then(() => policy._nextPolicy.sendRequest(request.clone()))\n      .then(res => retry(policy, request, res, retryData, undefined))\n      .catch(err => retry(policy, request, response, retryData, err));\n  } else if (isAborted || requestError || !response) {\n    // If the operation failed in the end, return all errors instead of just the last one\n    const err = retryData.error ||\n      new RestError(\n        \"Failed to send the request.\",\n        RestError.REQUEST_SEND_ERROR,\n        response && response.status,\n        response && response.request,\n        response);\n    return Promise.reject(err);\n  } else {\n    return Promise.resolve(response);\n  }\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport * as utils from \"../util/utils\";\nimport { WebResourceLike } from \"../webResource\";\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyFactory, RequestPolicyOptionsLike } from \"./requestPolicy\";\n\nexport function generateClientRequestIdPolicy(requestIdHeaderName = \"x-ms-client-request-id\"): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptionsLike) => {\n      return new GenerateClientRequestIdPolicy(nextPolicy, options, requestIdHeaderName);\n    }\n  };\n}\n\nexport class GenerateClientRequestIdPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptionsLike, private _requestIdHeaderName: string) {\n    super(nextPolicy, options);\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    if (!request.headers.contains(this._requestIdHeaderName)) {\n      request.headers.set(this._requestIdHeaderName, utils.generateUuid());\n    }\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\n/*\n * NOTE: When moving this file, please update \"browser\" section in package.json\n * and \"plugins\" section in webpack.testconfig.ts.\n */\n\nimport { TelemetryInfo } from \"./userAgentPolicy\";\n\ninterface NavigatorEx extends Navigator {\n  // oscpu is not yet standards-compliant, but can not be undefined in TypeScript 3.6.2\n  readonly oscpu: string;\n}\n\nexport function getDefaultUserAgentKey(): string {\n  return \"x-ms-command-name\";\n}\n\nexport function getPlatformSpecificData(): TelemetryInfo[] {\n  const navigator = window.navigator as NavigatorEx;\n  const osInfo = {\n    key: \"OS\",\n    value: (navigator.oscpu || navigator.platform).replace(\" \", \"\")\n  };\n\n  return [osInfo];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { HttpHeaders } from \"../httpHeaders\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { Constants } from \"../util/constants\";\nimport { WebResourceLike } from \"../webResource\";\nimport { getDefaultUserAgentKey, getPlatformSpecificData } from \"./msRestUserAgentPolicy\";\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyFactory, RequestPolicyOptionsLike } from \"./requestPolicy\";\n\nexport type TelemetryInfo = { key?: string; value?: string };\n\nfunction getRuntimeInfo(): TelemetryInfo[] {\n  const msRestRuntime = {\n    key: \"ms-rest-js\",\n    value: Constants.msRestVersion\n  };\n\n  return [msRestRuntime];\n}\n\nfunction getUserAgentString(telemetryInfo: TelemetryInfo[], keySeparator = \" \", valueSeparator = \"/\"): string {\n  return telemetryInfo.map(info => {\n    const value = info.value ? `${valueSeparator}${info.value}` : \"\";\n    return `${info.key}${value}`;\n  }).join(keySeparator);\n}\n\nexport const getDefaultUserAgentHeaderName = getDefaultUserAgentKey;\n\nexport function getDefaultUserAgentValue(): string {\n  const runtimeInfo = getRuntimeInfo();\n  const platformSpecificData = getPlatformSpecificData();\n  const userAgent = getUserAgentString(runtimeInfo.concat(platformSpecificData));\n  return userAgent;\n}\n\nexport function userAgentPolicy(userAgentData?: TelemetryInfo): RequestPolicyFactory {\n  const key: string = (!userAgentData || userAgentData.key == undefined) ? getDefaultUserAgentKey() : userAgentData.key;\n  const value: string = (!userAgentData || userAgentData.value == undefined) ?  getDefaultUserAgentValue() : userAgentData.value;\n\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptionsLike) => {\n      return new UserAgentPolicy(nextPolicy, options, key, value);\n    }\n  };\n}\n\nexport class UserAgentPolicy extends BaseRequestPolicy {\n  constructor(readonly _nextPolicy: RequestPolicy, readonly _options: RequestPolicyOptionsLike, protected headerKey: string, protected headerValue: string) {\n    super(_nextPolicy, _options);\n  }\n\n  sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    this.addUserAgentHeader(request);\n    return this._nextPolicy.sendRequest(request);\n  }\n\n  addUserAgentHeader(request: WebResourceLike): void {\n    if (!request.headers) {\n      request.headers = new HttpHeaders();\n    }\n\n    if (!request.headers.get(this.headerKey) && this.headerValue) {\n      request.headers.set(this.headerKey, this.headerValue);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { replaceAll } from \"./util/utils\";\n\ntype URLQueryParseState = \"ParameterName\" | \"ParameterValue\" | \"Invalid\";\n\n/**\n * A class that handles the query portion of a URLBuilder.\n */\nexport class URLQuery {\n  private readonly _rawQuery: { [queryParameterName: string]: string | string[] } = {};\n\n  /**\n   * Get whether or not there any query parameters in this URLQuery.\n   */\n  public any(): boolean {\n    return Object.keys(this._rawQuery).length > 0;\n  }\n\n  /**\n   * Set a query parameter with the provided name and value. If the parameterValue is undefined or\n   * empty, then this will attempt to remove an existing query parameter with the provided\n   * parameterName.\n   */\n  public set(parameterName: string, parameterValue: any): void {\n    if (parameterName) {\n      if (parameterValue != undefined) {\n        const newValue = Array.isArray(parameterValue) ? parameterValue : parameterValue.toString();\n        this._rawQuery[parameterName] = newValue;\n      } else {\n        delete this._rawQuery[parameterName];\n      }\n    }\n  }\n\n  /**\n   * Get the value of the query parameter with the provided name. If no parameter exists with the\n   * provided parameter name, then undefined will be returned.\n   */\n  public get(parameterName: string): string | string[] | undefined {\n    return parameterName ? this._rawQuery[parameterName] : undefined;\n  }\n\n  /**\n   * Get the string representation of this query. The return value will not start with a \"?\".\n   */\n  public toString(): string {\n    let result = \"\";\n    for (const parameterName in this._rawQuery) {\n      if (result) {\n        result += \"&\";\n      }\n      const parameterValue = this._rawQuery[parameterName];\n      if (Array.isArray(parameterValue)) {\n        const parameterStrings = [];\n        for (const parameterValueElement of parameterValue) {\n          parameterStrings.push(`${parameterName}=${parameterValueElement}`);\n        }\n        result += parameterStrings.join(\"&\");\n      } else {\n        result += `${parameterName}=${parameterValue}`;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Parse a URLQuery from the provided text.\n   */\n  public static parse(text: string): URLQuery {\n    const result = new URLQuery();\n\n    if (text) {\n      if (text.startsWith(\"?\")) {\n        text = text.substring(1);\n      }\n\n      let currentState: URLQueryParseState = \"ParameterName\";\n\n      let parameterName = \"\";\n      let parameterValue = \"\";\n      for (let i = 0; i < text.length; ++i) {\n        const currentCharacter: string = text[i];\n        switch (currentState) {\n        case \"ParameterName\":\n          switch (currentCharacter) {\n          case \"=\":\n            currentState = \"ParameterValue\";\n            break;\n\n          case \"&\":\n            parameterName = \"\";\n            parameterValue = \"\";\n            break;\n\n          default:\n            parameterName += currentCharacter;\n            break;\n          }\n          break;\n\n        case \"ParameterValue\":\n          switch (currentCharacter) {\n          case \"=\":\n            parameterName = \"\";\n            parameterValue = \"\";\n            currentState = \"Invalid\";\n            break;\n\n          case \"&\":\n            result.set(parameterName, parameterValue);\n            parameterName = \"\";\n            parameterValue = \"\";\n            currentState = \"ParameterName\";\n            break;\n\n          default:\n            parameterValue += currentCharacter;\n            break;\n          }\n          break;\n\n        case \"Invalid\":\n          if (currentCharacter === \"&\") {\n            currentState = \"ParameterName\";\n          }\n          break;\n\n        default:\n          throw new Error(\"Unrecognized URLQuery parse state: \" + currentState);\n        }\n      }\n      if (currentState === \"ParameterValue\") {\n        result.set(parameterName, parameterValue);\n      }\n    }\n\n    return result;\n  }\n}\n\n/**\n * A class that handles creating, modifying, and parsing URLs.\n */\nexport class URLBuilder {\n  private _scheme: string | undefined;\n  private _host: string | undefined;\n  private _port: string | undefined;\n  private _path: string | undefined;\n  private _query: URLQuery | undefined;\n\n  /**\n   * Set the scheme/protocol for this URL. If the provided scheme contains other parts of a URL\n   * (such as a host, port, path, or query), those parts will be added to this URL as well.\n   */\n  public setScheme(scheme: string | undefined): void {\n    if (!scheme) {\n      this._scheme = undefined;\n    } else {\n      this.set(scheme, \"SCHEME\");\n    }\n  }\n\n  /**\n   * Get the scheme that has been set in this URL.\n   */\n  public getScheme(): string | undefined {\n    return this._scheme;\n  }\n\n  /**\n   * Set the host for this URL. If the provided host contains other parts of a URL (such as a\n   * port, path, or query), those parts will be added to this URL as well.\n   */\n  public setHost(host: string | undefined): void {\n    if (!host) {\n      this._host = undefined;\n    } else {\n      this.set(host, \"SCHEME_OR_HOST\");\n    }\n  }\n\n  /**\n   * Get the host that has been set in this URL.\n   */\n  public getHost(): string | undefined {\n    return this._host;\n  }\n\n  /**\n   * Set the port for this URL. If the provided port contains other parts of a URL (such as a\n   * path or query), those parts will be added to this URL as well.\n   */\n  public setPort(port: number | string | undefined): void {\n    if (port == undefined || port === \"\") {\n      this._port = undefined;\n    } else {\n      this.set(port.toString(), \"PORT\");\n    }\n  }\n\n  /**\n   * Get the port that has been set in this URL.\n   */\n  public getPort(): string | undefined {\n    return this._port;\n  }\n\n  /**\n   * Set the path for this URL. If the provided path contains a query, then it will be added to\n   * this URL as well.\n   */\n  public setPath(path: string | undefined): void {\n    if (!path) {\n      this._path = undefined;\n    } else {\n      if (path.indexOf(\"://\") !== -1) {\n        this.set(path, \"SCHEME\");\n      } else {\n        this.set(path, \"PATH\");\n      }\n    }\n  }\n\n  /**\n   * Append the provided path to this URL's existing path. If the provided path contains a query,\n   * then it will be added to this URL as well.\n   */\n  public appendPath(path: string | undefined): void {\n    if (path) {\n      let currentPath: string | undefined = this.getPath();\n      if (currentPath) {\n        if (!currentPath.endsWith(\"/\")) {\n          currentPath += \"/\";\n        }\n\n        if (path.startsWith(\"/\")) {\n          path = path.substring(1);\n        }\n\n        path = currentPath + path;\n      }\n      this.set(path, \"PATH\");\n    }\n  }\n\n  /**\n   * Get the path that has been set in this URL.\n   */\n  public getPath(): string | undefined {\n    return this._path;\n  }\n\n  /**\n   * Set the query in this URL.\n   */\n  public setQuery(query: string | undefined): void {\n    if (!query) {\n      this._query = undefined;\n    } else {\n      this._query = URLQuery.parse(query);\n    }\n  }\n\n  /**\n   * Set a query parameter with the provided name and value in this URL's query. If the provided\n   * query parameter value is undefined or empty, then the query parameter will be removed if it\n   * existed.\n   */\n  public setQueryParameter(queryParameterName: string, queryParameterValue: any): void {\n    if (queryParameterName) {\n      if (!this._query) {\n        this._query = new URLQuery();\n      }\n      this._query.set(queryParameterName, queryParameterValue);\n    }\n  }\n\n  /**\n   * Get the value of the query parameter with the provided query parameter name. If no query\n   * parameter exists with the provided name, then undefined will be returned.\n   */\n  public getQueryParameterValue(queryParameterName: string): string | string[] | undefined {\n    return this._query ? this._query.get(queryParameterName) : undefined;\n  }\n\n  /**\n   * Get the query in this URL.\n   */\n  public getQuery(): string | undefined {\n    return this._query ? this._query.toString() : undefined;\n  }\n\n  /**\n   * Set the parts of this URL by parsing the provided text using the provided startState.\n   */\n  private set(text: string, startState: URLTokenizerState): void {\n    const tokenizer = new URLTokenizer(text, startState);\n\n    while (tokenizer.next()) {\n      const token: URLToken | undefined = tokenizer.current();\n      if (token) {\n        switch (token.type) {\n        case \"SCHEME\":\n          this._scheme = token.text || undefined;\n          break;\n\n        case \"HOST\":\n          this._host = token.text || undefined;\n          break;\n\n        case \"PORT\":\n          this._port = token.text || undefined;\n          break;\n\n        case \"PATH\":\n          const tokenPath: string | undefined = token.text || undefined;\n          if (!this._path || this._path === \"/\" || tokenPath !== \"/\") {\n            this._path = tokenPath;\n          }\n          break;\n\n        case \"QUERY\":\n          this._query = URLQuery.parse(token.text);\n          break;\n\n        default:\n          throw new Error(`Unrecognized URLTokenType: ${token.type}`);\n        }\n      }\n    }\n  }\n\n  public toString(): string {\n    let result = \"\";\n\n    if (this._scheme) {\n      result += `${this._scheme}://`;\n    }\n\n    if (this._host) {\n      result += this._host;\n    }\n\n    if (this._port) {\n      result += `:${this._port}`;\n    }\n\n    if (this._path) {\n      if (!this._path.startsWith(\"/\")) {\n        result += \"/\";\n      }\n      result += this._path;\n    }\n\n    if (this._query && this._query.any()) {\n      result += `?${this._query.toString()}`;\n    }\n\n    return result;\n  }\n\n  /**\n   * If the provided searchValue is found in this URLBuilder, then replace it with the provided\n   * replaceValue.\n   */\n  public replaceAll(searchValue: string, replaceValue: string): void {\n    if (searchValue) {\n      this.setScheme(replaceAll(this.getScheme(), searchValue, replaceValue));\n      this.setHost(replaceAll(this.getHost(), searchValue, replaceValue));\n      this.setPort(replaceAll(this.getPort(), searchValue, replaceValue));\n      this.setPath(replaceAll(this.getPath(), searchValue, replaceValue));\n      this.setQuery(replaceAll(this.getQuery(), searchValue, replaceValue));\n    }\n  }\n\n  public static parse(text: string): URLBuilder {\n    const result = new URLBuilder();\n    result.set(text, \"SCHEME_OR_HOST\");\n    return result;\n  }\n}\n\ntype URLTokenizerState = \"SCHEME\" | \"SCHEME_OR_HOST\" | \"HOST\" | \"PORT\" | \"PATH\" | \"QUERY\" | \"DONE\";\n\ntype URLTokenType = \"SCHEME\" | \"HOST\" | \"PORT\" | \"PATH\" | \"QUERY\";\n\nexport class URLToken {\n  public constructor(public readonly text: string, public readonly type: URLTokenType) {\n  }\n\n  public static scheme(text: string): URLToken {\n    return new URLToken(text, \"SCHEME\");\n  }\n\n  public static host(text: string): URLToken {\n    return new URLToken(text, \"HOST\");\n  }\n\n  public static port(text: string): URLToken {\n    return new URLToken(text, \"PORT\");\n  }\n\n  public static path(text: string): URLToken {\n    return new URLToken(text, \"PATH\");\n  }\n\n  public static query(text: string): URLToken {\n    return new URLToken(text, \"QUERY\");\n  }\n}\n\n/**\n * Get whether or not the provided character (single character string) is an alphanumeric (letter or\n * digit) character.\n */\nexport function isAlphaNumericCharacter(character: string): boolean {\n  const characterCode: number = character.charCodeAt(0);\n  return (48 /* '0' */ <= characterCode && characterCode <= 57 /* '9' */) ||\n    (65 /* 'A' */ <= characterCode && characterCode <= 90 /* 'Z' */) ||\n    (97 /* 'a' */ <= characterCode && characterCode <= 122 /* 'z' */);\n}\n\n/**\n * A class that tokenizes URL strings.\n */\nexport class URLTokenizer {\n  readonly _textLength: number;\n  _currentState: URLTokenizerState;\n  _currentIndex: number;\n  _currentToken: URLToken | undefined;\n\n  public constructor(readonly _text: string, state?: URLTokenizerState) {\n    this._textLength = _text ? _text.length : 0;\n    this._currentState = state != undefined ? state : \"SCHEME_OR_HOST\";\n    this._currentIndex = 0;\n  }\n\n  /**\n   * Get the current URLToken this URLTokenizer is pointing at, or undefined if the URLTokenizer\n   * hasn't started or has finished tokenizing.\n   */\n  public current(): URLToken | undefined {\n    return this._currentToken;\n  }\n\n  /**\n   * Advance to the next URLToken and return whether or not a URLToken was found.\n   */\n  public next(): boolean {\n    if (!hasCurrentCharacter(this)) {\n      this._currentToken = undefined;\n    } else {\n      switch (this._currentState) {\n      case \"SCHEME\":\n        nextScheme(this);\n        break;\n\n      case \"SCHEME_OR_HOST\":\n        nextSchemeOrHost(this);\n        break;\n\n      case \"HOST\":\n        nextHost(this);\n        break;\n\n      case \"PORT\":\n        nextPort(this);\n        break;\n\n      case \"PATH\":\n        nextPath(this);\n        break;\n\n      case \"QUERY\":\n        nextQuery(this);\n        break;\n\n      default:\n        throw new Error(`Unrecognized URLTokenizerState: ${this._currentState}`);\n      }\n    }\n    return !!this._currentToken;\n  }\n}\n\n\n/**\n * Read the remaining characters from this Tokenizer's character stream.\n */\nfunction readRemaining(tokenizer: URLTokenizer): string {\n  let result = \"\";\n  if (tokenizer._currentIndex < tokenizer._textLength) {\n    result = tokenizer._text.substring(tokenizer._currentIndex);\n    tokenizer._currentIndex = tokenizer._textLength;\n  }\n  return result;\n}\n\n/**\n * Whether or not this URLTokenizer has a current character.\n */\nfunction hasCurrentCharacter(tokenizer: URLTokenizer): boolean {\n  return tokenizer._currentIndex < tokenizer._textLength;\n}\n\n/**\n * Get the character in the text string at the current index.\n */\nfunction getCurrentCharacter(tokenizer: URLTokenizer): string {\n  return tokenizer._text[tokenizer._currentIndex];\n}\n\n/**\n * Advance to the character in text that is \"step\" characters ahead. If no step value is provided,\n * then step will default to 1.\n */\nfunction nextCharacter(tokenizer: URLTokenizer, step?: number): void {\n  if (hasCurrentCharacter(tokenizer)) {\n    if (!step) {\n      step = 1;\n    }\n    tokenizer._currentIndex += step;\n  }\n}\n\n/**\n * Starting with the current character, peek \"charactersToPeek\" number of characters ahead in this\n * Tokenizer's stream of characters.\n */\nfunction peekCharacters(tokenizer: URLTokenizer, charactersToPeek: number): string {\n  let endIndex: number = tokenizer._currentIndex + charactersToPeek;\n  if (tokenizer._textLength < endIndex) {\n    endIndex = tokenizer._textLength;\n  }\n  return tokenizer._text.substring(tokenizer._currentIndex, endIndex);\n}\n\n/**\n * Read characters from this Tokenizer until the end of the stream or until the provided condition\n * is false when provided the current character.\n */\nfunction readWhile(tokenizer: URLTokenizer, condition: (character: string) => boolean): string {\n  let result = \"\";\n\n  while (hasCurrentCharacter(tokenizer)) {\n    const currentCharacter: string = getCurrentCharacter(tokenizer);\n    if (!condition(currentCharacter)) {\n      break;\n    } else {\n      result += currentCharacter;\n      nextCharacter(tokenizer);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Read characters from this Tokenizer until a non-alphanumeric character or the end of the\n * character stream is reached.\n */\nfunction readWhileLetterOrDigit(tokenizer: URLTokenizer): string {\n  return readWhile(tokenizer, (character: string) => isAlphaNumericCharacter(character));\n}\n\n/**\n * Read characters from this Tokenizer until one of the provided terminating characters is read or\n * the end of the character stream is reached.\n */\nfunction readUntilCharacter(tokenizer: URLTokenizer, ...terminatingCharacters: string[]): string {\n  return readWhile(tokenizer, (character: string) => terminatingCharacters.indexOf(character) === -1);\n}\n\nfunction nextScheme(tokenizer: URLTokenizer): void {\n  const scheme: string = readWhileLetterOrDigit(tokenizer);\n  tokenizer._currentToken = URLToken.scheme(scheme);\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else {\n    tokenizer._currentState = \"HOST\";\n  }\n}\n\nfunction nextSchemeOrHost(tokenizer: URLTokenizer): void {\n  const schemeOrHost: string = readUntilCharacter(tokenizer, \":\", \"/\", \"?\");\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentToken = URLToken.host(schemeOrHost);\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \":\") {\n    if (peekCharacters(tokenizer, 3) === \"://\") {\n      tokenizer._currentToken = URLToken.scheme(schemeOrHost);\n      tokenizer._currentState = \"HOST\";\n    } else {\n      tokenizer._currentToken = URLToken.host(schemeOrHost);\n      tokenizer._currentState = \"PORT\";\n    }\n  } else {\n    tokenizer._currentToken = URLToken.host(schemeOrHost);\n    if (getCurrentCharacter(tokenizer) === \"/\") {\n      tokenizer._currentState = \"PATH\";\n    } else {\n      tokenizer._currentState = \"QUERY\";\n    }\n  }\n}\n\nfunction nextHost(tokenizer: URLTokenizer): void {\n  if (peekCharacters(tokenizer, 3) === \"://\") {\n    nextCharacter(tokenizer, 3);\n  }\n\n  const host: string = readUntilCharacter(tokenizer, \":\", \"/\", \"?\");\n  tokenizer._currentToken = URLToken.host(host);\n\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \":\") {\n    tokenizer._currentState = \"PORT\";\n  } else if (getCurrentCharacter(tokenizer) === \"/\") {\n    tokenizer._currentState = \"PATH\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\n\nfunction nextPort(tokenizer: URLTokenizer): void {\n  if (getCurrentCharacter(tokenizer) === \":\") {\n    nextCharacter(tokenizer);\n  }\n\n  const port: string = readUntilCharacter(tokenizer, \"/\", \"?\");\n  tokenizer._currentToken = URLToken.port(port);\n\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \"/\") {\n    tokenizer._currentState = \"PATH\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\n\nfunction nextPath(tokenizer: URLTokenizer): void {\n  const path: string = readUntilCharacter(tokenizer, \"?\");\n  tokenizer._currentToken = URLToken.path(path);\n\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\n\nfunction nextQuery(tokenizer: URLTokenizer): void {\n  if (getCurrentCharacter(tokenizer) === \"?\") {\n    nextCharacter(tokenizer);\n  }\n\n  const query: string = readRemaining(tokenizer);\n  tokenizer._currentToken = URLToken.query(query);\n  tokenizer._currentState = \"DONE\";\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { URLBuilder } from \"../url\";\nimport { WebResourceLike } from \"../webResource\";\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyFactory, RequestPolicyOptionsLike } from \"./requestPolicy\";\n\nexport function redirectPolicy(maximumRetries = 20): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptionsLike) => {\n      return new RedirectPolicy(nextPolicy, options, maximumRetries);\n    }\n  };\n}\n\nexport class RedirectPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptionsLike, readonly maxRetries = 20) {\n    super(nextPolicy, options);\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(request).then(response => handleRedirect(this, response, 0));\n  }\n}\n\nfunction handleRedirect(policy: RedirectPolicy, response: HttpOperationResponse, currentRetries: number): Promise<HttpOperationResponse> {\n  const { request, status } = response;\n  const locationHeader = response.headers.get(\"location\");\n  if (locationHeader &&\n    (status === 300 || status === 307 || (status === 303 && request.method === \"POST\")) &&\n    (!policy.maxRetries || currentRetries < policy.maxRetries)) {\n\n    const builder = URLBuilder.parse(request.url);\n    builder.setPath(locationHeader);\n    request.url = builder.toString();\n\n    // POST request with Status code 303 should be converted into a\n    // redirected GET request if the redirect url is present in the location header\n    if (status === 303) {\n      request.method = \"GET\";\n    }\n\n    return policy._nextPolicy.sendRequest(request)\n      .then(res => handleRedirect(policy, res, currentRetries + 1));\n  }\n\n  return Promise.resolve(response);\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport * as utils from \"../util/utils\";\nimport { WebResourceLike } from \"../webResource\";\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyFactory, RequestPolicyOptionsLike } from \"./requestPolicy\";\n\nexport function rpRegistrationPolicy(retryTimeout = 30): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptionsLike) => {\n      return new RPRegistrationPolicy(nextPolicy, options, retryTimeout);\n    }\n  };\n}\n\nexport class RPRegistrationPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptionsLike, readonly _retryTimeout = 30) {\n    super(nextPolicy, options);\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(request.clone())\n      .then(response => registerIfNeeded(this, request, response));\n  }\n}\n\n\nfunction registerIfNeeded(policy: RPRegistrationPolicy, request: WebResourceLike, response: HttpOperationResponse): Promise<HttpOperationResponse> {\n  if (response.status === 409) {\n    const rpName = checkRPNotRegisteredError(response.bodyAsText as string);\n    if (rpName) {\n      const urlPrefix = extractSubscriptionUrl(request.url);\n      return registerRP(policy, urlPrefix, rpName, request)\n        // Autoregistration of ${provider} failed for some reason. We will not return this error\n        // instead will return the initial response with 409 status code back to the user.\n        // do nothing here as we are returning the original response at the end of this method.\n        .catch(() => false)\n        .then(registrationStatus => {\n          if (registrationStatus) {\n            // Retry the original request. We have to change the x-ms-client-request-id\n            // otherwise Azure endpoint will return the initial 409 (cached) response.\n            request.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n            return policy._nextPolicy.sendRequest(request.clone());\n          }\n          return response;\n        });\n    }\n  }\n\n  return Promise.resolve(response);\n}\n\n/**\n * Reuses the headers of the original request and url (if specified).\n * @param {WebResourceLike} originalRequest The original request\n * @param {boolean} reuseUrlToo Should the url from the original request be reused as well. Default false.\n * @returns {object} A new request object with desired headers.\n */\nfunction getRequestEssentials(originalRequest: WebResourceLike, reuseUrlToo = false): WebResourceLike {\n  const reqOptions: WebResourceLike = originalRequest.clone();\n  if (reuseUrlToo) {\n    reqOptions.url = originalRequest.url;\n  }\n\n  // We have to change the x-ms-client-request-id otherwise Azure endpoint\n  // will return the initial 409 (cached) response.\n  reqOptions.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n\n  // Set content-type to application/json\n  reqOptions.headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n\n  return reqOptions;\n}\n\n/**\n * Validates the error code and message associated with 409 response status code. If it matches to that of\n * RP not registered then it returns the name of the RP else returns undefined.\n * @param {string} body The response body received after making the original request.\n * @returns {string} The name of the RP if condition is satisfied else undefined.\n */\nfunction checkRPNotRegisteredError(body: string): string {\n  let result, responseBody;\n  if (body) {\n    try {\n      responseBody = JSON.parse(body);\n    } catch (err) {\n      // do nothing;\n    }\n    if (responseBody && responseBody.error && responseBody.error.message &&\n      responseBody.error.code && responseBody.error.code === \"MissingSubscriptionRegistration\") {\n      const matchRes = responseBody.error.message.match(/.*'(.*)'/i);\n      if (matchRes) {\n        result = matchRes.pop();\n      }\n    }\n  }\n  return result;\n}\n\n/**\n * Extracts the first part of the URL, just after subscription:\n * https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param {string} url The original request url\n * @returns {string} The url prefix as explained above.\n */\nfunction extractSubscriptionUrl(url: string): string {\n  let result;\n  const matchRes = url.match(/.*\\/subscriptions\\/[a-f0-9-]+\\//ig);\n  if (matchRes && matchRes[0]) {\n    result = matchRes[0];\n  } else {\n    throw new Error(`Unable to extract subscriptionId from the given url - ${url}.`);\n  }\n  return result;\n}\n\n/**\n * Registers the given provider.\n * @param {RPRegistrationPolicy} policy The RPRegistrationPolicy this function is being called against.\n * @param {string} urlPrefix https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param {string} provider The provider name to be registered.\n * @param {WebResourceLike} originalRequest The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n * @param {registrationCallback} callback The callback that handles the RP registration\n */\nfunction registerRP(policy: RPRegistrationPolicy, urlPrefix: string, provider: string, originalRequest: WebResourceLike): Promise<boolean> {\n  const postUrl = `${urlPrefix}providers/${provider}/register?api-version=2016-02-01`;\n  const getUrl = `${urlPrefix}providers/${provider}?api-version=2016-02-01`;\n  const reqOptions = getRequestEssentials(originalRequest);\n  reqOptions.method = \"POST\";\n  reqOptions.url = postUrl;\n\n  return policy._nextPolicy.sendRequest(reqOptions)\n    .then(response => {\n      if (response.status !== 200) {\n        throw new Error(`Autoregistration of ${provider} failed. Please try registering manually.`);\n      }\n      return getRegistrationStatus(policy, getUrl, originalRequest);\n    });\n}\n\n/**\n * Polls the registration status of the provider that was registered. Polling happens at an interval of 30 seconds.\n * Polling will happen till the registrationState property of the response body is \"Registered\".\n * @param {RPRegistrationPolicy} policy The RPRegistrationPolicy this function is being called against.\n * @param {string} url The request url for polling\n * @param {WebResourceLike} originalRequest The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n * @returns {Promise<boolean>} True if RP Registration is successful.\n */\nfunction getRegistrationStatus(policy: RPRegistrationPolicy, url: string, originalRequest: WebResourceLike): Promise<boolean> {\n  const reqOptions: any = getRequestEssentials(originalRequest);\n  reqOptions.url = url;\n  reqOptions.method = \"GET\";\n\n  return policy._nextPolicy.sendRequest(reqOptions).then(res => {\n    const obj = (res.parsedBody as any);\n    if (res.parsedBody && obj.registrationState && obj.registrationState === \"Registered\") {\n      return true;\n    } else {\n      return utils.delay(policy._retryTimeout * 1000).then(() => getRegistrationStatus(policy, url, originalRequest));\n    }\n  });\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { ServiceClientCredentials } from \"../credentials/serviceClientCredentials\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResourceLike } from \"../webResource\";\nimport { BaseRequestPolicy, RequestPolicyFactory, RequestPolicy, RequestPolicyOptionsLike } from \"./requestPolicy\";\n\nexport function signingPolicy(authenticationProvider: ServiceClientCredentials): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptionsLike) => {\n      return new SigningPolicy(nextPolicy, options, authenticationProvider);\n    }\n  };\n}\n\nexport class SigningPolicy extends BaseRequestPolicy {\n\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptionsLike, public authenticationProvider: ServiceClientCredentials) {\n    super(nextPolicy, options);\n  }\n\n  signRequest(request: WebResourceLike): Promise<WebResourceLike> {\n    return this.authenticationProvider.signRequest(request);\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    return this.signRequest(request).then(nextRequest => this._nextPolicy.sendRequest(nextRequest));\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport * as utils from \"../util/utils\";\nimport { WebResourceLike } from \"../webResource\";\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyFactory, RequestPolicyOptionsLike } from \"./requestPolicy\";\n\nexport interface RetryData {\n  retryCount: number;\n  retryInterval: number;\n  error?: RetryError;\n}\n\nexport interface RetryError extends Error {\n  message: string;\n  code?: string;\n  innerError?: RetryError;\n}\n\nexport function systemErrorRetryPolicy(retryCount?: number, retryInterval?: number, minRetryInterval?: number, maxRetryInterval?: number): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptionsLike) => {\n      return new SystemErrorRetryPolicy(nextPolicy, options, retryCount, retryInterval, minRetryInterval, maxRetryInterval);\n    }\n  };\n}\n\n/**\n * @class\n * Instantiates a new \"ExponentialRetryPolicyFilter\" instance.\n *\n * @constructor\n * @param {number} retryCount        The client retry count.\n * @param {number} retryInterval     The client retry interval, in milliseconds.\n * @param {number} minRetryInterval  The minimum retry interval, in milliseconds.\n * @param {number} maxRetryInterval  The maximum retry interval, in milliseconds.\n */\nexport class SystemErrorRetryPolicy extends BaseRequestPolicy {\n  retryCount: number;\n  retryInterval: number;\n  minRetryInterval: number;\n  maxRetryInterval: number;\n  DEFAULT_CLIENT_RETRY_INTERVAL = 1000 * 30;\n  DEFAULT_CLIENT_RETRY_COUNT = 3;\n  DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 90;\n  DEFAULT_CLIENT_MIN_RETRY_INTERVAL = 1000 * 3;\n\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptionsLike, retryCount?: number, retryInterval?: number, minRetryInterval?: number, maxRetryInterval?: number) {\n    super(nextPolicy, options);\n    this.retryCount = typeof retryCount === \"number\" ? retryCount : this.DEFAULT_CLIENT_RETRY_COUNT;\n    this.retryInterval = typeof retryInterval === \"number\" ? retryInterval : this.DEFAULT_CLIENT_RETRY_INTERVAL;\n    this.minRetryInterval = typeof minRetryInterval === \"number\" ? minRetryInterval : this.DEFAULT_CLIENT_MIN_RETRY_INTERVAL;\n    this.maxRetryInterval = typeof maxRetryInterval === \"number\" ? maxRetryInterval : this.DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(request.clone()).then(response => retry(this, request, response));\n  }\n}\n\n/**\n * Determines if the operation should be retried and how long to wait until the next retry.\n *\n * @param {number} statusCode The HTTP status code.\n * @param {RetryData} retryData  The retry data.\n * @return {boolean} True if the operation qualifies for a retry; false otherwise.\n */\nfunction shouldRetry(policy: SystemErrorRetryPolicy, retryData: RetryData): boolean {\n  let currentCount;\n  if (!retryData) {\n    throw new Error(\"retryData for the SystemErrorRetryPolicyFilter cannot be null.\");\n  } else {\n    currentCount = (retryData && retryData.retryCount);\n  }\n  return (currentCount < policy.retryCount);\n}\n\n/**\n * Updates the retry data for the next attempt.\n *\n * @param {RetryData} retryData  The retry data.\n * @param {object} err        The operation\"s error, if any.\n */\nfunction updateRetryData(policy: SystemErrorRetryPolicy, retryData?: RetryData, err?: RetryError): RetryData {\n  if (!retryData) {\n    retryData = {\n      retryCount: 0,\n      retryInterval: 0\n    };\n  }\n\n  if (err) {\n    if (retryData.error) {\n      err.innerError = retryData.error;\n    }\n\n    retryData.error = err;\n  }\n\n  // Adjust retry count\n  retryData.retryCount++;\n\n  // Adjust retry interval\n  let incrementDelta = Math.pow(2, retryData.retryCount) - 1;\n  const boundedRandDelta = policy.retryInterval * 0.8 +\n    Math.floor(Math.random() * (policy.retryInterval * 1.2 - policy.retryInterval * 0.8));\n  incrementDelta *= boundedRandDelta;\n\n  retryData.retryInterval = Math.min(policy.minRetryInterval + incrementDelta, policy.maxRetryInterval);\n\n  return retryData;\n}\n\nfunction retry(policy: SystemErrorRetryPolicy, request: WebResourceLike, operationResponse: HttpOperationResponse, retryData?: RetryData, err?: RetryError): Promise<HttpOperationResponse> {\n  retryData = updateRetryData(policy, retryData, err);\n  if (err && err.code && shouldRetry(policy, retryData) &&\n    (err.code === \"ETIMEDOUT\" || err.code === \"ESOCKETTIMEDOUT\" || err.code === \"ECONNREFUSED\" ||\n      err.code === \"ECONNRESET\" || err.code === \"ENOENT\")) {\n    // If previous operation ended with an error and the policy allows a retry, do that\n    return utils.delay(retryData.retryInterval)\n        .then(() => policy._nextPolicy.sendRequest(request.clone()))\n        .then(res => retry(policy, request, res, retryData, err))\n        .catch(err => retry(policy, request, operationResponse, retryData, err));\n  } else {\n    if (err != undefined) {\n      // If the operation failed in the end, return all errors instead of just the last one\n      err = retryData.error;\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationResponse);\n  }\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\n/**\n * The format that will be used to join an array of values together for a query parameter value.\n */\nexport enum QueryCollectionFormat {\n  Csv = \",\",\n  Ssv = \" \",\n  Tsv = \"\\t\",\n  Pipes = \"|\",\n  Multi = \"Multi\",\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { AgentSettings } from \"../serviceClient\";\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyFactory, RequestPolicyOptionsLike } from \"./requestPolicy\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResourceLike } from \"../webResource\";\n\nconst agentNotSupportedInBrowser = new Error(\"AgentPolicy is not supported in browser environment\");\n\nexport function agentPolicy(_agentSettings?: AgentSettings): RequestPolicyFactory {\n  return {\n    create: (_nextPolicy: RequestPolicy, _options: RequestPolicyOptionsLike) => {\n      throw agentNotSupportedInBrowser;\n    }\n  };\n}\n\nexport class AgentPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptionsLike) {\n    super(nextPolicy, options);\n    throw agentNotSupportedInBrowser;\n  }\n\n  public sendRequest(_request: WebResourceLike): Promise<HttpOperationResponse> {\n    throw agentNotSupportedInBrowser;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { ProxySettings } from \"../serviceClient\";\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyFactory, RequestPolicyOptionsLike } from \"./requestPolicy\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResourceLike } from \"../webResource\";\n\nconst proxyNotSupportedInBrowser = new Error(\"ProxyPolicy is not supported in browser environment\");\n\nexport function getDefaultProxySettings(_proxyUrl?: string): ProxySettings | undefined {\n  return undefined;\n}\n\nexport function proxyPolicy(_proxySettings?: ProxySettings): RequestPolicyFactory {\n  return {\n    create: (_nextPolicy: RequestPolicy, _options: RequestPolicyOptionsLike) => {\n      throw proxyNotSupportedInBrowser;\n    }\n  };\n}\n\nexport class ProxyPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptionsLike) {\n    super(nextPolicy, options);\n    throw proxyNotSupportedInBrowser;\n  }\n\n  public sendRequest(_request: WebResourceLike): Promise<HttpOperationResponse> {\n    throw proxyNotSupportedInBrowser;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyOptionsLike, RequestPolicyFactory } from \"./requestPolicy\";\nimport { WebResourceLike } from \"../webResource\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { Constants } from \"../util/constants\";\nimport { delay } from \"../util/utils\";\n\ntype ResponseHandler = (httpRequest: WebResourceLike, response: HttpOperationResponse) => Promise<HttpOperationResponse>;\nconst StatusCodes = Constants.HttpConstants.StatusCodes;\n\nexport function throttlingRetryPolicy(): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptionsLike) => {\n      return new ThrottlingRetryPolicy(nextPolicy, options);\n    }\n  };\n}\n\n/**\n * To learn more, please refer to\n * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,\n * https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits and\n * https://docs.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors\n */\nexport class ThrottlingRetryPolicy extends BaseRequestPolicy {\n  private _handleResponse: ResponseHandler;\n\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptionsLike, _handleResponse?: ResponseHandler) {\n    super(nextPolicy, options);\n    this._handleResponse = _handleResponse || this._defaultResponseHandler;\n  }\n\n  public async sendRequest(httpRequest: WebResourceLike): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(httpRequest.clone()).then(response => {\n      if (response.status !== StatusCodes.TooManyRequests) {\n        return response;\n      } else {\n        return this._handleResponse(httpRequest, response);\n      }\n    });\n  }\n\n  private async _defaultResponseHandler(httpRequest: WebResourceLike, httpResponse: HttpOperationResponse): Promise<HttpOperationResponse> {\n    const retryAfterHeader: string | undefined = httpResponse.headers.get(Constants.HeaderConstants.RETRY_AFTER);\n\n    if (retryAfterHeader) {\n      const delayInMs: number | undefined = ThrottlingRetryPolicy.parseRetryAfterHeader(retryAfterHeader);\n      if (delayInMs) {\n        return delay(delayInMs).then((_: any) => this._nextPolicy.sendRequest(httpRequest));\n      }\n    }\n\n    return httpResponse;\n  }\n\n  public static parseRetryAfterHeader(headerValue: string): number | undefined {\n    const retryAfterInSeconds = Number(headerValue);\n    if (Number.isNaN(retryAfterInSeconds)) {\n      return ThrottlingRetryPolicy.parseDateRetryAfterHeader(headerValue);\n    } else {\n      return retryAfterInSeconds * 1000;\n    }\n  }\n\n  public static parseDateRetryAfterHeader(headerValue: string): number | undefined {\n    try {\n      const now: number = Date.now();\n      const date: number = Date.parse(headerValue);\n      const diff = date - now;\n\n      return Number.isNaN(diff) ? undefined : diff;\n    } catch (error) {\n      return undefined;\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { ServiceClientCredentials } from \"./credentials/serviceClientCredentials\";\nimport { DefaultHttpClient } from \"./defaultHttpClient\";\nimport { HttpClient } from \"./httpClient\";\nimport { HttpOperationResponse, RestResponse } from \"./httpOperationResponse\";\nimport { HttpPipelineLogger } from \"./httpPipelineLogger\";\nimport { OperationArguments } from \"./operationArguments\";\nimport { getPathStringFromParameter, getPathStringFromParameterPath, OperationParameter, ParameterPath } from \"./operationParameter\";\nimport { isStreamOperation, OperationSpec } from \"./operationSpec\";\nimport { deserializationPolicy, DeserializationContentTypes } from \"./policies/deserializationPolicy\";\nimport { exponentialRetryPolicy } from \"./policies/exponentialRetryPolicy\";\nimport { generateClientRequestIdPolicy } from \"./policies/generateClientRequestIdPolicy\";\nimport { userAgentPolicy, getDefaultUserAgentHeaderName, getDefaultUserAgentValue } from \"./policies/userAgentPolicy\";\nimport { redirectPolicy } from \"./policies/redirectPolicy\";\nimport { RequestPolicy, RequestPolicyFactory, RequestPolicyOptions, RequestPolicyOptionsLike } from \"./policies/requestPolicy\";\nimport { rpRegistrationPolicy } from \"./policies/rpRegistrationPolicy\";\nimport { signingPolicy } from \"./policies/signingPolicy\";\nimport { systemErrorRetryPolicy } from \"./policies/systemErrorRetryPolicy\";\nimport { QueryCollectionFormat } from \"./queryCollectionFormat\";\nimport { CompositeMapper, DictionaryMapper, Mapper, MapperType, Serializer } from \"./serializer\";\nimport { URLBuilder } from \"./url\";\nimport * as utils from \"./util/utils\";\nimport { stringifyXML } from \"./util/xml\";\nimport { RequestOptionsBase, RequestPrepareOptions, WebResourceLike, isWebResourceLike, WebResource } from \"./webResource\";\nimport { OperationResponse } from \"./operationResponse\";\nimport { ServiceCallback } from \"./util/utils\";\nimport { agentPolicy } from \"./policies/agentPolicy\";\nimport { proxyPolicy, getDefaultProxySettings } from \"./policies/proxyPolicy\";\nimport { throttlingRetryPolicy } from \"./policies/throttlingRetryPolicy\";\nimport { Agent } from \"http\";\n\n\n/**\n * HTTP proxy settings (Node.js only)\n */\nexport interface ProxySettings {\n  host: string;\n  port: number;\n  username?: string;\n  password?: string;\n}\n\n/**\n * HTTP and HTTPS agents (Node.js only)\n */\nexport interface AgentSettings {\n  http: Agent;\n  https: Agent;\n}\n\n/**\n * Options to be provided while creating the client.\n */\nexport interface ServiceClientOptions {\n  /**\n   * An array of factories which get called to create the RequestPolicy pipeline used to send a HTTP\n   * request on the wire, or a function that takes in the defaultRequestPolicyFactories and returns\n   * the requestPolicyFactories that will be used.\n   */\n  requestPolicyFactories?: RequestPolicyFactory[] | ((defaultRequestPolicyFactories: RequestPolicyFactory[]) => (void | RequestPolicyFactory[]));\n  /**\n   * The HttpClient that will be used to send HTTP requests.\n   */\n  httpClient?: HttpClient;\n  /**\n   * The HttpPipelineLogger that can be used to debug RequestPolicies within the HTTP pipeline.\n   */\n  httpPipelineLogger?: HttpPipelineLogger;\n  /**\n   * If set to true, turn off the default retry policy.\n   */\n  noRetryPolicy?: boolean;\n  /**\n   * Gets or sets the retry timeout in seconds for AutomaticRPRegistration. Default value is 30.\n   */\n  rpRegistrationRetryTimeout?: number;\n  /**\n   * Whether or not to generate a client request ID header for each HTTP request.\n   */\n  generateClientRequestIdHeader?: boolean;\n  /**\n   * Whether to include credentials in CORS requests in the browser.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials for more information.\n   */\n  withCredentials?: boolean;\n  /**\n   * If specified, a GenerateRequestIdPolicy will be added to the HTTP pipeline that will add a\n   * header to all outgoing requests with this header name and a random UUID as the request ID.\n   */\n  clientRequestIdHeaderName?: string;\n  /**\n   * The content-types that will be associated with JSON or XML serialization.\n   */\n  deserializationContentTypes?: DeserializationContentTypes;\n  /**\n   * The header name to use for the telemetry header while sending the request. If this is not\n   * specified, then \"User-Agent\" will be used when running on Node.js and \"x-ms-command-name\" will\n   * be used when running in a browser.\n   */\n  userAgentHeaderName?: string | ((defaultUserAgentHeaderName: string) => string);\n  /**\n   * The string to be set to the telemetry header while sending the request, or a function that\n   * takes in the default user-agent string and returns the user-agent string that will be used.\n   */\n  userAgent?: string | ((defaultUserAgent: string) => string);\n  /**\n   * Proxy settings which will be used for every HTTP request (Node.js only).\n   */\n  proxySettings?: ProxySettings;\n  /**\n   * HTTP and HTTPS agents which will be used for every HTTP request (Node.js only).\n   */\n  agentSettings?: AgentSettings;\n}\n\n/**\n * @class\n * Initializes a new instance of the ServiceClient.\n */\nexport class ServiceClient {\n  /**\n   * If specified, this is the base URI that requests will be made against for this ServiceClient.\n   * If it is not specified, then all OperationSpecs must contain a baseUrl property.\n   */\n  protected baseUri?: string;\n\n  /**\n   * The default request content type for the service.\n   * Used if no requestContentType is present on an OperationSpec.\n   */\n  protected requestContentType?: string;\n\n\n  /**\n   * The HTTP client that will be used to send requests.\n   */\n  private readonly _httpClient: HttpClient;\n  private readonly _requestPolicyOptions: RequestPolicyOptionsLike;\n\n  private readonly _requestPolicyFactories: RequestPolicyFactory[];\n  private readonly _withCredentials: boolean;\n\n  /**\n   * The ServiceClient constructor\n   * @constructor\n   * @param {ServiceClientCredentials} [credentials] The credentials object used for authentication.\n   * @param {ServiceClientOptions} [options] The service client options that govern the behavior of the client.\n   */\n  constructor(credentials?: ServiceClientCredentials, options?: ServiceClientOptions) {\n    if (!options) {\n      options = {};\n    }\n\n    if (credentials && !credentials.signRequest) {\n      throw new Error(\"credentials argument needs to implement signRequest method\");\n    }\n\n    this._withCredentials = options.withCredentials || false;\n    this._httpClient = options.httpClient || new DefaultHttpClient();\n    this._requestPolicyOptions = new RequestPolicyOptions(options.httpPipelineLogger);\n\n    let requestPolicyFactories: RequestPolicyFactory[];\n    if (Array.isArray(options.requestPolicyFactories)) {\n      requestPolicyFactories = options.requestPolicyFactories;\n    } else {\n      requestPolicyFactories = createDefaultRequestPolicyFactories(credentials, options);\n      if (options.requestPolicyFactories) {\n        const newRequestPolicyFactories: void | RequestPolicyFactory[] = options.requestPolicyFactories(requestPolicyFactories);\n        if (newRequestPolicyFactories) {\n          requestPolicyFactories = newRequestPolicyFactories;\n        }\n      }\n    }\n    this._requestPolicyFactories = requestPolicyFactories;\n  }\n\n  /**\n   * Send the provided httpRequest.\n   */\n  sendRequest(options: RequestPrepareOptions | WebResourceLike): Promise<HttpOperationResponse> {\n    if (options === null || options === undefined || typeof options !== \"object\") {\n      throw new Error(\"options cannot be null or undefined and it must be of type object.\");\n    }\n\n    let httpRequest: WebResourceLike;\n    try {\n      if (isWebResourceLike(options)) {\n        options.validateRequestProperties();\n        httpRequest = options;\n      } else {\n        httpRequest = new WebResource();\n        httpRequest = httpRequest.prepare(options);\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    let httpPipeline: RequestPolicy = this._httpClient;\n    if (this._requestPolicyFactories && this._requestPolicyFactories.length > 0) {\n      for (let i = this._requestPolicyFactories.length - 1; i >= 0; --i) {\n        httpPipeline = this._requestPolicyFactories[i].create(httpPipeline, this._requestPolicyOptions);\n      }\n    }\n    return httpPipeline.sendRequest(httpRequest);\n  }\n\n  /**\n   * Send an HTTP request that is populated using the provided OperationSpec.\n   * @param {OperationArguments} operationArguments The arguments that the HTTP request's templated values will be populated from.\n   * @param {OperationSpec} operationSpec The OperationSpec to use to populate the httpRequest.\n   * @param {ServiceCallback} callback The callback to call when the response is received.\n   */\n  sendOperationRequest(operationArguments: OperationArguments, operationSpec: OperationSpec, callback?: ServiceCallback<any>): Promise<RestResponse> {\n    if (typeof operationArguments.options === \"function\") {\n      callback = operationArguments.options;\n      operationArguments.options = undefined;\n    }\n\n    const httpRequest = new WebResource();\n\n    let result: Promise<RestResponse>;\n    try {\n      const baseUri: string | undefined = operationSpec.baseUrl || this.baseUri;\n      if (!baseUri) {\n        throw new Error(\"If operationSpec.baseUrl is not specified, then the ServiceClient must have a baseUri string property that contains the base URL to use.\");\n      }\n\n      httpRequest.method = operationSpec.httpMethod;\n      httpRequest.operationSpec = operationSpec;\n\n      const requestUrl: URLBuilder = URLBuilder.parse(baseUri);\n      if (operationSpec.path) {\n        requestUrl.appendPath(operationSpec.path);\n      }\n      if (operationSpec.urlParameters && operationSpec.urlParameters.length > 0) {\n        for (const urlParameter of operationSpec.urlParameters) {\n          let urlParameterValue: string = getOperationArgumentValueFromParameter(this, operationArguments, urlParameter, operationSpec.serializer);\n          urlParameterValue = operationSpec.serializer.serialize(urlParameter.mapper, urlParameterValue, getPathStringFromParameter(urlParameter));\n          if (!urlParameter.skipEncoding) {\n            urlParameterValue = encodeURIComponent(urlParameterValue);\n          }\n          requestUrl.replaceAll(`{${urlParameter.mapper.serializedName || getPathStringFromParameter(urlParameter)}}`, urlParameterValue);\n        }\n      }\n      if (operationSpec.queryParameters && operationSpec.queryParameters.length > 0) {\n        for (const queryParameter of operationSpec.queryParameters) {\n          let queryParameterValue: any = getOperationArgumentValueFromParameter(this, operationArguments, queryParameter, operationSpec.serializer);\n          if (queryParameterValue != undefined) {\n            queryParameterValue = operationSpec.serializer.serialize(queryParameter.mapper, queryParameterValue, getPathStringFromParameter(queryParameter));\n            if (queryParameter.collectionFormat != undefined) {\n              if (queryParameter.collectionFormat === QueryCollectionFormat.Multi) {\n                if (queryParameterValue.length === 0) {\n                  queryParameterValue = \"\";\n                } else {\n                  for (const index in queryParameterValue) {\n                    const item = queryParameterValue[index];\n                    queryParameterValue[index] = item == undefined ? \"\" : item.toString();\n                  }\n                }\n              } else if (queryParameter.collectionFormat === QueryCollectionFormat.Ssv || queryParameter.collectionFormat === QueryCollectionFormat.Tsv) {\n                queryParameterValue = queryParameterValue.join(queryParameter.collectionFormat);\n              }\n            }\n            if (!queryParameter.skipEncoding) {\n              if (Array.isArray(queryParameterValue)) {\n                for (const index in queryParameterValue) {\n                  if (queryParameterValue[index] !== undefined && queryParameterValue[index] !== null) {\n                    queryParameterValue[index] = encodeURIComponent(queryParameterValue[index]);\n                  }\n                }\n              }\n              else {\n                queryParameterValue = encodeURIComponent(queryParameterValue);\n              }\n            }\n            if (queryParameter.collectionFormat != undefined && queryParameter.collectionFormat !== QueryCollectionFormat.Multi && queryParameter.collectionFormat !== QueryCollectionFormat.Ssv && queryParameter.collectionFormat !== QueryCollectionFormat.Tsv) {\n              queryParameterValue = queryParameterValue.join(queryParameter.collectionFormat);\n            }\n            requestUrl.setQueryParameter(queryParameter.mapper.serializedName || getPathStringFromParameter(queryParameter), queryParameterValue);\n          }\n        }\n      }\n      httpRequest.url = requestUrl.toString();\n\n      const contentType = operationSpec.contentType || this.requestContentType;\n      if (contentType) {\n        httpRequest.headers.set(\"Content-Type\", contentType);\n      }\n\n      if (operationSpec.headerParameters) {\n        for (const headerParameter of operationSpec.headerParameters) {\n          let headerValue: any = getOperationArgumentValueFromParameter(this, operationArguments, headerParameter, operationSpec.serializer);\n          if (headerValue != undefined) {\n            headerValue = operationSpec.serializer.serialize(headerParameter.mapper, headerValue, getPathStringFromParameter(headerParameter));\n            const headerCollectionPrefix = (headerParameter.mapper as DictionaryMapper).headerCollectionPrefix;\n            if (headerCollectionPrefix) {\n              for (const key of Object.keys(headerValue)) {\n                httpRequest.headers.set(headerCollectionPrefix + key, headerValue[key]);\n              }\n            } else {\n              httpRequest.headers.set(headerParameter.mapper.serializedName || getPathStringFromParameter(headerParameter), headerValue);\n            }\n          }\n        }\n      }\n\n      const options: RequestOptionsBase | undefined = operationArguments.options;\n      if (options) {\n        if (options.customHeaders) {\n          for (const customHeaderName in options.customHeaders) {\n            httpRequest.headers.set(customHeaderName, options.customHeaders[customHeaderName]);\n          }\n        }\n\n        if (options.abortSignal) {\n          httpRequest.abortSignal = options.abortSignal;\n        }\n\n        if (options.timeout) {\n          httpRequest.timeout = options.timeout;\n        }\n\n        if (options.onUploadProgress) {\n          httpRequest.onUploadProgress = options.onUploadProgress;\n        }\n\n        if (options.onDownloadProgress) {\n          httpRequest.onDownloadProgress = options.onDownloadProgress;\n        }\n      }\n\n      httpRequest.withCredentials = this._withCredentials;\n\n      serializeRequestBody(this, httpRequest, operationArguments, operationSpec);\n\n      if (httpRequest.streamResponseBody == undefined) {\n        httpRequest.streamResponseBody = isStreamOperation(operationSpec);\n      }\n\n      result = this.sendRequest(httpRequest)\n        .then(res => flattenResponse(res, operationSpec.responses[res.status]));\n    } catch (error) {\n      result = Promise.reject(error);\n    }\n\n    const cb = callback;\n    if (cb) {\n      result\n        // tslint:disable-next-line:no-null-keyword\n        .then(res => cb(null, res._response.parsedBody, res._response.request, res._response))\n        .catch(err => cb(err));\n    }\n\n    return result;\n  }\n}\n\nexport function serializeRequestBody(serviceClient: ServiceClient, httpRequest: WebResourceLike, operationArguments: OperationArguments, operationSpec: OperationSpec): void {\n  if (operationSpec.requestBody && operationSpec.requestBody.mapper) {\n    httpRequest.body = getOperationArgumentValueFromParameter(serviceClient, operationArguments, operationSpec.requestBody, operationSpec.serializer);\n\n    const bodyMapper = operationSpec.requestBody.mapper;\n    const { required, xmlName, xmlElementName, serializedName } = bodyMapper;\n    const typeName = bodyMapper.type.name;\n    try {\n      if (httpRequest.body != undefined || required) {\n        const requestBodyParameterPathString: string = getPathStringFromParameter(operationSpec.requestBody);\n        httpRequest.body = operationSpec.serializer.serialize(bodyMapper, httpRequest.body, requestBodyParameterPathString);\n        const isStream = typeName === MapperType.Stream;\n        if (operationSpec.isXML) {\n          if (typeName === MapperType.Sequence) {\n            httpRequest.body = stringifyXML(utils.prepareXMLRootList(httpRequest.body, xmlElementName || xmlName || serializedName!), { rootName: xmlName || serializedName });\n          }\n          else if (!isStream) {\n            httpRequest.body = stringifyXML(httpRequest.body, { rootName: xmlName || serializedName });\n          }\n        } else if (!isStream) {\n          httpRequest.body = JSON.stringify(httpRequest.body);\n        }\n      }\n    } catch (error) {\n      throw new Error(`Error \"${error.message}\" occurred in serializing the payload - ${JSON.stringify(serializedName, undefined, \"  \")}.`);\n    }\n  } else if (operationSpec.formDataParameters && operationSpec.formDataParameters.length > 0) {\n    httpRequest.formData = {};\n    for (const formDataParameter of operationSpec.formDataParameters) {\n      const formDataParameterValue: any = getOperationArgumentValueFromParameter(serviceClient, operationArguments, formDataParameter, operationSpec.serializer);\n      if (formDataParameterValue != undefined) {\n        const formDataParameterPropertyName: string = formDataParameter.mapper.serializedName || getPathStringFromParameter(formDataParameter);\n        httpRequest.formData[formDataParameterPropertyName] = operationSpec.serializer.serialize(formDataParameter.mapper, formDataParameterValue, getPathStringFromParameter(formDataParameter));\n      }\n    }\n  }\n}\n\nfunction isRequestPolicyFactory(instance: any): instance is RequestPolicyFactory {\n  return typeof instance.create === \"function\";\n}\n\nfunction getValueOrFunctionResult(value: undefined | string | ((defaultValue: string) => string), defaultValueCreator: (() => string)): string {\n  let result: string;\n  if (typeof value === \"string\") {\n    result = value;\n  } else {\n    result = defaultValueCreator();\n    if (typeof value === \"function\") {\n      result = value(result);\n    }\n  }\n  return result;\n}\n\nfunction createDefaultRequestPolicyFactories(credentials: ServiceClientCredentials | RequestPolicyFactory | undefined, options: ServiceClientOptions): RequestPolicyFactory[] {\n  const factories: RequestPolicyFactory[] = [];\n\n  if (options.generateClientRequestIdHeader) {\n    factories.push(generateClientRequestIdPolicy(options.clientRequestIdHeaderName));\n  }\n\n  if (credentials) {\n    if (isRequestPolicyFactory(credentials)) {\n      factories.push(credentials);\n    } else {\n      factories.push(signingPolicy(credentials));\n    }\n  }\n\n  const userAgentHeaderName: string = getValueOrFunctionResult(options.userAgentHeaderName, getDefaultUserAgentHeaderName);\n  const userAgentHeaderValue: string = getValueOrFunctionResult(options.userAgent, getDefaultUserAgentValue);\n  if (userAgentHeaderName && userAgentHeaderValue) {\n    factories.push(userAgentPolicy({ key: userAgentHeaderName, value: userAgentHeaderValue }));\n  }\n  factories.push(redirectPolicy());\n  factories.push(rpRegistrationPolicy(options.rpRegistrationRetryTimeout));\n\n  if (!options.noRetryPolicy) {\n    factories.push(exponentialRetryPolicy());\n    factories.push(systemErrorRetryPolicy());\n    factories.push(throttlingRetryPolicy());\n  }\n\n  factories.push(deserializationPolicy(options.deserializationContentTypes));\n\n  const proxySettings = options.proxySettings || getDefaultProxySettings();\n  if (proxySettings) {\n    factories.push(proxyPolicy(proxySettings));\n  }\n\n  if (options.agentSettings) {\n    factories.push(agentPolicy(options.agentSettings));\n  }\n\n  return factories;\n}\n\nexport type PropertyParent = { [propertyName: string]: any };\n\n/**\n * Get the property parent for the property at the provided path when starting with the provided\n * parent object.\n */\nexport function getPropertyParent(parent: PropertyParent, propertyPath: string[]): PropertyParent {\n  if (parent && propertyPath) {\n    const propertyPathLength: number = propertyPath.length;\n    for (let i = 0; i < propertyPathLength - 1; ++i) {\n      const propertyName: string = propertyPath[i];\n      if (!parent[propertyName]) {\n        parent[propertyName] = {};\n      }\n      parent = parent[propertyName];\n    }\n  }\n  return parent;\n}\n\nfunction getOperationArgumentValueFromParameter(serviceClient: ServiceClient, operationArguments: OperationArguments, parameter: OperationParameter, serializer: Serializer): any {\n  return getOperationArgumentValueFromParameterPath(serviceClient, operationArguments, parameter.parameterPath, parameter.mapper, serializer);\n}\n\nexport function getOperationArgumentValueFromParameterPath(serviceClient: ServiceClient, operationArguments: OperationArguments, parameterPath: ParameterPath, parameterMapper: Mapper, serializer: Serializer): any {\n  let value: any;\n  if (typeof parameterPath === \"string\") {\n    parameterPath = [parameterPath];\n  }\n  if (Array.isArray(parameterPath)) {\n    if (parameterPath.length > 0) {\n      if (parameterMapper.isConstant) {\n        value = parameterMapper.defaultValue;\n      } else {\n        let propertySearchResult: PropertySearchResult = getPropertyFromParameterPath(operationArguments, parameterPath);\n        if (!propertySearchResult.propertyFound) {\n          propertySearchResult = getPropertyFromParameterPath(serviceClient, parameterPath);\n        }\n\n        let useDefaultValue = false;\n        if (!propertySearchResult.propertyFound) {\n          useDefaultValue = parameterMapper.required || (parameterPath[0] === \"options\" && parameterPath.length === 2);\n        }\n        value = useDefaultValue ? parameterMapper.defaultValue : propertySearchResult.propertyValue;\n      }\n\n      // Serialize just for validation purposes.\n      const parameterPathString: string = getPathStringFromParameterPath(parameterPath, parameterMapper);\n      serializer.serialize(parameterMapper, value, parameterPathString);\n    }\n  } else {\n    if (parameterMapper.required) {\n      value = {};\n    }\n\n    for (const propertyName in parameterPath) {\n      const propertyMapper: Mapper = (parameterMapper as CompositeMapper).type.modelProperties![propertyName];\n      const propertyPath: ParameterPath = parameterPath[propertyName];\n      const propertyValue: any = getOperationArgumentValueFromParameterPath(serviceClient, operationArguments, propertyPath, propertyMapper, serializer);\n      // Serialize just for validation purposes.\n      const propertyPathString: string = getPathStringFromParameterPath(propertyPath, propertyMapper);\n      serializer.serialize(propertyMapper, propertyValue, propertyPathString);\n      if (propertyValue !== undefined) {\n        if (!value) {\n          value = {};\n        }\n        value[propertyName] = propertyValue;\n      }\n    }\n  }\n  return value;\n}\n\ninterface PropertySearchResult {\n  propertyValue?: any;\n  propertyFound: boolean;\n}\n\nfunction getPropertyFromParameterPath(parent: { [parameterName: string]: any }, parameterPath: string[]): PropertySearchResult {\n  const result: PropertySearchResult = { propertyFound: false };\n  let i = 0;\n  for (; i < parameterPath.length; ++i) {\n    const parameterPathPart: string = parameterPath[i];\n    // Make sure to check inherited properties too, so don't use hasOwnProperty().\n    if (parent != undefined && parameterPathPart in parent) {\n      parent = parent[parameterPathPart];\n    } else {\n      break;\n    }\n  }\n  if (i === parameterPath.length) {\n    result.propertyValue = parent;\n    result.propertyFound = true;\n  }\n  return result;\n}\n\nexport function flattenResponse(_response: HttpOperationResponse, responseSpec: OperationResponse | undefined): RestResponse {\n  const parsedHeaders = _response.parsedHeaders;\n  const bodyMapper = responseSpec && responseSpec.bodyMapper;\n\n  const addOperationResponse = (obj: {}) =>\n    Object.defineProperty(obj, \"_response\", {\n      value: _response\n    });\n\n  if (bodyMapper) {\n    const typeName = bodyMapper.type.name;\n    if (typeName === \"Stream\") {\n      return addOperationResponse({\n        ...parsedHeaders,\n        blobBody: _response.blobBody,\n        readableStreamBody: _response.readableStreamBody\n      });\n    }\n\n    const modelProperties = typeName === \"Composite\" && (bodyMapper as CompositeMapper).type.modelProperties || {};\n    const isPageableResponse = Object.keys(modelProperties).some(k => modelProperties[k].serializedName === \"\");\n    if (typeName === \"Sequence\" || isPageableResponse) {\n      // We're expecting a sequece(array) make sure that the response body is in the\n      // correct format, if not make it an empty array []\n      const parsedBody =\n        Array.isArray(_response.parsedBody)\n          ? _response.parsedBody\n          : [];\n      const arrayResponse = [...parsedBody] as RestResponse & any[];\n\n      for (const key of Object.keys(modelProperties)) {\n        if (modelProperties[key].serializedName) {\n          arrayResponse[key] = _response.parsedBody[key];\n        }\n      }\n\n      if (parsedHeaders) {\n        for (const key of Object.keys(parsedHeaders)) {\n          arrayResponse[key] = parsedHeaders[key];\n        }\n      }\n      addOperationResponse(arrayResponse);\n      return arrayResponse;\n    }\n\n    if (typeName === \"Composite\" || typeName === \"Dictionary\") {\n      return addOperationResponse({\n        ...parsedHeaders,\n        ..._response.parsedBody\n      });\n    }\n  }\n\n  if (bodyMapper || _response.request.method === \"HEAD\" || utils.isPrimitiveType(_response.parsedBody)) {\n    // primitive body types and HEAD booleans\n    return addOperationResponse({\n      ...parsedHeaders,\n      body: _response.parsedBody\n    });\n  }\n\n  return addOperationResponse({\n    ...parsedHeaders,\n    ..._response.parsedBody\n  });\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResourceLike } from \"../webResource\";\nimport { BaseRequestPolicy, RequestPolicy, RequestPolicyFactory, RequestPolicyOptionsLike } from \"./requestPolicy\";\n\nexport function logPolicy(logger: any = console.log): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptionsLike) => {\n      return new LogPolicy(nextPolicy, options, logger);\n    }\n  };\n}\n\nexport class LogPolicy extends BaseRequestPolicy {\n  logger?: any;\n\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptionsLike, logger: any = console.log) {\n    super(nextPolicy, options);\n    this.logger = logger;\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(request).then(response => logResponse(this, response));\n  }\n}\n\nfunction logResponse(policy: LogPolicy, response: HttpOperationResponse): Promise<HttpOperationResponse> {\n  policy.logger(`>> Request: ${JSON.stringify(response.request, undefined, 2)}`);\n  policy.logger(`>> Response status code: ${response.status}`);\n  const responseBody = response.bodyAsText;\n  policy.logger(`>> Body: ${responseBody}`);\n  return Promise.resolve(response);\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { HttpHeaders } from \"../httpHeaders\";\nimport { Constants } from \"../util/constants\";\nimport { WebResourceLike } from \"../webResource\";\nimport { ServiceClientCredentials } from \"./serviceClientCredentials\";\n\nconst HeaderConstants = Constants.HeaderConstants;\nconst DEFAULT_AUTHORIZATION_SCHEME = \"Bearer\";\n\n/**\n * A credentials object that uses a token string and a authorzation scheme to authenticate.\n */\nexport class TokenCredentials implements ServiceClientCredentials {\n  token: string;\n  authorizationScheme: string = DEFAULT_AUTHORIZATION_SCHEME;\n\n  /**\n   * Creates a new TokenCredentials object.\n   *\n   * @constructor\n   * @param {string} token The token.\n   * @param {string} [authorizationScheme] The authorization scheme.\n   */\n  constructor(token: string, authorizationScheme: string = DEFAULT_AUTHORIZATION_SCHEME) {\n    if (!token) {\n      throw new Error(\"token cannot be null or undefined.\");\n    }\n    this.token = token;\n    this.authorizationScheme = authorizationScheme;\n  }\n\n  /**\n   * Signs a request with the Authentication header.\n   *\n   * @param {WebResourceLike} webResource The WebResourceLike to be signed.\n   * @return {Promise<WebResourceLike>} The signed request object.\n   */\n  signRequest(webResource: WebResourceLike) {\n    if (!webResource.headers) webResource.headers = new HttpHeaders();\n    webResource.headers.set(HeaderConstants.AUTHORIZATION, `${this.authorizationScheme} ${this.token}`);\n    return Promise.resolve(webResource);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { HttpHeaders } from \"../httpHeaders\";\nimport * as base64 from \"../util/base64\";\nimport { Constants } from \"../util/constants\";\nimport { WebResourceLike } from \"../webResource\";\nimport { ServiceClientCredentials } from \"./serviceClientCredentials\";\nconst HeaderConstants = Constants.HeaderConstants;\nconst DEFAULT_AUTHORIZATION_SCHEME = \"Basic\";\n\nexport class BasicAuthenticationCredentials implements ServiceClientCredentials {\n  userName: string;\n  password: string;\n  authorizationScheme: string = DEFAULT_AUTHORIZATION_SCHEME;\n\n  /**\n   * Creates a new BasicAuthenticationCredentials object.\n   *\n   * @constructor\n   * @param {string} userName User name.\n   * @param {string} password Password.\n   * @param {string} [authorizationScheme] The authorization scheme.\n   */\n  constructor(userName: string, password: string, authorizationScheme: string = DEFAULT_AUTHORIZATION_SCHEME) {\n    if (userName === null || userName === undefined || typeof userName.valueOf() !== \"string\") {\n      throw new Error(\"userName cannot be null or undefined and must be of type string.\");\n    }\n    if (password === null || password === undefined || typeof password.valueOf() !== \"string\") {\n      throw new Error(\"password cannot be null or undefined and must be of type string.\");\n    }\n    this.userName = userName;\n    this.password = password;\n    this.authorizationScheme = authorizationScheme;\n  }\n\n  /**\n   * Signs a request with the Authentication header.\n   *\n   * @param {WebResourceLike} webResource The WebResourceLike to be signed.\n   * @returns {Promise<WebResourceLike>} The signed request object.\n   */\n  signRequest(webResource: WebResourceLike) {\n    const credentials = `${this.userName}:${this.password}`;\n    const encodedCredentials = `${this.authorizationScheme} ${base64.encodeString(credentials)}`;\n    if (!webResource.headers) webResource.headers = new HttpHeaders();\n    webResource.headers.set(HeaderConstants.AUTHORIZATION, encodedCredentials);\n    return Promise.resolve(webResource);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { HttpHeaders } from \"../httpHeaders\";\nimport { WebResourceLike } from \"../webResource\";\nimport { ServiceClientCredentials } from \"./serviceClientCredentials\";\n\n/**\n * @interface ApiKeyCredentialOptions\n * Describes the options to be provided while creating an instance of ApiKeyCredentials\n */\nexport interface ApiKeyCredentialOptions {\n  /**\n   * A key value pair of the header parameters that need to be applied to the request.\n   */\n  inHeader?: { [x: string]: any };\n  /**\n   * A key value pair of the query parameters that need to be applied to the request.\n   */\n  inQuery?: { [x: string]: any };\n}\n\n/**\n * Authenticates to a service using an API key.\n */\nexport class ApiKeyCredentials implements ServiceClientCredentials {\n  /**\n   * A key value pair of the header parameters that need to be applied to the request.\n   */\n  private readonly inHeader?: { [x: string]: any };\n  /**\n   * A key value pair of the query parameters that need to be applied to the request.\n   */\n  private readonly inQuery?: { [x: string]: any };\n\n  /**\n   * @constructor\n   * @param {object} options   Specifies the options to be provided for auth. Either header or query needs to be provided.\n   */\n  constructor(options: ApiKeyCredentialOptions) {\n    if (!options || (options && !options.inHeader && !options.inQuery)) {\n      throw new Error(`options cannot be null or undefined. Either \"inHeader\" or \"inQuery\" property of the options object needs to be provided.`);\n    }\n    this.inHeader = options.inHeader;\n    this.inQuery = options.inQuery;\n  }\n\n  /**\n   * Signs a request with the values provided in the inHeader and inQuery parameter.\n   *\n   * @param {WebResource} webResource The WebResource to be signed.\n   * @returns {Promise<WebResource>} The signed request object.\n   */\n  signRequest(webResource: WebResourceLike): Promise<WebResourceLike> {\n    if (!webResource) {\n      return Promise.reject(new Error(`webResource cannot be null or undefined and must be of type \"object\".`));\n    }\n\n    if (this.inHeader) {\n      if (!webResource.headers) {\n        webResource.headers = new HttpHeaders();\n      }\n      for (const headerName in this.inHeader) {\n        webResource.headers.set(headerName, this.inHeader[headerName]);\n      }\n    }\n\n    if (this.inQuery) {\n      if (!webResource.url) {\n        return Promise.reject(new Error(`url cannot be null in the request object.`));\n      }\n      if (webResource.url.indexOf(\"?\") < 0) {\n        webResource.url += \"?\";\n      }\n      for (const key in this.inQuery) {\n        if (!webResource.url.endsWith(\"?\")) {\n          webResource.url += \"&\";\n        }\n        webResource.url += `${key}=${this.inQuery[key]}`;\n      }\n    }\n\n    return Promise.resolve(webResource);\n  }\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { ApiKeyCredentials, ApiKeyCredentialOptions } from \"./apiKeyCredentials\";\n\nexport class TopicCredentials extends ApiKeyCredentials {\n    /**\n     * Creates a new EventGrid TopicCredentials object.\n     *\n     * @constructor\n     * @param {string} topicKey   The EventGrid topic key\n     */\n  constructor(topicKey: string) {\n    if (!topicKey || (topicKey && typeof topicKey !== \"string\")) {\n      throw new Error(\"topicKey cannot be null or undefined and must be of type string.\");\n    }\n    const options: ApiKeyCredentialOptions = {\n      inHeader: {\n        \"aeg-sas-key\": topicKey\n      }\n    };\n    super(options);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { ApiKeyCredentials, ApiKeyCredentialOptions } from \"./apiKeyCredentials\";\n\nexport class DomainCredentials extends ApiKeyCredentials {\n    /**\n     * Creates a new EventGrid DomainCredentials object.\n     *\n     * @constructor\n     * @param {string} domainKey   The EventGrid domain key\n     */\n  constructor(domainKey: string) {\n    if (!domainKey || (domainKey && typeof domainKey !== \"string\")) {\n      throw new Error(\"domainKey cannot be null or undefined and must be of type string.\");\n    }\n    const options: ApiKeyCredentialOptions = {\n      inHeader: {\n        \"aeg-sas-key\": domainKey\n      }\n    };\n    super(options);\n  }\n}\n"]}