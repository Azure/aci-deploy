{"version":3,"file":"msRestAzure.js","sources":["../node_modules/tslib/tslib.es6.js","../lib/lroPollStrategy.ts","../lib/lroPoller.ts","../lib/util/constants.ts","../lib/azureServiceClient.ts","../lib/baseResource.ts","../lib/cloudError.ts","../lib/credentials/cognitiveServicesCredentials.ts","../lib/msRestAzure.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { delay, HttpMethods, HttpOperationResponse, RequestOptionsBase, RestError, stripRequest, WebResource, OperationResponse, OperationSpec } from \"@azure/ms-rest-js\";\nimport { AzureServiceClient } from \"./azureServiceClient\";\nimport { LongRunningOperationStates } from \"./util/constants\";\n\nexport type LROPollStrategyType = \"AzureAsyncOperation\" | \"Location\" | \"GetResource\";\n\nexport interface LROPollState {\n  pollStrategyType: LROPollStrategyType;\n  initialResponse: HttpOperationResponse;\n  state: LongRunningOperationStates;\n  mostRecentRequest: WebResource;\n  mostRecentResponse: HttpOperationResponse;\n  resource: any;\n  azureAsyncOperationHeaderValue?: string;\n  locationHeaderValue?: string;\n  options?: RequestOptionsBase;\n}\n\n/**\n * A long-running operation polling strategy base class that other polling strategies should extend.\n */\nexport abstract class LROPollStrategy {\n  constructor(private readonly _azureServiceClient: AzureServiceClient, protected readonly _pollState: LROPollState) {\n  }\n\n  public getOperationStatus(): LongRunningOperationStates {\n    return this._pollState.state;\n  }\n\n  /**\n   * Get whether or not this poll strategy's LRO is finished.\n   * @returns Whether or not this poll strategy's LRO is finished.\n   */\n  public isFinished(): boolean {\n    return isFinished(this._pollState.state);\n  }\n\n  /**\n   * Send poll requests that check the LRO's status until it is determined that the LRO is finished.\n   * @returns Whether or not the LRO succeeded.\n   */\n  public async pollUntilFinished(): Promise<boolean> {\n    while (!this.isFinished()) {\n      const delayInSeconds: number = getDelayInSeconds(this._azureServiceClient, this._pollState.mostRecentResponse);\n      await delay(delayInSeconds * 1000);\n\n      await this.sendPollRequest();\n    }\n    return this.isFinalStatusAcceptable();\n  }\n\n  /**\n   * Send a single poll request that checks the LRO's status and return the response. If the LRO is\n   * finished, then no request will be sent and the last response received will be returned.\n   */\n  public abstract sendPollRequest(): Promise<void>;\n\n  public abstract isFinalStatusAcceptable(): boolean;\n\n  protected shouldDoFinalGetResourceRequest(): boolean {\n    const initialRequestMethod: HttpMethods = this._pollState.initialResponse.request.method;\n    return !this._pollState.resource && (initialRequestMethod === \"PUT\" || initialRequestMethod === \"PATCH\" || initialRequestMethod === \"POST\");\n  }\n\n  protected abstract doFinalGetResourceRequest(): Promise<void>;\n\n  public getMostRecentResponse(): HttpOperationResponse {\n    return this._pollState.mostRecentResponse;\n  }\n\n  public async getOperationResponse(): Promise<HttpOperationResponse> {\n    if (this.shouldDoFinalGetResourceRequest()) {\n      await this.doFinalGetResourceRequest();\n    }\n    const response: HttpOperationResponse = this._pollState.mostRecentResponse;\n    const result: HttpOperationResponse = {\n      ...response,\n      headers: response.headers.clone()\n    };\n    const resource: any = this._pollState.resource;\n    if (!resource) {\n      result.bodyAsText = response.bodyAsText;\n      result.parsedBody = response.parsedBody;\n    } else if (typeof resource.valueOf() === \"string\") {\n      result.bodyAsText = resource;\n      result.parsedBody = JSON.parse(resource);\n    } else {\n      result.bodyAsText = JSON.stringify(resource);\n      result.parsedBody = resource;\n    }\n    return result;\n  }\n\n  public getRestError(): RestError {\n    const error = new RestError(\"\");\n    error.request = stripRequest(this._pollState.mostRecentRequest);\n    error.response = this._pollState.mostRecentResponse;\n    error.message = `Long running operation failed with status: \"${this._pollState.state}\".`;\n    error.body = this._pollState.resource;\n    if (error.body) {\n      const innerError: any = error.body.error;\n      if (innerError) {\n        if (innerError.message) {\n          error.message = `Long running operation failed with error: \"${innerError.message}\".`;\n        }\n        if (innerError.code) {\n          error.code = innerError.code;\n        }\n      }\n    }\n    return error;\n  }\n\n  protected updateState(url: string, shouldDeserialize: boolean | ((response: HttpOperationResponse) => boolean)): Promise<void> {\n    return this.updateOperationStatus(url, shouldDeserialize).then(result => {\n      this._pollState.state = getProvisioningState(result.parsedBody) || \"Succeeded\";\n      this._pollState.mostRecentResponse = result;\n      this._pollState.mostRecentRequest = result.request;\n      this._pollState.resource = getResponseBody(result);\n    }).catch((error) => {\n      let resultStatus: number | undefined;\n      if (error.response && error.response.status) {\n        resultStatus = error.response.status;\n        if (this._pollState.initialResponse.request.method !== \"DELETE\" || resultStatus! < 400 || 499 < resultStatus!) {\n          throw error;\n        }\n      } else {\n        throw error;\n      }\n    });\n  }\n\n  /**\n   * Retrieves operation status by querying the operation URL.\n   * @param {string} statusUrl URL used to poll operation result.\n   */\n  protected updateOperationStatus(statusUrl: string, shouldDeserialize: boolean | ((response: HttpOperationResponse) => boolean)): Promise<HttpOperationResponse> {\n    const requestUrl: string = statusUrl.replace(\" \", \"%20\");\n    const httpRequest = new WebResource(requestUrl, \"GET\");\n    const pollState: LROPollState = this._pollState;\n    httpRequest.operationSpec = pollState.mostRecentRequest.operationSpec;\n    httpRequest.shouldDeserialize = shouldDeserialize;\n    httpRequest.operationResponseGetter = getOperationResponse;\n    const options: RequestOptionsBase | undefined = pollState.options;\n    if (options && options.customHeaders) {\n      const customHeaders = options.customHeaders;\n      for (const headerName of Object.keys(customHeaders)) {\n        httpRequest.headers.set(headerName, customHeaders[headerName]);\n      }\n    }\n    return this._azureServiceClient.sendRequest(httpRequest);\n  }\n\n  public getPollState(): LROPollState {\n    return this._pollState;\n  }\n}\n\nfunction getOperationResponse(operationSpec: OperationSpec, response: HttpOperationResponse): OperationResponse | undefined {\n  const statusCode: number = response.status;\n  const operationResponses: { [statusCode: string]: OperationResponse } = operationSpec.responses;\n  let result: OperationResponse | undefined = operationResponses[statusCode];\n  if (!result) {\n    if (statusCode === 200) {\n      result = operationResponses[201] || operationResponses[202];\n    } else if (201 <= statusCode && statusCode <= 299) {\n      result = {};\n    }\n  }\n  return result;\n}\n\nexport function getDelayInSeconds(azureServiceClient: AzureServiceClient, previousResponse: HttpOperationResponse): number {\n  let delayInSeconds = 30;\n  if (azureServiceClient.longRunningOperationRetryTimeout != undefined) {\n    delayInSeconds = azureServiceClient.longRunningOperationRetryTimeout;\n  } else {\n    const retryAfterHeaderValue: string | undefined = previousResponse.headers.get(\"retry-after\");\n    if (retryAfterHeaderValue) {\n      const retryAfterDelayInSeconds: number = parseInt(retryAfterHeaderValue);\n      if (!Number.isNaN(retryAfterDelayInSeconds)) {\n        delayInSeconds = retryAfterDelayInSeconds;\n      }\n    }\n  }\n  return delayInSeconds;\n}\n\nfunction getProvisioningState(responseBody: any): LongRunningOperationStates | undefined {\n  let result: LongRunningOperationStates | undefined;\n  if (responseBody) {\n    if (responseBody.provisioningState) {\n      result = responseBody.provisioningState;\n    } else if (responseBody.properties) {\n      result = responseBody.properties.provisioningState;\n    }\n  }\n  return result;\n}\n\nfunction getResponseBody(response: HttpOperationResponse): any {\n  let result: any;\n  try {\n    if (response.parsedBody) {\n      result = response.parsedBody;\n    } else if (response.bodyAsText && response.bodyAsText.length > 0) {\n      result = JSON.parse(response.bodyAsText);\n    }\n  } catch (error) {\n    const deserializationError = new RestError(`Error \"${error}\" occurred in parsing the responseBody \" +\n      \"while creating the PollingState for Long Running Operation- \"${response.bodyAsText}\"`);\n    deserializationError.request = response.request;\n    deserializationError.response = response;\n    throw deserializationError;\n  }\n  return result;\n}\n\nfunction getStatusFromResponse(response: HttpOperationResponse, responseBody?: any): LongRunningOperationStates {\n  if (responseBody == undefined) {\n    responseBody = getResponseBody(response);\n  }\n\n  let result: LongRunningOperationStates;\n  switch (response.status) {\n    case 202:\n      result = \"InProgress\";\n      break;\n\n    case 204:\n      result = \"Succeeded\";\n      break;\n\n    case 201:\n      result = getProvisioningState(responseBody) || \"InProgress\";\n      break;\n\n    case 200:\n      const provisioningState: LongRunningOperationStates | undefined = getProvisioningState(responseBody);\n      if (provisioningState) {\n        result = provisioningState;\n      } else if (getAzureAsyncOperationHeaderValue(response) || getLocationHeaderValue(response)) {\n        result = \"InProgress\";\n      } else {\n        result = \"Succeeded\";\n      }\n      break;\n\n    default:\n      result = \"Failed\";\n      break;\n  }\n  return result;\n}\n\nconst terminalStates: LongRunningOperationStates[] = [\"Succeeded\", \"Failed\", \"Canceled\", \"Cancelled\"];\n\n/**\n * Get whether or not a long-running operation with the provided status is finished.\n * @param status The current status of a long-running operation.\n * @returns Whether or not a long-running operation with the provided status is finished.\n */\nexport function isFinished(status: LongRunningOperationStates): boolean {\n  let result = false;\n  for (const terminalState of terminalStates) {\n    if (longRunningOperationStatesEqual(status, terminalState)) {\n      result = true;\n      break;\n    }\n  }\n  return result;\n}\n\nexport function longRunningOperationStatesEqual(lhs: LongRunningOperationStates, rhs: LongRunningOperationStates): boolean {\n  const lhsLowerCased: string = lhs && lhs.toLowerCase();\n  const rhsLowerCased: string = rhs && rhs.toLowerCase();\n  return lhsLowerCased === rhsLowerCased;\n}\n\n/**\n * Create a new long-running operation polling strategy based on the provided initial response.\n * @param initialResponse The initial response to the long-running operation's initial request.\n * @param azureServiceClient The AzureServiceClient that was used to send the initial request.\n * @param options Any options that were provided to the initial request.\n */\nexport function createLROPollStrategyFromInitialResponse(initialResponse: HttpOperationResponse, azureServiceClient: AzureServiceClient, options?: RequestOptionsBase): LROPollStrategy | undefined {\n  const initialRequestMethod: HttpMethods = initialResponse.request.method;\n  const initialResponseStatus: number = initialResponse.status;\n\n  let lroPollStrategyType: LROPollStrategyType | undefined;\n  if (getAzureAsyncOperationHeaderValue(initialResponse)) {\n    lroPollStrategyType = \"AzureAsyncOperation\";\n  } else if (getLocationHeaderValue(initialResponse)) {\n    lroPollStrategyType = \"Location\";\n  } else if (initialRequestMethod === \"PUT\" || initialRequestMethod === \"PATCH\") {\n    lroPollStrategyType = \"GetResource\";\n  } else if (initialResponseStatus !== 201 && initialResponseStatus !== 202 && !isFinished(getStatusFromResponse(initialResponse))) {\n    throw new Error(\"Can't determine long running operation polling strategy.\");\n  }\n\n  let result: LROPollStrategy | undefined;\n  if (lroPollStrategyType) {\n    const resource: any = getResponseBody(initialResponse);\n    const lroPollState: LROPollState = {\n      pollStrategyType: lroPollStrategyType,\n      options: options,\n      initialResponse: initialResponse,\n      mostRecentResponse: initialResponse,\n      mostRecentRequest: initialResponse.request,\n      azureAsyncOperationHeaderValue: getAzureAsyncOperationHeaderValue(initialResponse),\n      locationHeaderValue: getLocationHeaderValue(initialResponse),\n      resource: resource,\n      state: getStatusFromResponse(initialResponse, resource)\n    };\n    result = createLROPollStrategyFromPollState(azureServiceClient, lroPollState);\n  } else {\n    result = undefined;\n  }\n  return result;\n}\n\nexport function createLROPollStrategyFromPollState(azureServiceClient: AzureServiceClient, lroPollState: LROPollState): LROPollStrategy | undefined {\n  let result: LROPollStrategy;\n  switch (lroPollState.pollStrategyType) {\n    case \"AzureAsyncOperation\":\n      result = new AzureAsyncOperationLROPollStrategy(azureServiceClient, lroPollState);\n      break;\n\n    case \"Location\":\n      result = new LocationLROPollStrategy(azureServiceClient, lroPollState);\n      break;\n\n    case \"GetResource\":\n      result = new GetResourceLROPollStrategy(azureServiceClient, lroPollState);\n      break;\n\n    default:\n      throw new Error(`Unrecognized LRO poll strategy type: \"${lroPollState.pollStrategyType}\"`);\n      break;\n  }\n  return result;\n}\n\nfunction getLocationHeaderValue(response: HttpOperationResponse): string | undefined {\n  return response.headers.get(\"location\");\n}\n\n/**\n * A long-running operation polling strategy that is based on the location header.\n */\nclass LocationLROPollStrategy extends LROPollStrategy {\n  private locationStrategyShouldDeserialize(parsedResponse: HttpOperationResponse): boolean {\n    let shouldDeserialize = false;\n\n    const initialResponse: HttpOperationResponse = this._pollState.initialResponse;\n    const initialRequestMethod: HttpMethods = initialResponse.request.method;\n    const statusCode: number = parsedResponse.status;\n    if (statusCode === 200 ||\n      (statusCode === 201 && (initialRequestMethod === \"PUT\" || initialRequestMethod === \"PATCH\")) ||\n      (statusCode === 204 && (initialRequestMethod === \"DELETE\" || initialRequestMethod === \"POST\"))) {\n      shouldDeserialize = true;\n    }\n\n    return shouldDeserialize;\n  }\n  /**\n   * Retrieve PUT operation status by polling from \"location\" header.\n   * @param {string} method - The HTTP method.\n   * @param {PollingState} pollingState - The object to persist current operation state.\n   */\n  public sendPollRequest(): Promise<void> {\n    const lroPollState: LROPollState = this._pollState;\n    return this.updateOperationStatus(lroPollState.locationHeaderValue!, this.locationStrategyShouldDeserialize.bind(this)).then((result: HttpOperationResponse) => {\n      const locationHeaderValue: string | undefined = getLocationHeaderValue(result);\n      if (locationHeaderValue) {\n        lroPollState.locationHeaderValue = locationHeaderValue;\n      }\n\n      lroPollState.mostRecentResponse = result;\n      lroPollState.mostRecentRequest = result.request;\n\n      const initialResponse: HttpOperationResponse = lroPollState.initialResponse;\n      const initialRequestMethod: HttpMethods = initialResponse.request.method;\n      const initialResponseStatusCode: number = initialResponse.status;\n      const statusCode: number = result.status;\n      if (statusCode === 202) {\n        lroPollState.state = \"InProgress\";\n      } else if (statusCode === 200 ||\n        (statusCode === 201 && (initialRequestMethod === \"PUT\" || initialRequestMethod === \"PATCH\")) ||\n        (statusCode === 204 && (initialRequestMethod === \"DELETE\" || initialRequestMethod === \"POST\"))) {\n        lroPollState.state = \"Succeeded\";\n        lroPollState.resource = getResponseBody(result);\n      } else if (statusCode === 404 && initialRequestMethod === \"POST\" &&\n        (initialResponseStatusCode === 200 || initialResponseStatusCode === 201 || initialResponseStatusCode === 202)) {\n        lroPollState.state = \"Failed\";\n        lroPollState.resource = getResponseBody(result);\n      } else if (400 <= statusCode && statusCode <= 499) {\n        const resultBody: string = result.bodyAsText!;\n        let errorMessage: string = resultBody;\n        try {\n          const resultObject = JSON.parse(resultBody);\n          errorMessage = resultObject.message;\n        } catch (parseError) {\n          // Ignore the exception, use resultBody as the error message\n        }\n\n        throw new RestError(errorMessage, undefined, statusCode, stripRequest(result.request), result, resultBody);\n      } else {\n        throw new Error(`The response with status code ${statusCode} from polling for long running operation url \"${lroPollState.locationHeaderValue}\" is not valid.`);\n      }\n    });\n  }\n\n  public isFinalStatusAcceptable(): boolean {\n    const lroPollState: LROPollState = this._pollState;\n    const initialResponse: HttpOperationResponse = lroPollState.initialResponse;\n    const initialResponseStatusCode: number = initialResponse.status;\n    return longRunningOperationStatesEqual(lroPollState.state, \"Succeeded\") ||\n      (initialResponse.request.method === \"POST\" && lroPollState.mostRecentResponse.status === 404 &&\n        (initialResponseStatusCode === 200 ||\n          initialResponseStatusCode === 201 ||\n          initialResponseStatusCode === 202));\n  }\n\n  protected shouldDoFinalGetResourceRequest(): boolean {\n    const lroPollState: LROPollState = this._pollState;\n    const initialResponse: HttpOperationResponse = lroPollState.initialResponse;\n    let result: boolean;\n    const initialRequestMethod: HttpMethods = initialResponse.request.method;\n    const initialResponseStatusCode: number = initialResponse.status;\n    if (initialRequestMethod === \"POST\" && lroPollState.mostRecentResponse.status === 404 &&\n      (initialResponseStatusCode === 200 ||\n        initialResponseStatusCode === 201 ||\n        initialResponseStatusCode === 202)) {\n      result = false;\n    } else {\n      result = super.shouldDoFinalGetResourceRequest() ||\n        (initialRequestMethod === \"POST\" && initialResponseStatusCode === 201);\n    }\n    return result;\n  }\n\n  protected doFinalGetResourceRequest(): Promise<void> {\n    const lroPollState: LROPollState = this._pollState;\n    const initialResponse: HttpOperationResponse = lroPollState.initialResponse;\n    let getResourceRequestUrl: string;\n    const initialResponseStatusCode: number = initialResponse.status;\n    const initialRequest: WebResource = initialResponse.request;\n    if (initialRequest.method === \"POST\" &&\n      (initialResponseStatusCode === 200 ||\n        initialResponseStatusCode === 201 ||\n        initialResponseStatusCode === 202)) {\n      getResourceRequestUrl = lroPollState.locationHeaderValue!;\n    } else {\n      getResourceRequestUrl = initialRequest.url;\n    }\n    return this.updateState(getResourceRequestUrl, true);\n  }\n}\n\nfunction getAzureAsyncOperationHeaderValue(response: HttpOperationResponse): string | undefined {\n  return response.headers.get(\"azure-asyncoperation\");\n}\n\n/**\n * A long-running operation polling strategy that is based on the azure-asyncoperation header.\n */\nclass AzureAsyncOperationLROPollStrategy extends LROPollStrategy {\n  /**\n   * Retrieve operation status by polling from \"azure-asyncoperation\" header.\n   * @param {PollingState} pollingState - The object to persist current operation state.\n   * @param {boolean} inPostOrDelete - Invoked by Post Or Delete operation.\n   */\n  public sendPollRequest(): Promise<void> {\n    const lroPollState: LROPollState = this._pollState;\n    return this.updateOperationStatus(lroPollState.azureAsyncOperationHeaderValue!, false).then((response: HttpOperationResponse) => {\n      const statusCode: number = response.status;\n      const parsedResponse: any = response.parsedBody;\n      if (statusCode !== 200 && statusCode !== 201 && statusCode !== 202 && statusCode !== 204) {\n        const error = new RestError(`Invalid status code (${statusCode}) with response body \"${response.bodyAsText}\" occurred when polling for operation status.`);\n        error.statusCode = statusCode;\n        error.request = stripRequest(response.request);\n        error.response = response;\n        error.body = parsedResponse;\n        throw error;\n      }\n\n      if (!parsedResponse) {\n        throw new Error(\"The response from long running operation does not contain a body.\");\n      } else if (!parsedResponse.status) {\n        throw new Error(`The response \"${response.bodyAsText}\" from long running operation does not contain the status property.`);\n      }\n\n      const azureAsyncOperationHeaderValue: string | undefined = getAzureAsyncOperationHeaderValue(response);\n      if (azureAsyncOperationHeaderValue) {\n        lroPollState.azureAsyncOperationHeaderValue = azureAsyncOperationHeaderValue;\n      }\n\n      lroPollState.state = parsedResponse.status;\n      lroPollState.mostRecentResponse = response;\n      lroPollState.mostRecentRequest = response.request;\n      lroPollState.resource = getResponseBody(response);\n    });\n  }\n\n  protected shouldDoFinalGetResourceRequest(): boolean {\n    const lroPollState: LROPollState = this._pollState;\n    const initialResponse: HttpOperationResponse = lroPollState.initialResponse;\n    const initialRequestMethod: HttpMethods = initialResponse.request.method;\n    let result = false;\n    if (initialRequestMethod === \"PUT\" || initialRequestMethod === \"PATCH\") {\n      result = true;\n    } else {\n      if (lroPollState.locationHeaderValue) {\n        const initialResponseStatusCode: number = initialResponse.status;\n        if (initialRequestMethod === \"POST\") {\n          result = initialResponseStatusCode === 200 || initialResponseStatusCode === 201;\n        } else if (initialRequestMethod === \"DELETE\") {\n          result = initialResponseStatusCode === 200 || initialResponseStatusCode === 202;\n        }\n      }\n    }\n    return result;\n  }\n\n  protected doFinalGetResourceRequest(): Promise<void> {\n    const lroPollState: LROPollState = this._pollState;\n    const locationHeaderValue: string | undefined = lroPollState.locationHeaderValue;\n    const initialResponse: HttpOperationResponse = lroPollState.initialResponse;\n    const initialRequest: WebResource = initialResponse.request;\n    let getResourceRequestUrl: string = initialRequest.url;\n    if (locationHeaderValue) {\n      const initialRequestMethod: HttpMethods = initialRequest.method;\n      const initialResponseStatusCode: number = initialResponse.status;\n      if (initialRequestMethod === \"POST\" && (initialResponseStatusCode === 200 || initialResponseStatusCode === 201 || initialResponseStatusCode === 202)) {\n        getResourceRequestUrl = locationHeaderValue;\n      } else if (initialRequestMethod === \"DELETE\" && (initialResponseStatusCode === 200 || initialResponseStatusCode === 202)) {\n        getResourceRequestUrl = locationHeaderValue;\n      }\n    }\n    return this.updateState(getResourceRequestUrl, true);\n  }\n\n  public isFinalStatusAcceptable(): boolean {\n    const lroPollState: LROPollState = this._pollState;\n    const initialResponse: HttpOperationResponse = lroPollState.initialResponse;\n    const initialResponseStatusCode: number = initialResponse.status;\n    return longRunningOperationStatesEqual(lroPollState.state, \"Succeeded\") ||\n      (initialResponse.request.method === \"POST\" && (initialResponseStatusCode === 200 || initialResponseStatusCode === 201));\n  }\n}\n\n/**\n * A long-running operation polling strategy that is based on the resource's provisioning state.\n */\nclass GetResourceLROPollStrategy extends LROPollStrategy {\n  public sendPollRequest(): Promise<void> {\n    const lroPollState: LROPollState = this._pollState;\n    return this.updateOperationStatus(lroPollState.initialResponse.request.url, false).then(result => {\n      const statusCode: number = result.status;\n      const responseBody: any = result.parsedBody;\n      if (statusCode !== 200 && statusCode !== 201 && statusCode !== 202 && statusCode !== 204) {\n        const error = new RestError(`Invalid status code with response body \"${result.bodyAsText}\" occurred when polling for operation status.`);\n        error.statusCode = statusCode;\n        error.request = stripRequest(result.request);\n        error.response = result;\n        error.body = responseBody;\n        throw error;\n      }\n\n      if (!result.parsedBody) {\n        throw new Error(\"The response from long running operation does not contain a body.\");\n      }\n\n      lroPollState.state = getProvisioningState(result.parsedBody) || \"Succeeded\";\n      lroPollState.mostRecentResponse = result;\n      lroPollState.mostRecentRequest = result.request;\n      lroPollState.resource = getResponseBody(result);\n    });\n  }\n\n  public isFinalStatusAcceptable(): boolean {\n    return longRunningOperationStatesEqual(this._pollState.state, \"Succeeded\");\n  }\n\n  protected doFinalGetResourceRequest(): Promise<void> {\n    return this.sendPollRequest();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { HttpOperationResponse, RequestOptionsBase, RestResponse, flattenResponse } from \"@azure/ms-rest-js\";\nimport { AzureServiceClient } from \"./azureServiceClient\";\nimport { createLROPollStrategyFromInitialResponse, createLROPollStrategyFromPollState, LROPollState, LROPollStrategy } from \"./lroPollStrategy\";\nimport { LongRunningOperationStates } from \"./util/constants\";\n\n/**\n * An HTTP operation response that provides special methods for interacting with LROs (long running\n * operations).\n */\nexport class LROPoller {\n  /**\n   * Create a new HttpLongRunningOperationResponse.\n   * @param _lroPollStrategy The LROPollStrategy that this HttpLongRunningOperationResponse will\n   * use to interact with the LRO.\n   */\n  constructor(private readonly _lroPollStrategy: LROPollStrategy | undefined, private readonly _initialResponse: HttpOperationResponse) {\n  }\n\n  /**\n   * Get the first response that the service sent back when the LRO was initiated.\n   */\n  public getInitialResponse(): HttpOperationResponse {\n    return this._initialResponse;\n  }\n\n  /**\n   * Get the most recent response that the service sent back during this LRO.\n   */\n  public getMostRecentResponse(): HttpOperationResponse {\n    const lroPollStrategy: LROPollStrategy | undefined = this._lroPollStrategy;\n    return !lroPollStrategy ? this._initialResponse : lroPollStrategy.getMostRecentResponse();\n  }\n\n  /**\n   * Get whether or not the LRO is finished.\n   */\n  public isFinished(): boolean {\n    const lroPollStrategy: LROPollStrategy | undefined = this._lroPollStrategy;\n    return !lroPollStrategy ? true : lroPollStrategy.isFinished();\n  }\n\n  /**\n   * Get whether or not the LRO is finished and its final state is acceptable. If the LRO has not\n   * finished yet, then undefined will be returned. An \"acceptable\" final state is determined by the\n   * LRO strategy that the Azure service uses to perform long running operations.\n   */\n  public isFinalStatusAcceptable(): boolean | undefined {\n    let result: boolean | undefined;\n    const lroPollStrategy: LROPollStrategy | undefined = this._lroPollStrategy;\n    if (!lroPollStrategy) {\n      result = true;\n    } else if (lroPollStrategy.isFinished()) {\n      result = lroPollStrategy.isFinalStatusAcceptable();\n    }\n    return result;\n  }\n\n  /**\n   * Get the current status of the LRO.\n   */\n  public getOperationStatus(): LongRunningOperationStates {\n    const lroPollStrategy: LROPollStrategy | undefined = this._lroPollStrategy;\n    return !lroPollStrategy ? \"Succeeded\" : lroPollStrategy.getOperationStatus();\n  }\n\n  /**\n   * If the LRO is finished and in an acceptable state, then return the HttpOperationResponse. If\n   * the LRO is finished and not in an acceptable state, then throw the error that the LRO produced.\n   * If the LRO is not finished, then return undefined.\n   */\n  public getOperationResponse(): Promise<HttpOperationResponse | undefined> {\n    let result: Promise<HttpOperationResponse | undefined>;\n    const lroPollStrategy: LROPollStrategy | undefined = this._lroPollStrategy;\n    if (!lroPollStrategy) {\n      result = Promise.resolve(this._initialResponse);\n    } else if (!lroPollStrategy.isFinished()) {\n      result = Promise.resolve(undefined);\n    } else if (lroPollStrategy.isFinalStatusAcceptable()) {\n      result = lroPollStrategy.getOperationResponse();\n    } else {\n      throw lroPollStrategy.getRestError();\n    }\n    return result;\n  }\n\n  /**\n   * Send a single poll request and return the LRO's state.\n   */\n  public poll(): Promise<LongRunningOperationStates> {\n    let result: Promise<LongRunningOperationStates>;\n    const lroPollStrategy: LROPollStrategy | undefined = this._lroPollStrategy;\n    if (!lroPollStrategy) {\n      result = Promise.resolve<LongRunningOperationStates>(\"Succeeded\");\n    } else {\n      result = lroPollStrategy.sendPollRequest().then(() => {\n        return lroPollStrategy.getOperationStatus();\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Send poll requests that check the LRO's status until it is determined that the LRO is finished.\n   */\n  public async pollUntilFinished(): Promise<RestResponse> {\n    let result: Promise<RestResponse>;\n    const lroPollStrategy: LROPollStrategy | undefined = this._lroPollStrategy;\n\n    if (!lroPollStrategy) {\n      result = Promise.resolve(flattenAzureResponse(this._initialResponse));\n    } else {\n      result = lroPollStrategy.pollUntilFinished().then((succeeded: boolean) => {\n        if (succeeded) {\n          return lroPollStrategy.getOperationResponse().then(flattenAzureResponse);\n        } else {\n          throw lroPollStrategy.getRestError();\n        }\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Get an LROPollState object that can be used to poll this LRO in a different context (such as on\n   * a different process or a different machine). If the LRO couldn't produce an LRO polling\n   * strategy, then this will return undefined.\n   */\n  public getPollState(): LROPollState | undefined {\n    const lroPollStrategy: LROPollStrategy | undefined = this._lroPollStrategy;\n    return !lroPollStrategy ? undefined : lroPollStrategy.getPollState();\n  }\n}\n\nexport function createLROPollerFromInitialResponse(azureServiceClient: AzureServiceClient, initialResponse: HttpOperationResponse, options?: RequestOptionsBase): LROPoller {\n  const lroPollStrategy: LROPollStrategy | undefined = createLROPollStrategyFromInitialResponse(initialResponse, azureServiceClient, options);\n  return new LROPoller(lroPollStrategy, initialResponse);\n}\n\nexport function createLROPollerFromPollState(azureServiceClient: AzureServiceClient, lroMemento: LROPollState): LROPoller {\n  const lroPollStrategy: LROPollStrategy | undefined = createLROPollStrategyFromPollState(azureServiceClient, lroMemento);\n  return new LROPoller(lroPollStrategy, lroMemento.initialResponse);\n}\n\nfunction flattenAzureResponse(response: HttpOperationResponse): RestResponse {\n  const { operationResponseGetter, operationSpec } = response.request;\n  return flattenResponse(response, operationResponseGetter && operationSpec && operationResponseGetter(operationSpec, response));\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\n/**\n * Defines constants for long running operation states.\n *\n * @const\n * @type {string}\n */\nexport type LongRunningOperationStates =\n  | \"InProgress\"\n  | \"Succeeded\"\n  | \"Failed\"\n  | \"Canceled\"\n  | \"Cancelled\";\n\n/**\n * The default language in the request header.\n *\n * @const\n * @type {string}\n */\nexport const DEFAULT_LANGUAGE = \"en-us\";\n\n/**\n * The ms-rest-azure version.\n * @const\n * @type {string}\n */\nexport const msRestAzureVersion = \"1.3.7\";\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { HttpOperationResponse, OperationArguments, OperationSpec, RequestOptionsBase, RequestPrepareOptions, ServiceClient, ServiceClientCredentials, ServiceClientOptions, WebResource, getDefaultUserAgentValue as getDefaultUserAgentValueFromMsRest } from \"@azure/ms-rest-js\";\nimport { createLROPollerFromInitialResponse, createLROPollerFromPollState, LROPoller } from \"./lroPoller\";\nimport { LROPollState } from \"./lroPollStrategy\";\nimport * as Constants from \"./util/constants\";\n\n/**\n * Options to be provided while creating the client.\n */\nexport interface AzureServiceClientOptions extends ServiceClientOptions {\n  /**\n   * @property {string} [options.acceptLanguage] - Gets or sets the preferred language for the response. Default value is: \"en-US\".\n   */\n  acceptLanguage?: string;\n\n  /**\n   * @property {number} [options.longRunningOperationRetryTimeout] - Gets or sets the retry timeout in seconds for\n   * Long Running Operations. Default value is 30.\n   */\n  longRunningOperationRetryTimeout?: number;\n}\n\n/**\n * @class\n * Initializes a new instance of the AzureServiceClient class.\n * @constructor\n *\n * @param {msRest.ServiceClientCredentilas} credentials - ApplicationTokenCredentials or\n * UserTokenCredentials object used for authentication.\n * @param {AzureServiceClientOptions} options - The parameter options used by AzureServiceClient\n */\nexport class AzureServiceClient extends ServiceClient {\n  public acceptLanguage: string = Constants.DEFAULT_LANGUAGE;\n  /**\n   * The retry timeout in seconds for Long Running Operations. Default value is 30.\n   */\n  public longRunningOperationRetryTimeout?: number;\n\n  constructor(credentials: ServiceClientCredentials, options?: AzureServiceClientOptions) {\n    super(credentials, options = updateOptionsWithDefaultValues(options));\n\n    // For convenience, if the credentials have an associated AzureEnvironment,\n    // automatically use the baseUri from that environment.\n    const env = (credentials as any).environment;\n    if (env && !this.baseUri) {\n      this.baseUri = env.resourceManagerEndpointUrl;\n    }\n\n    if (options.acceptLanguage != undefined) {\n      this.acceptLanguage = options.acceptLanguage;\n    }\n\n    if (options.longRunningOperationRetryTimeout != undefined) {\n      this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;\n    }\n  }\n\n  /**\n   * Send the initial request of a LRO (long running operation) and get back an\n   * LROPoller that provides methods for polling the LRO and checking if the LRO is finished.\n   * @param operationArguments The arguments to the operation.\n   * @param operationSpec The specification for the operation.\n   * @param options Additional options to be sent while making the request.\n   * @returns The LROPoller object that provides methods for interacting with the LRO.\n   */\n  sendLRORequest(operationArguments: OperationArguments, operationSpec: OperationSpec, options?: RequestOptionsBase): Promise<LROPoller> {\n    return this.sendOperationRequest(operationArguments, operationSpec)\n      .then(initialResponse => createLROPollerFromInitialResponse(this, initialResponse._response, options));\n  }\n\n  /**\n   * Provides a mechanism to make a request that will poll and provide the final result.\n   * @param {msRest.RequestPrepareOptions|msRest.WebResource} request - The request object\n   * @param {AzureRequestOptionsBase} [options] Additional options to be sent while making the request\n   * @returns {Promise<msRest.HttpOperationResponse>} The HttpOperationResponse containing the final polling request, response and the responseBody.\n   */\n  sendLongRunningRequest(request: RequestPrepareOptions | WebResource, options?: RequestOptionsBase): Promise<HttpOperationResponse> {\n    return this.beginLongRunningRequest(request, options)\n      .then((lroResponse: LROPoller) => lroResponse.pollUntilFinished())\n      .then(res => res._response);\n  }\n\n  /**\n   * Send the initial request of a LRO (long running operation) and get back an\n   * HttpLongRunningOperationResponse that provides methods for polling the LRO and checking if the\n   * LRO is finished.\n   * @param {msRest.RequestPrepareOptions|msRest.WebResource} request - The request object\n   * @param {AzureRequestOptionsBase} [options] Additional options to be sent while making the request\n   * @returns {Promise<LROPoller>} The HttpLongRunningOperationResponse\n   * that provides methods for interacting with the LRO.\n   */\n  beginLongRunningRequest(request: RequestPrepareOptions | WebResource, options?: RequestOptionsBase): Promise<LROPoller> {\n    return this.sendRequest(request)\n      .then((initialResponse: HttpOperationResponse) => createLROPollerFromInitialResponse(this, initialResponse, options));\n  }\n\n  /**\n   * Restore an LROPoller from the provided LROPollState. This method can be used to recreate an\n   * LROPoller on a different process or machine.\n   */\n  restoreLROPoller(lroPollState: LROPollState): LROPoller {\n    return createLROPollerFromPollState(this, lroPollState);\n  }\n}\n\nexport function getDefaultUserAgentValue(): string {\n  const defaultUserAgent = getDefaultUserAgentValueFromMsRest();\n  return `ms-rest-azure-js/${Constants.msRestAzureVersion} ${defaultUserAgent}`;\n}\n\nexport function updateOptionsWithDefaultValues(options?: AzureServiceClientOptions): AzureServiceClientOptions {\n  if (!options) {\n    options = {};\n  }\n\n  if (options.generateClientRequestIdHeader == undefined) {\n    options.generateClientRequestIdHeader = true;\n  }\n\n  if (!options.userAgent) {\n    options.userAgent = getDefaultUserAgentValue();\n  }\n\n  return options;\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { CompositeMapper } from \"@azure/ms-rest-js\";\n\n/**\n * @class\n * An empty interface.\n */\nexport interface BaseResource { }\n\nexport const BaseResourceMapper: CompositeMapper = {\n  serializedName: \"BaseResource\",\n  type: {\n    name: \"Composite\",\n    className: \"BaseResource\",\n    modelProperties: {\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { CompositeMapper } from \"@azure/ms-rest-js\";\n\n/**\n * @class\n * Provides additional information about an http error response returned from a Microsoft Azure service.\n */\nexport interface CloudError extends Error {\n  /**\n   * @property {string} code The error code parsed from the body of the http error response.\n   */\n  code: string;\n  /**\n   * @property {string} message The error message parsed from the body of the http error response.\n   */\n  message: string;\n  /**\n   * @property {string} [target] The target of the error.\n   */\n  target?: string;\n  /**\n   * @property {Array<CloudError>} [details] An array of CloudError objects specifying the details.\n   */\n  details?: Array<CloudError>;\n  /**\n   * @property {any} [innerError] The inner error parsed from the body of the http error response\n   */\n  innerError?: any;\n  /**\n   * @property {AdditionalInfoElement} [innerError] The additional error information\n   */\n  additionalInfo?: AdditionalInfoElement;\n}\n\n/**\n * @interface\n * Additional data for an instance of CloudError.\n */\nexport interface AdditionalInfoElement {\n  /**\n   * @property {string} [type] Type of the data.\n   */\n  type?: string;\n\n  /**\n   * @property {string} [info] Additional info.\n   */\n  info?: string;\n}\n\nexport const CloudErrorMapper: CompositeMapper = {\n  serializedName: \"CloudError\",\n  type: {\n    name: \"Composite\",\n    className: \"CloudError\",\n    modelProperties: {\n      code: {\n        required: true,\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        required: true,\n        serializedName: \"message\",\n        type: {\n          name: \"String\"\n        }\n      },\n      target: {\n        serializedName: \"target\",\n        type: {\n          name: \"String\"\n        }\n      },\n      details: {\n        serializedName: \"details\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"CloudErrorElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"CloudError\"\n            }\n          }\n        }\n      },\n      innerError: {\n        required: false,\n        serializedName: \"innererror\",\n        type: {\n          name: \"Object\"\n        }\n      },\n      additionalInfo: {\n        required: false,\n        serializedName: \"additionalInfo\",\n        type: {\n          name: \"Composite\",\n          className: \"AdditionalInfoElement\",\n          modelProperties: {\n            type: {\n              required: true,\n              serializedName: \"type\",\n              type: {\n                name: \"String\"\n              }\n            },\n            info: {\n              required: false,\n              serializedName: \"info\",\n              type: {\n                name: \"Object\"\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nimport { ApiKeyCredentials } from \"@azure/ms-rest-js\";\n\n/**\n * Creates a new CognitiveServicesCredentials object.\n *\n * @constructor\n * @param {string} subscriptionKey   The CognitiveServices subscription key\n */\nexport class CognitiveServicesCredentials extends ApiKeyCredentials {\n  constructor(subscriptionKey: string) {\n    if (!subscriptionKey || (subscriptionKey && typeof subscriptionKey.valueOf() !== \"string\")) {\n      throw new Error(\"subscriptionKey cannot be null or undefined and must be of type string.\");\n    }\n\n    const options = {\n      inHeader: {\n        \"Ocp-Apim-Subscription-Key\": subscriptionKey,\n        \"X-BingApis-SDK-Client\": \"node-SDK\"\n      }\n    };\n    super(options);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nexport { AzureServiceClient, AzureServiceClientOptions, getDefaultUserAgentValue } from \"./azureServiceClient\";\nexport { BaseResource, BaseResourceMapper } from \"./baseResource\";\nexport { CloudError, CloudErrorMapper } from \"./cloudError\";\nexport { CognitiveServicesCredentials } from \"./credentials/cognitiveServicesCredentials\";\nexport { createLROPollerFromInitialResponse, createLROPollerFromPollState, LROPoller } from \"./lroPoller\";\nexport { DEFAULT_LANGUAGE, LongRunningOperationStates, msRestAzureVersion } from \"./util/constants\";\n"],"names":["delay","RestError","stripRequest","WebResource","tslib_1.__extends","flattenResponse","Constants.DEFAULT_LANGUAGE","ServiceClient","getDefaultUserAgentValueFromMsRest","Constants.msRestAzureVersion","ApiKeyCredentials"],"mappings":"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"}